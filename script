--[=[
 d888b  db    db d888888b      .d888b.      db      db    db  .d8b.  
88' Y8b 88    88   `88'        VP  `8D      88      88    88 d8' `8b 
88      88    88    88            odD'      88      88    88 88ooo88 
88  ooo 88    88    88          .88'        88      88    88 88~~~88 
88. ~8~ 88b  d88   .88.        j88.         88booo. 88b  d88 88   88    @uniquadev
 Y888P  ~Y8888P' Y888888P      888888D      Y88888P ~Y8888P' YP   YP  CONVERTER 
]=]

-- Instances: 286 | Scripts: 57 | Modules: 3 | Tags: 0
local G2L = {};

-- StarterGui.VEXGUI
G2L["1"] = Instance.new("ScreenGui", game:GetService("Players").LocalPlayer:WaitForChild("PlayerGui"));
G2L["1"]["Name"] = [[VEXGUI]];
G2L["1"]["ZIndexBehavior"] = Enum.ZIndexBehavior.Sibling;
G2L["1"]["ResetOnSpawn"] = false;


-- StarterGui.VEXGUI.Main
G2L["2"] = Instance.new("Frame", G2L["1"]);
G2L["2"]["BorderSizePixel"] = 0;
G2L["2"]["BackgroundColor3"] = Color3.fromRGB(156, 58, 236);
G2L["2"]["Size"] = UDim2.new(0.3225, 0, 0.0229, 0);
G2L["2"]["Position"] = UDim2.new(0.29169, 0, 0.26998, 0);
G2L["2"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["2"]["Name"] = [[Main]];


-- StarterGui.VEXGUI.Main.Close
G2L["3"] = Instance.new("TextButton", G2L["2"]);
G2L["3"]["TextWrapped"] = true;
G2L["3"]["BorderSizePixel"] = 0;
G2L["3"]["TextSize"] = 18;
G2L["3"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["3"]["BackgroundColor3"] = Color3.fromRGB(85, 6, 6);
G2L["3"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["3"]["Size"] = UDim2.new(0.0439, 0, 1, 0);
G2L["3"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["3"]["Text"] = [[X]];
G2L["3"]["Name"] = [[Close]];


-- StarterGui.VEXGUI.Main.Close.UIGradient
G2L["4"] = Instance.new("UIGradient", G2L["3"]);
G2L["4"]["Rotation"] = 90;
G2L["4"]["Color"] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(255, 255, 255)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(126, 126, 126))};


-- StarterGui.VEXGUI.Main.VexFrame
G2L["5"] = Instance.new("Frame", G2L["2"]);
G2L["5"]["BorderSizePixel"] = 0;
G2L["5"]["BackgroundColor3"] = Color3.fromRGB(49, 49, 49);
G2L["5"]["Size"] = UDim2.new(1, 0, 12.83235, 0);
G2L["5"]["Position"] = UDim2.new(0, 0, 0.97373, 0);
G2L["5"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["5"]["Name"] = [[VexFrame]];
G2L["5"]["BackgroundTransparency"] = 0.4;


-- StarterGui.VEXGUI.Main.VexFrame.Tabs
G2L["6"] = Instance.new("Folder", G2L["5"]);
G2L["6"]["Name"] = [[Tabs]];


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.Home
G2L["7"] = Instance.new("Frame", G2L["6"]);
G2L["7"]["Visible"] = false;
G2L["7"]["BorderSizePixel"] = 0;
G2L["7"]["BackgroundColor3"] = Color3.fromRGB(16, 16, 16);
G2L["7"]["Size"] = UDim2.new(0.83138, 0, 0.99795, 0);
G2L["7"]["Position"] = UDim2.new(0.16862, 0, 0.00205, 0);
G2L["7"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["7"]["Name"] = [[Home]];
G2L["7"]["BackgroundTransparency"] = 0.5;


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.Home.PlayerImage
G2L["8"] = Instance.new("ImageLabel", G2L["7"]);
G2L["8"]["BorderSizePixel"] = 0;
G2L["8"]["BackgroundColor3"] = Color3.fromRGB(45, 45, 45);
-- [ERROR] cannot convert ImageContent, please report to "https://github.com/uniquadev/GuiToLuaConverter/issues"
G2L["8"]["Image"] = [[rbxasset://textures/ui/GuiImagePlaceholder.png]];
G2L["8"]["Size"] = UDim2.new(0.16455, 0, 0.33031, 0);
G2L["8"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["8"]["BackgroundTransparency"] = 0.5;
G2L["8"]["Name"] = [[PlayerImage]];
G2L["8"]["Position"] = UDim2.new(0.0292, 0, 0.22292, 0);


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.Home.Thanks
G2L["9"] = Instance.new("TextLabel", G2L["7"]);
G2L["9"]["TextWrapped"] = true;
G2L["9"]["TextTruncate"] = Enum.TextTruncate.SplitWord;
G2L["9"]["BorderSizePixel"] = 0;
G2L["9"]["TextSize"] = 14;
G2L["9"]["TextScaled"] = true;
G2L["9"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["9"]["TextDirection"] = Enum.TextDirection.LeftToRight;
G2L["9"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["9"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["9"]["BackgroundTransparency"] = 1;
G2L["9"]["Size"] = UDim2.new(0.41732, 0, 0.1, 0);
G2L["9"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["9"]["Text"] = [[Thanks for using VEXSPLOIT!]];
G2L["9"]["Name"] = [[Thanks]];
G2L["9"]["Position"] = UDim2.new(0.3585, 0, 0.03472, 0);


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.Home.Thanks.RGBLabelScript
G2L["a"] = Instance.new("LocalScript", G2L["9"]);
G2L["a"]["Name"] = [[RGBLabelScript]];


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.Home.Info
G2L["b"] = Instance.new("Folder", G2L["7"]);
G2L["b"]["Name"] = [[Info]];


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.Home.Info.PlrName
G2L["c"] = Instance.new("TextLabel", G2L["b"]);
G2L["c"]["TextWrapped"] = true;
G2L["c"]["BorderSizePixel"] = 0;
G2L["c"]["TextSize"] = 14;
G2L["c"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["c"]["TextScaled"] = true;
G2L["c"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["c"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["c"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["c"]["BackgroundTransparency"] = 1;
G2L["c"]["Size"] = UDim2.new(0.18867, 0, 0.14395, 0);
G2L["c"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["c"]["Text"] = [[Welcome]];
G2L["c"]["Name"] = [[PlrName]];
G2L["c"]["Position"] = UDim2.new(0.01772, 0, 0.56527, 0);


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.Home.Info.AccAge
G2L["d"] = Instance.new("TextLabel", G2L["b"]);
G2L["d"]["TextWrapped"] = true;
G2L["d"]["BorderSizePixel"] = 0;
G2L["d"]["TextSize"] = 14;
G2L["d"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["d"]["TextScaled"] = true;
G2L["d"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["d"]["TextDirection"] = Enum.TextDirection.LeftToRight;
G2L["d"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["d"]["TextColor3"] = Color3.fromRGB(181, 181, 181);
G2L["d"]["BackgroundTransparency"] = 1;
G2L["d"]["Size"] = UDim2.new(0.18867, 0, 0.20264, 0);
G2L["d"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["d"]["Text"] = [[Your account age is]];
G2L["d"]["Name"] = [[AccAge]];
G2L["d"]["Position"] = UDim2.new(0.01772, 0, 0.70407, 0);


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.Home.Info.plrid
G2L["e"] = Instance.new("TextLabel", G2L["b"]);
G2L["e"]["TextWrapped"] = true;
G2L["e"]["BorderSizePixel"] = 0;
G2L["e"]["TextXAlignment"] = Enum.TextXAlignment.Right;
G2L["e"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["e"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["e"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["e"]["BackgroundTransparency"] = 1;
G2L["e"]["Size"] = UDim2.new(0.32747, 0, 0.0474, 0);
G2L["e"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["e"]["Text"] = [[USER ID]];
G2L["e"]["Name"] = [[plrid]];
G2L["e"]["Position"] = UDim2.new(0.67075, 0, 0.90323, 0);


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.Home.Info.VersionLabel
G2L["f"] = Instance.new("TextLabel", G2L["b"]);
G2L["f"]["TextWrapped"] = true;
G2L["f"]["BorderSizePixel"] = 0;
G2L["f"]["TextSize"] = 14;
G2L["f"]["TextXAlignment"] = Enum.TextXAlignment.Right;
G2L["f"]["TextStrokeColor3"] = Color3.fromRGB(255, 255, 255);
G2L["f"]["TextScaled"] = true;
G2L["f"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["f"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["f"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["f"]["BackgroundTransparency"] = 1;
G2L["f"]["Size"] = UDim2.new(0.27569, 0, 0.05122, 0);
G2L["f"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["f"]["Text"] = [[VERSION 0.1]];
G2L["f"]["Name"] = [[VersionLabel]];
G2L["f"]["Position"] = UDim2.new(0.72253, 0, 0.94878, 0);


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.Home.ChangeTheme
G2L["10"] = Instance.new("Frame", G2L["7"]);
G2L["10"]["BorderSizePixel"] = 0;
G2L["10"]["BackgroundColor3"] = Color3.fromRGB(105, 105, 105);
G2L["10"]["Size"] = UDim2.new(0.59976, 0, 0.68262, 0);
G2L["10"]["Position"] = UDim2.new(0.26688, 0, 0.18207, 0);
G2L["10"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["10"]["Name"] = [[ChangeTheme]];
G2L["10"]["BackgroundTransparency"] = 0.7;


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.Home.ChangeTheme.Header
G2L["11"] = Instance.new("TextLabel", G2L["10"]);
G2L["11"]["TextWrapped"] = true;
G2L["11"]["BorderSizePixel"] = 0;
G2L["11"]["TextSize"] = 14;
G2L["11"]["TextScaled"] = true;
G2L["11"]["BackgroundColor3"] = Color3.fromRGB(40, 40, 40);
G2L["11"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["11"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["11"]["BackgroundTransparency"] = 0.6;
G2L["11"]["Size"] = UDim2.new(1, 0, 0.12964, 0);
G2L["11"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["11"]["Text"] = [[Theme]];
G2L["11"]["Name"] = [[Header]];
G2L["11"]["Position"] = UDim2.new(-0, 0, 0, 0);


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.Home.ChangeTheme.Colors
G2L["12"] = Instance.new("Folder", G2L["10"]);
G2L["12"]["Name"] = [[Colors]];


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.Home.ChangeTheme.Colors.Pink
G2L["13"] = Instance.new("TextButton", G2L["12"]);
G2L["13"]["BorderSizePixel"] = 0;
G2L["13"]["TextSize"] = 14;
G2L["13"]["TextColor3"] = Color3.fromRGB(255, 0, 0);
G2L["13"]["BackgroundColor3"] = Color3.fromRGB(255, 0, 255);
G2L["13"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["13"]["Size"] = UDim2.new(0.093, 0, 0.17, 0);
G2L["13"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["13"]["Text"] = [[]];
G2L["13"]["Name"] = [[Pink]];
G2L["13"]["Position"] = UDim2.new(0.76358, 0, 0.20745, 0);


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.Home.ChangeTheme.Colors.Blue
G2L["14"] = Instance.new("TextButton", G2L["12"]);
G2L["14"]["BorderSizePixel"] = 0;
G2L["14"]["TextSize"] = 14;
G2L["14"]["TextColor3"] = Color3.fromRGB(255, 0, 0);
G2L["14"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 255);
G2L["14"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["14"]["Size"] = UDim2.new(0.093, 0, 0.17, 0);
G2L["14"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["14"]["Text"] = [[]];
G2L["14"]["Name"] = [[Blue]];
G2L["14"]["Position"] = UDim2.new(0.6373, 0, 0.20745, 0);


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.Home.ChangeTheme.Colors.Purple
G2L["15"] = Instance.new("TextButton", G2L["12"]);
G2L["15"]["BorderSizePixel"] = 0;
G2L["15"]["TextSize"] = 14;
G2L["15"]["TextColor3"] = Color3.fromRGB(255, 0, 0);
G2L["15"]["BackgroundColor3"] = Color3.fromRGB(86, 0, 128);
G2L["15"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["15"]["Size"] = UDim2.new(0.093, 0, 0.17, 0);
G2L["15"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["15"]["Text"] = [[]];
G2L["15"]["Name"] = [[Purple]];
G2L["15"]["Position"] = UDim2.new(0.88604, 0, 0.20745, 0);


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.Home.ChangeTheme.Colors.Yellow
G2L["16"] = Instance.new("TextButton", G2L["12"]);
G2L["16"]["BorderSizePixel"] = 0;
G2L["16"]["TextSize"] = 14;
G2L["16"]["TextColor3"] = Color3.fromRGB(255, 0, 0);
G2L["16"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 0);
G2L["16"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["16"]["Size"] = UDim2.new(0.093, 0, 0.17, 0);
G2L["16"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["16"]["Text"] = [[]];
G2L["16"]["Name"] = [[Yellow]];
G2L["16"]["Position"] = UDim2.new(0.39238, 0, 0.20745, 0);


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.Home.ChangeTheme.Colors.White
G2L["17"] = Instance.new("TextButton", G2L["12"]);
G2L["17"]["BorderSizePixel"] = 0;
G2L["17"]["TextSize"] = 14;
G2L["17"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
G2L["17"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["17"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["17"]["Size"] = UDim2.new(0.093, 0, 0.17, 0);
G2L["17"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["17"]["Text"] = [[]];
G2L["17"]["Name"] = [[White]];
G2L["17"]["Position"] = UDim2.new(0.02966, 0, 0.20745, 0);


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.Home.ChangeTheme.Colors.Red
G2L["18"] = Instance.new("TextButton", G2L["12"]);
G2L["18"]["BorderSizePixel"] = 0;
G2L["18"]["TextSize"] = 14;
G2L["18"]["TextColor3"] = Color3.fromRGB(255, 0, 0);
G2L["18"]["BackgroundColor3"] = Color3.fromRGB(255, 0, 0);
G2L["18"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["18"]["Size"] = UDim2.new(0.093, 0, 0.17, 0);
G2L["18"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["18"]["Text"] = [[]];
G2L["18"]["Name"] = [[Red]];
G2L["18"]["Position"] = UDim2.new(0.15129, 0, 0.20745, 0);


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.Home.ChangeTheme.Colors.Orange
G2L["19"] = Instance.new("TextButton", G2L["12"]);
G2L["19"]["BorderSizePixel"] = 0;
G2L["19"]["TextSize"] = 14;
G2L["19"]["TextColor3"] = Color3.fromRGB(255, 0, 0);
G2L["19"]["BackgroundColor3"] = Color3.fromRGB(255, 128, 0);
G2L["19"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["19"]["Size"] = UDim2.new(0.093, 0, 0.17, 0);
G2L["19"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["19"]["Text"] = [[]];
G2L["19"]["Name"] = [[Orange]];
G2L["19"]["Position"] = UDim2.new(0.26992, 0, 0.20745, 0);


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.Home.ChangeTheme.Colors.Green
G2L["1a"] = Instance.new("TextButton", G2L["12"]);
G2L["1a"]["BorderSizePixel"] = 0;
G2L["1a"]["TextSize"] = 14;
G2L["1a"]["TextColor3"] = Color3.fromRGB(255, 0, 0);
G2L["1a"]["BackgroundColor3"] = Color3.fromRGB(0, 255, 0);
G2L["1a"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["1a"]["Size"] = UDim2.new(0.093, 0, 0.17, 0);
G2L["1a"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["1a"]["Text"] = [[]];
G2L["1a"]["Name"] = [[Green]];
G2L["1a"]["Position"] = UDim2.new(0.51867, 0, 0.20745, 0);


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.Home.ChangeTheme.Colors.DarkMode
G2L["1b"] = Instance.new("TextButton", G2L["12"]);
G2L["1b"]["BorderSizePixel"] = 0;
G2L["1b"]["TextSize"] = 14;
G2L["1b"]["TextColor3"] = Color3.fromRGB(255, 0, 0);
G2L["1b"]["BackgroundColor3"] = Color3.fromRGB(46, 46, 46);
G2L["1b"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["1b"]["Size"] = UDim2.new(0.093, 0, 0.17, 0);
G2L["1b"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["1b"]["Text"] = [[]];
G2L["1b"]["Name"] = [[DarkMode]];
G2L["1b"]["Position"] = UDim2.new(0.02883, 0, 0.46347, 0);


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.Home.ChangeTheme.CustomColor
G2L["1c"] = Instance.new("TextBox", G2L["10"]);
G2L["1c"]["Name"] = [[CustomColor]];
G2L["1c"]["PlaceholderColor3"] = Color3.fromRGB(200, 200, 200);
G2L["1c"]["BorderSizePixel"] = 0;
G2L["1c"]["TextWrapped"] = true;
G2L["1c"]["TextSize"] = 14;
G2L["1c"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1c"]["TextScaled"] = true;
G2L["1c"]["BackgroundColor3"] = Color3.fromRGB(91, 91, 91);
G2L["1c"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["1c"]["PlaceholderText"] = [[Custom Color (255,255,255)]];
G2L["1c"]["Size"] = UDim2.new(0.95226, 0, 0.20076, 0);
G2L["1c"]["Position"] = UDim2.new(0.02296, 0, 0.71718, 0);
G2L["1c"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["1c"]["Text"] = [[]];


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.Home.ChangeTheme.ThemeScript
G2L["1d"] = Instance.new("LocalScript", G2L["10"]);
G2L["1d"]["Name"] = [[ThemeScript]];


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.VexButtons
G2L["1e"] = Instance.new("Folder", G2L["6"]);
G2L["1e"]["Name"] = [[VexButtons]];


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.VexButtons.ScrollingFrame
G2L["1f"] = Instance.new("ScrollingFrame", G2L["1e"]);
G2L["1f"]["Active"] = true;
G2L["1f"]["BorderSizePixel"] = 0;
G2L["1f"]["BackgroundColor3"] = Color3.fromRGB(49, 49, 49);
G2L["1f"]["Size"] = UDim2.new(0.16885, 0, 0.99795, 0);
G2L["1f"]["ScrollBarImageColor3"] = Color3.fromRGB(0, 0, 0);
G2L["1f"]["Position"] = UDim2.new(0, 0, 0.00205, 0);
G2L["1f"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["1f"]["ScrollBarThickness"] = 5;
G2L["1f"]["BackgroundTransparency"] = 0.3;


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.VexButtons.ScrollingFrame.HomeButton
G2L["20"] = Instance.new("TextButton", G2L["1f"]);
G2L["20"]["TextWrapped"] = true;
G2L["20"]["BorderSizePixel"] = 0;
G2L["20"]["TextSize"] = 14;
G2L["20"]["TextScaled"] = true;
G2L["20"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["20"]["BackgroundColor3"] = Color3.fromRGB(99, 99, 99);
G2L["20"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["20"]["Size"] = UDim2.new(1, 0, 0.049, 0);
G2L["20"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["20"]["Text"] = [[Home 🏠]];
G2L["20"]["Name"] = [[HomeButton]];
G2L["20"]["Position"] = UDim2.new(0, 0, 0.015, 0);


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.VexButtons.ScrollingFrame.HomeButton.UIGradient
G2L["21"] = Instance.new("UIGradient", G2L["20"]);
G2L["21"]["Rotation"] = 90;
G2L["21"]["Color"] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(233, 233, 233)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(149, 149, 149))};


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.VexButtons.ScrollingFrame.GeneralButton
G2L["22"] = Instance.new("TextButton", G2L["1f"]);
G2L["22"]["TextWrapped"] = true;
G2L["22"]["BorderSizePixel"] = 0;
G2L["22"]["TextSize"] = 14;
G2L["22"]["TextScaled"] = true;
G2L["22"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["22"]["BackgroundColor3"] = Color3.fromRGB(99, 99, 99);
G2L["22"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["22"]["Size"] = UDim2.new(1, 0, 0.049, 0);
G2L["22"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["22"]["Text"] = [[General 🌊]];
G2L["22"]["Name"] = [[GeneralButton]];
G2L["22"]["Position"] = UDim2.new(0, 0, 0.063, 0);


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.VexButtons.ScrollingFrame.GeneralButton.UIGradient
G2L["23"] = Instance.new("UIGradient", G2L["22"]);
G2L["23"]["Rotation"] = 90;
G2L["23"]["Color"] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(233, 233, 233)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(149, 149, 149))};


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.VexButtons.ScrollingFrame.ClientButton
G2L["24"] = Instance.new("TextButton", G2L["1f"]);
G2L["24"]["TextWrapped"] = true;
G2L["24"]["BorderSizePixel"] = 0;
G2L["24"]["TextSize"] = 14;
G2L["24"]["TextScaled"] = true;
G2L["24"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["24"]["BackgroundColor3"] = Color3.fromRGB(99, 99, 99);
G2L["24"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["24"]["Size"] = UDim2.new(1, 0, 0.049, 0);
G2L["24"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["24"]["Text"] = [[Client 🦇]];
G2L["24"]["Name"] = [[ClientButton]];
G2L["24"]["Position"] = UDim2.new(-0.023, 0, 0.113, 0);


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.VexButtons.ScrollingFrame.ClientButton.UIGradient
G2L["25"] = Instance.new("UIGradient", G2L["24"]);
G2L["25"]["Rotation"] = 90;
G2L["25"]["Color"] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(233, 233, 233)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(149, 149, 149))};


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.VexButtons.ScrollingFrame.SpectateButton
G2L["26"] = Instance.new("TextButton", G2L["1f"]);
G2L["26"]["TextWrapped"] = true;
G2L["26"]["BorderSizePixel"] = 0;
G2L["26"]["TextSize"] = 14;
G2L["26"]["TextScaled"] = true;
G2L["26"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["26"]["BackgroundColor3"] = Color3.fromRGB(99, 99, 99);
G2L["26"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["26"]["Size"] = UDim2.new(1, 0, 0.049, 0);
G2L["26"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["26"]["Text"] = [[Spectate 👁️]];
G2L["26"]["Name"] = [[SpectateButton]];
G2L["26"]["Position"] = UDim2.new(-0.023, 0, 0.1634, 0);


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.VexButtons.ScrollingFrame.SpectateButton.UIGradient
G2L["27"] = Instance.new("UIGradient", G2L["26"]);
G2L["27"]["Rotation"] = 90;
G2L["27"]["Color"] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(233, 233, 233)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(149, 149, 149))};


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.VexButtons.ScrollingFrame.TeleportButton
G2L["28"] = Instance.new("TextButton", G2L["1f"]);
G2L["28"]["TextWrapped"] = true;
G2L["28"]["BorderSizePixel"] = 0;
G2L["28"]["TextSize"] = 14;
G2L["28"]["TextScaled"] = true;
G2L["28"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["28"]["BackgroundColor3"] = Color3.fromRGB(99, 99, 99);
G2L["28"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["28"]["Size"] = UDim2.new(1, 0, 0.049, 0);
G2L["28"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["28"]["Text"] = [[Teleport 🔮]];
G2L["28"]["Name"] = [[TeleportButton]];
G2L["28"]["Position"] = UDim2.new(-0.023, 0, 0.211, 0);


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.VexButtons.ScrollingFrame.TeleportButton.UIGradient
G2L["29"] = Instance.new("UIGradient", G2L["28"]);
G2L["29"]["Rotation"] = 90;
G2L["29"]["Color"] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(233, 233, 233)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(149, 149, 149))};


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.VexButtons.ScrollingFrame.TargetButton
G2L["2a"] = Instance.new("TextButton", G2L["1f"]);
G2L["2a"]["TextWrapped"] = true;
G2L["2a"]["BorderSizePixel"] = 0;
G2L["2a"]["TextSize"] = 14;
G2L["2a"]["TextScaled"] = true;
G2L["2a"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["2a"]["BackgroundColor3"] = Color3.fromRGB(99, 99, 99);
G2L["2a"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["2a"]["Size"] = UDim2.new(1, 0, 0.049, 0);
G2L["2a"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["2a"]["Text"] = [[Target 😈]];
G2L["2a"]["Name"] = [[TargetButton]];
G2L["2a"]["Position"] = UDim2.new(-0.023, 0, 0.26179, 0);


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.VexButtons.ScrollingFrame.TargetButton.UIGradient
G2L["2b"] = Instance.new("UIGradient", G2L["2a"]);
G2L["2b"]["Rotation"] = 90;
G2L["2b"]["Color"] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(233, 233, 233)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(149, 149, 149))};


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.VexButtons.ScrollingFrame.GiveToolButton
G2L["2c"] = Instance.new("TextButton", G2L["1f"]);
G2L["2c"]["TextWrapped"] = true;
G2L["2c"]["BorderSizePixel"] = 0;
G2L["2c"]["TextSize"] = 14;
G2L["2c"]["TextScaled"] = true;
G2L["2c"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["2c"]["BackgroundColor3"] = Color3.fromRGB(99, 99, 99);
G2L["2c"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["2c"]["Size"] = UDim2.new(1, 0, 0.049, 0);
G2L["2c"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["2c"]["Text"] = [[GiveTool 🔧]];
G2L["2c"]["Name"] = [[GiveToolButton]];
G2L["2c"]["Position"] = UDim2.new(0, 0, 0.313, 0);


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.VexButtons.ScrollingFrame.GiveToolButton.UIGradient
G2L["2d"] = Instance.new("UIGradient", G2L["2c"]);
G2L["2d"]["Rotation"] = 90;
G2L["2d"]["Color"] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(233, 233, 233)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(149, 149, 149))};


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.VexButtons.ScrollingFrame.ChatBypassButton
G2L["2e"] = Instance.new("TextButton", G2L["1f"]);
G2L["2e"]["TextWrapped"] = true;
G2L["2e"]["BorderSizePixel"] = 0;
G2L["2e"]["TextSize"] = 14;
G2L["2e"]["TextScaled"] = true;
G2L["2e"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["2e"]["BackgroundColor3"] = Color3.fromRGB(99, 99, 99);
G2L["2e"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["2e"]["Size"] = UDim2.new(1, 0, 0.049, 0);
G2L["2e"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["2e"]["Text"] = [[Bypasser 🤬]];
G2L["2e"]["Name"] = [[ChatBypassButton]];
G2L["2e"]["Position"] = UDim2.new(0, 0, 0.358, 0);


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.VexButtons.ScrollingFrame.ChatBypassButton.UIGradient
G2L["2f"] = Instance.new("UIGradient", G2L["2e"]);
G2L["2f"]["Rotation"] = 90;
G2L["2f"]["Color"] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(233, 233, 233)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(149, 149, 149))};


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.VexButtons.ScrollingFrame.NotesButton
G2L["30"] = Instance.new("TextButton", G2L["1f"]);
G2L["30"]["TextWrapped"] = true;
G2L["30"]["BorderSizePixel"] = 0;
G2L["30"]["TextSize"] = 14;
G2L["30"]["TextScaled"] = true;
G2L["30"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["30"]["BackgroundColor3"] = Color3.fromRGB(99, 99, 99);
G2L["30"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["30"]["Size"] = UDim2.new(1, 0, 0.049, 0);
G2L["30"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["30"]["Text"] = [[Notes 📝]];
G2L["30"]["Name"] = [[NotesButton]];
G2L["30"]["Position"] = UDim2.new(0, 0, 0.406, 0);


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.VexButtons.ScrollingFrame.NotesButton.UIGradient
G2L["31"] = Instance.new("UIGradient", G2L["30"]);
G2L["31"]["Rotation"] = 90;
G2L["31"]["Color"] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(233, 233, 233)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(149, 149, 149))};


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.VexButtons.ScrollingFrame.CreditsButton
G2L["32"] = Instance.new("TextButton", G2L["1f"]);
G2L["32"]["TextWrapped"] = true;
G2L["32"]["BorderSizePixel"] = 0;
G2L["32"]["TextSize"] = 14;
G2L["32"]["TextScaled"] = true;
G2L["32"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["32"]["BackgroundColor3"] = Color3.fromRGB(99, 99, 99);
G2L["32"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["32"]["Size"] = UDim2.new(1, 0, 0.049, 0);
G2L["32"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["32"]["Text"] = [[Credits]];
G2L["32"]["Name"] = [[CreditsButton]];
G2L["32"]["Position"] = UDim2.new(-0.034, 0, 0.454, 0);


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.VexButtons.ScrollingFrame.CreditsButton.UIGradient
G2L["33"] = Instance.new("UIGradient", G2L["32"]);
G2L["33"]["Rotation"] = 90;
G2L["33"]["Color"] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(233, 233, 233)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(149, 149, 149))};


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.VexButtons.ScrollingFrame.Settings
G2L["34"] = Instance.new("TextButton", G2L["1f"]);
G2L["34"]["TextWrapped"] = true;
G2L["34"]["BorderSizePixel"] = 0;
G2L["34"]["TextSize"] = 14;
G2L["34"]["TextScaled"] = true;
G2L["34"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["34"]["BackgroundColor3"] = Color3.fromRGB(99, 99, 99);
G2L["34"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["34"]["Size"] = UDim2.new(1, 0, 0.049, 0);
G2L["34"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["34"]["Text"] = [[Settings]];
G2L["34"]["Name"] = [[Settings]];
G2L["34"]["Position"] = UDim2.new(-0.01117, 0, 0.50122, 0);


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.VexButtons.ScrollingFrame.Settings.UIGradient
G2L["35"] = Instance.new("UIGradient", G2L["34"]);
G2L["35"]["Rotation"] = 90;
G2L["35"]["Color"] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(233, 233, 233)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(149, 149, 149))};


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.VexButtons.ScrollingFrame.CurrentGame
G2L["36"] = Instance.new("TextButton", G2L["1f"]);
G2L["36"]["TextWrapped"] = true;
G2L["36"]["BorderSizePixel"] = 0;
G2L["36"]["TextSize"] = 14;
G2L["36"]["TextScaled"] = true;
G2L["36"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["36"]["BackgroundColor3"] = Color3.fromRGB(99, 99, 99);
G2L["36"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["36"]["Size"] = UDim2.new(1, 0, 0.049, 0);
G2L["36"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["36"]["Text"] = [[CurrentGame]];
G2L["36"]["Name"] = [[CurrentGame]];
G2L["36"]["Visible"] = false;
G2L["36"]["Position"] = UDim2.new(-0.01117, 0, 0.57714, 0);


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.VexButtons.ScrollingFrame.CurrentGame.UIGradient
G2L["37"] = Instance.new("UIGradient", G2L["36"]);
G2L["37"]["Rotation"] = 90;
G2L["37"]["Color"] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(233, 233, 233)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(149, 149, 149))};


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.TextHandler
G2L["38"] = Instance.new("LocalScript", G2L["6"]);
G2L["38"]["Name"] = [[TextHandler]];


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.Spectate
G2L["39"] = Instance.new("Frame", G2L["6"]);
G2L["39"]["Visible"] = false;
G2L["39"]["BorderSizePixel"] = 0;
G2L["39"]["BackgroundColor3"] = Color3.fromRGB(16, 16, 16);
G2L["39"]["Size"] = UDim2.new(0.83115, 0, 1.00515, 0);
G2L["39"]["Position"] = UDim2.new(0.16885, 0, -0.00515, 0);
G2L["39"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["39"]["Name"] = [[Spectate]];
G2L["39"]["BackgroundTransparency"] = 0.5;


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.Spectate.enterButton
G2L["3a"] = Instance.new("TextButton", G2L["39"]);
G2L["3a"]["TextWrapped"] = true;
G2L["3a"]["BorderSizePixel"] = 0;
G2L["3a"]["TextSize"] = 14;
G2L["3a"]["TextScaled"] = true;
G2L["3a"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["3a"]["BackgroundColor3"] = Color3.fromRGB(0, 116, 255);
G2L["3a"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["3a"]["Size"] = UDim2.new(0.204, 0, 0.154, 0);
G2L["3a"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["3a"]["Text"] = [[Enter]];
G2L["3a"]["Name"] = [[enterButton]];
G2L["3a"]["Position"] = UDim2.new(0.36214, 0, 0.56471, 0);


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.Spectate.enterButton.UICorner
G2L["3b"] = Instance.new("UICorner", G2L["3a"]);



-- StarterGui.VEXGUI.Main.VexFrame.Tabs.Spectate.enterButton.SpectateScript
G2L["3c"] = Instance.new("LocalScript", G2L["3a"]);
G2L["3c"]["Name"] = [[SpectateScript]];


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.Spectate.enterButton.UIGradient
G2L["3d"] = Instance.new("UIGradient", G2L["3a"]);
G2L["3d"]["Rotation"] = 90;
G2L["3d"]["Color"] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(181, 181, 181)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(85, 85, 85))};


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.Spectate.TextBox
G2L["3e"] = Instance.new("TextBox", G2L["39"]);
G2L["3e"]["PlaceholderColor3"] = Color3.fromRGB(255, 255, 255);
G2L["3e"]["BorderSizePixel"] = 0;
G2L["3e"]["TextWrapped"] = true;
G2L["3e"]["TextSize"] = 14;
G2L["3e"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["3e"]["TextScaled"] = true;
G2L["3e"]["BackgroundColor3"] = Color3.fromRGB(95, 95, 95);
G2L["3e"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["3e"]["PlaceholderText"] = [[Who do you want to spectate?]];
G2L["3e"]["Size"] = UDim2.new(0.37979, 0, 0.4405, 0);
G2L["3e"]["Position"] = UDim2.new(0.27224, 0, 0.06348, 0);
G2L["3e"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["3e"]["Text"] = [[]];


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.Spectate.TextBox.UICorner
G2L["3f"] = Instance.new("UICorner", G2L["3e"]);



-- StarterGui.VEXGUI.Main.VexFrame.Tabs.Spectate.TextBox.UICorner
G2L["40"] = Instance.new("UICorner", G2L["3e"]);



-- StarterGui.VEXGUI.Main.VexFrame.Tabs.Spectate.TextBox.UIGradient
G2L["41"] = Instance.new("UIGradient", G2L["3e"]);
G2L["41"]["Rotation"] = 90;
G2L["41"]["Color"] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(181, 181, 181)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(85, 85, 85))};


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.Spectate.resetButton
G2L["42"] = Instance.new("TextButton", G2L["39"]);
G2L["42"]["TextWrapped"] = true;
G2L["42"]["BorderSizePixel"] = 0;
G2L["42"]["TextSize"] = 14;
G2L["42"]["TextScaled"] = true;
G2L["42"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["42"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["42"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["42"]["Size"] = UDim2.new(0.20418, 0, 0.15385, 0);
G2L["42"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["42"]["Text"] = [[Reset]];
G2L["42"]["Name"] = [[resetButton]];
G2L["42"]["Position"] = UDim2.new(0.36215, 0, 0.75221, 0);


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.Spectate.resetButton.UICorner
G2L["43"] = Instance.new("UICorner", G2L["42"]);



-- StarterGui.VEXGUI.Main.VexFrame.Tabs.Spectate.resetButton.UIGradient
G2L["44"] = Instance.new("UIGradient", G2L["42"]);
G2L["44"]["Rotation"] = 90;
G2L["44"]["Color"] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(181, 181, 181)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(85, 85, 85))};


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.Teleport
G2L["45"] = Instance.new("Frame", G2L["6"]);
G2L["45"]["Visible"] = false;
G2L["45"]["BorderSizePixel"] = 0;
G2L["45"]["BackgroundColor3"] = Color3.fromRGB(16, 16, 16);
G2L["45"]["Size"] = UDim2.new(0.83115, 0, 1, 0);
G2L["45"]["Position"] = UDim2.new(0.16885, 0, 0, 0);
G2L["45"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["45"]["Name"] = [[Teleport]];
G2L["45"]["BackgroundTransparency"] = 0.5;


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.Teleport.teleportenter
G2L["46"] = Instance.new("TextButton", G2L["45"]);
G2L["46"]["TextWrapped"] = true;
G2L["46"]["BorderSizePixel"] = 0;
G2L["46"]["TextSize"] = 14;
G2L["46"]["TextScaled"] = true;
G2L["46"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["46"]["BackgroundColor3"] = Color3.fromRGB(155, 52, 165);
G2L["46"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["46"]["Size"] = UDim2.new(0.2779, 0, 0.15445, 0);
G2L["46"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["46"]["Text"] = [[Teleport]];
G2L["46"]["Name"] = [[teleportenter]];
G2L["46"]["Position"] = UDim2.new(0.34294, 0, 0.78253, 0);


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.Teleport.teleportenter.UICorner
G2L["47"] = Instance.new("UICorner", G2L["46"]);



-- StarterGui.VEXGUI.Main.VexFrame.Tabs.Teleport.teleportenter.TeleportScript
G2L["48"] = Instance.new("LocalScript", G2L["46"]);
G2L["48"]["Name"] = [[TeleportScript]];


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.Teleport.teleportenter.UIGradient
G2L["49"] = Instance.new("UIGradient", G2L["46"]);
G2L["49"]["Rotation"] = 90;
G2L["49"]["Color"] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(181, 181, 181)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(85, 85, 85))};


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.Teleport.ImageLabel
G2L["4a"] = Instance.new("ImageLabel", G2L["45"]);
G2L["4a"]["BorderSizePixel"] = 0;
G2L["4a"]["BackgroundColor3"] = Color3.fromRGB(89, 89, 89);
-- [ERROR] cannot convert ImageContent, please report to "https://github.com/uniquadev/GuiToLuaConverter/issues"
G2L["4a"]["Image"] = [[rbxasset://textures/ui/GuiImagePlaceholder.png]];
G2L["4a"]["Size"] = UDim2.new(0.19684, 0, 0.40158, 0);
G2L["4a"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["4a"]["Position"] = UDim2.new(0.38326, 0, 0.07343, 0);


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.Teleport.TextBox
G2L["4b"] = Instance.new("TextBox", G2L["45"]);
G2L["4b"]["PlaceholderColor3"] = Color3.fromRGB(255, 255, 255);
G2L["4b"]["BorderSizePixel"] = 0;
G2L["4b"]["TextWrapped"] = true;
G2L["4b"]["TextSize"] = 14;
G2L["4b"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["4b"]["TextScaled"] = true;
G2L["4b"]["BackgroundColor3"] = Color3.fromRGB(95, 95, 95);
G2L["4b"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["4b"]["PlaceholderText"] = [[Enter Target]];
G2L["4b"]["Size"] = UDim2.new(0.446, 0, 0.20028, 0);
G2L["4b"]["Position"] = UDim2.new(0.25835, 0, 0.52562, 0);
G2L["4b"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["4b"]["Text"] = [[]];


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.Teleport.TextBox.UICorner
G2L["4c"] = Instance.new("UICorner", G2L["4b"]);



-- StarterGui.VEXGUI.Main.VexFrame.Tabs.Teleport.TextBox.UICorner
G2L["4d"] = Instance.new("UICorner", G2L["4b"]);



-- StarterGui.VEXGUI.Main.VexFrame.Tabs.Teleport.TextBox.UIGradient
G2L["4e"] = Instance.new("UIGradient", G2L["4b"]);
G2L["4e"]["Rotation"] = 90;
G2L["4e"]["Color"] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(181, 181, 181)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(85, 85, 85))};


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.Credits
G2L["4f"] = Instance.new("Frame", G2L["6"]);
G2L["4f"]["Visible"] = false;
G2L["4f"]["BorderSizePixel"] = 0;
G2L["4f"]["BackgroundColor3"] = Color3.fromRGB(16, 16, 16);
G2L["4f"]["Size"] = UDim2.new(0.83336, 0, 0.99795, 0);
G2L["4f"]["Position"] = UDim2.new(0.16664, 0, 0.00205, 0);
G2L["4f"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["4f"]["Name"] = [[Credits]];
G2L["4f"]["BackgroundTransparency"] = 0.5;


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.Credits.Header
G2L["50"] = Instance.new("TextLabel", G2L["4f"]);
G2L["50"]["TextWrapped"] = true;
G2L["50"]["BorderSizePixel"] = 0;
G2L["50"]["TextSize"] = 14;
G2L["50"]["TextScaled"] = true;
G2L["50"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["50"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["50"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["50"]["BackgroundTransparency"] = 1;
G2L["50"]["Size"] = UDim2.new(0.99734, 0, 0.15635, 0);
G2L["50"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["50"]["Text"] = [[CREDITS]];
G2L["50"]["Name"] = [[Header]];
G2L["50"]["Position"] = UDim2.new(0.00266, 0, 0, 0);


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.Credits.Names
G2L["51"] = Instance.new("Folder", G2L["4f"]);
G2L["51"]["Name"] = [[Names]];


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.Credits.Names.Participant
G2L["52"] = Instance.new("TextLabel", G2L["51"]);
G2L["52"]["TextWrapped"] = true;
G2L["52"]["BorderSizePixel"] = 0;
G2L["52"]["TextSize"] = 14;
G2L["52"]["TextScaled"] = true;
G2L["52"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["52"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["52"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["52"]["BackgroundTransparency"] = 1;
G2L["52"]["Size"] = UDim2.new(0.72672, 0, 0.10048, 0);
G2L["52"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["52"]["Text"] = [[AFLY: SCRIPTER, UI DESIGNER]];
G2L["52"]["Name"] = [[Participant]];
G2L["52"]["Position"] = UDim2.new(0.13662, 0, 0.22184, 0);


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.Credits.Names.Participant
G2L["53"] = Instance.new("TextLabel", G2L["51"]);
G2L["53"]["TextWrapped"] = true;
G2L["53"]["BorderSizePixel"] = 0;
G2L["53"]["TextSize"] = 14;
G2L["53"]["TextScaled"] = true;
G2L["53"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["53"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["53"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["53"]["BackgroundTransparency"] = 1;
G2L["53"]["Size"] = UDim2.new(0.72672, 0, 0.11614, 0);
G2L["53"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["53"]["Text"] = [[QUANTOR: SCRIPTER, UI DESIGNER]];
G2L["53"]["Name"] = [[Participant]];
G2L["53"]["Position"] = UDim2.new(0.13662, 0, 0.32502, 0);


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.Credits.Names.Thanks
G2L["54"] = Instance.new("TextLabel", G2L["51"]);
G2L["54"]["TextWrapped"] = true;
G2L["54"]["BorderSizePixel"] = 0;
G2L["54"]["TextSize"] = 14;
G2L["54"]["TextScaled"] = true;
G2L["54"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["54"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["54"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["54"]["BackgroundTransparency"] = 1;
G2L["54"]["Size"] = UDim2.new(0.95307, 0, 0.36683, 0);
G2L["54"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["54"]["Text"] = [[Thank you for using this script, it really means alot, trust me.. alot (we stood up till the pm to make this..)]];
G2L["54"]["Name"] = [[Thanks]];
G2L["54"]["Position"] = UDim2.new(0.02345, 0, 0.5417, 0);


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.General
G2L["55"] = Instance.new("ScrollingFrame", G2L["6"]);
G2L["55"]["Visible"] = false;
G2L["55"]["Active"] = true;
G2L["55"]["BorderSizePixel"] = 0;
G2L["55"]["BackgroundColor3"] = Color3.fromRGB(16, 16, 16);
G2L["55"]["Name"] = [[General]];
G2L["55"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
G2L["55"]["Size"] = UDim2.new(0.83115, 0, 0.99795, 0);
G2L["55"]["ScrollBarImageColor3"] = Color3.fromRGB(0, 0, 0);
G2L["55"]["Position"] = UDim2.new(0.58443, 0, 0.50102, 0);
G2L["55"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["55"]["BackgroundTransparency"] = 0.5;


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.General.FlingButton
G2L["56"] = Instance.new("TextButton", G2L["55"]);
G2L["56"]["TextWrapped"] = true;
G2L["56"]["BorderSizePixel"] = 0;
G2L["56"]["TextStrokeColor3"] = Color3.fromRGB(255, 255, 255);
G2L["56"]["TextSize"] = 14;
G2L["56"]["TextScaled"] = true;
G2L["56"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["56"]["BackgroundColor3"] = Color3.fromRGB(68, 20, 84);
G2L["56"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["56"]["Size"] = UDim2.new(0.15, 0, 0.05295, 0);
G2L["56"]["BorderColor3"] = Color3.fromRGB(255, 255, 255);
G2L["56"]["Text"] = [[Fling]];
G2L["56"]["Name"] = [[FlingButton]];
G2L["56"]["Position"] = UDim2.new(0.21906, 0, 0.42114, 0);


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.General.FlingButton.FlingScript
G2L["57"] = Instance.new("LocalScript", G2L["56"]);
G2L["57"]["Name"] = [[FlingScript]];


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.General.FlingButton.UIGradient
G2L["58"] = Instance.new("UIGradient", G2L["56"]);
G2L["58"]["Rotation"] = 90;
G2L["58"]["Color"] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(233, 233, 233)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(149, 149, 149))};


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.General.TextLabel
G2L["59"] = Instance.new("TextLabel", G2L["55"]);
G2L["59"]["TextWrapped"] = true;
G2L["59"]["BorderSizePixel"] = 0;
G2L["59"]["TextSize"] = 14;
G2L["59"]["TextScaled"] = true;
G2L["59"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["59"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["59"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["59"]["BackgroundTransparency"] = 1;
G2L["59"]["Size"] = UDim2.new(0.21935, 0, 0.07045, 0);
G2L["59"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["59"]["Text"] = [[General]];
G2L["59"]["Position"] = UDim2.new(-0.00267, 0, 0, 0);


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.General.SpazButton
G2L["5a"] = Instance.new("TextButton", G2L["55"]);
G2L["5a"]["TextWrapped"] = true;
G2L["5a"]["BorderSizePixel"] = 0;
G2L["5a"]["TextStrokeColor3"] = Color3.fromRGB(255, 255, 255);
G2L["5a"]["TextSize"] = 14;
G2L["5a"]["TextScaled"] = true;
G2L["5a"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["5a"]["BackgroundColor3"] = Color3.fromRGB(68, 20, 84);
G2L["5a"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["5a"]["Size"] = UDim2.new(0.15, 0, 0.05295, 0);
G2L["5a"]["BorderColor3"] = Color3.fromRGB(255, 255, 255);
G2L["5a"]["Text"] = [[Spaz]];
G2L["5a"]["Name"] = [[SpazButton]];
G2L["5a"]["Position"] = UDim2.new(0.72324, 0, 0.41507, 0);


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.General.SpazButton.SpazScript
G2L["5b"] = Instance.new("LocalScript", G2L["5a"]);
G2L["5b"]["Name"] = [[SpazScript]];


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.General.SpazButton.UIGradient
G2L["5c"] = Instance.new("UIGradient", G2L["5a"]);
G2L["5c"]["Rotation"] = 90;
G2L["5c"]["Color"] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(233, 233, 233)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(149, 149, 149))};


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.General.FreezeButton
G2L["5d"] = Instance.new("TextButton", G2L["55"]);
G2L["5d"]["TextWrapped"] = true;
G2L["5d"]["BorderSizePixel"] = 0;
G2L["5d"]["TextStrokeColor3"] = Color3.fromRGB(255, 255, 255);
G2L["5d"]["TextSize"] = 14;
G2L["5d"]["TextScaled"] = true;
G2L["5d"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["5d"]["BackgroundColor3"] = Color3.fromRGB(68, 20, 84);
G2L["5d"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["5d"]["Size"] = UDim2.new(0.15, 0, 0.05295, 0);
G2L["5d"]["BorderColor3"] = Color3.fromRGB(255, 255, 255);
G2L["5d"]["Text"] = [[Freeze]];
G2L["5d"]["Name"] = [[FreezeButton]];
G2L["5d"]["Position"] = UDim2.new(0.55651, 0, 0.41776, 0);


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.General.FreezeButton.FreezeScript
G2L["5e"] = Instance.new("LocalScript", G2L["5d"]);
G2L["5e"]["Name"] = [[FreezeScript]];


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.General.FreezeButton.UIGradient
G2L["5f"] = Instance.new("UIGradient", G2L["5d"]);
G2L["5f"]["Rotation"] = 90;
G2L["5f"]["Color"] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(233, 233, 233)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(149, 149, 149))};


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.General.XRayButton
G2L["60"] = Instance.new("TextButton", G2L["55"]);
G2L["60"]["TextWrapped"] = true;
G2L["60"]["BorderSizePixel"] = 0;
G2L["60"]["TextStrokeColor3"] = Color3.fromRGB(255, 255, 255);
G2L["60"]["TextSize"] = 14;
G2L["60"]["TextScaled"] = true;
G2L["60"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["60"]["BackgroundColor3"] = Color3.fromRGB(68, 20, 84);
G2L["60"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["60"]["Size"] = UDim2.new(0.15, 0, 0.05295, 0);
G2L["60"]["BorderColor3"] = Color3.fromRGB(255, 255, 255);
G2L["60"]["Text"] = [[XRay]];
G2L["60"]["Name"] = [[XRayButton]];
G2L["60"]["Position"] = UDim2.new(0.39208, 0, 0.17191, 0);


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.General.XRayButton.XRayScript
G2L["61"] = Instance.new("LocalScript", G2L["60"]);
G2L["61"]["Name"] = [[XRayScript]];


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.General.XRayButton.UIGradient
G2L["62"] = Instance.new("UIGradient", G2L["60"]);
G2L["62"]["Rotation"] = 90;
G2L["62"]["Color"] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(233, 233, 233)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(149, 149, 149))};


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.General.JumpPowerButton
G2L["63"] = Instance.new("TextButton", G2L["55"]);
G2L["63"]["TextWrapped"] = true;
G2L["63"]["BorderSizePixel"] = 0;
G2L["63"]["TextStrokeColor3"] = Color3.fromRGB(255, 255, 255);
G2L["63"]["TextSize"] = 14;
G2L["63"]["TextScaled"] = true;
G2L["63"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["63"]["BackgroundColor3"] = Color3.fromRGB(68, 20, 84);
G2L["63"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["63"]["Size"] = UDim2.new(0.15, 0, 0.05295, 0);
G2L["63"]["BorderColor3"] = Color3.fromRGB(255, 255, 255);
G2L["63"]["Text"] = [[Set JumpPower]];
G2L["63"]["Name"] = [[JumpPowerButton]];
G2L["63"]["Position"] = UDim2.new(0.21906, 0, 0.17191, 0);


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.General.JumpPowerButton.JumpPowerScript
G2L["64"] = Instance.new("LocalScript", G2L["63"]);
G2L["64"]["Name"] = [[JumpPowerScript]];


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.General.JumpPowerButton.UIGradient
G2L["65"] = Instance.new("UIGradient", G2L["63"]);
G2L["65"]["Rotation"] = 90;
G2L["65"]["Color"] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(233, 233, 233)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(149, 149, 149))};


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.General.WalkSpeedButton
G2L["66"] = Instance.new("TextButton", G2L["55"]);
G2L["66"]["TextWrapped"] = true;
G2L["66"]["BorderSizePixel"] = 0;
G2L["66"]["TextStrokeColor3"] = Color3.fromRGB(255, 255, 255);
G2L["66"]["TextSize"] = 14;
G2L["66"]["TextScaled"] = true;
G2L["66"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["66"]["BackgroundColor3"] = Color3.fromRGB(68, 20, 84);
G2L["66"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["66"]["Size"] = UDim2.new(0.15, 0, 0.05295, 0);
G2L["66"]["BorderColor3"] = Color3.fromRGB(255, 255, 255);
G2L["66"]["Text"] = [[Set Walkspeed]];
G2L["66"]["Name"] = [[WalkSpeedButton]];
G2L["66"]["Position"] = UDim2.new(0.21906, 0, 0.0881, 0);


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.General.WalkSpeedButton.WalkspeedScript
G2L["67"] = Instance.new("LocalScript", G2L["66"]);
G2L["67"]["Name"] = [[WalkspeedScript]];


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.General.WalkSpeedButton.UIGradient
G2L["68"] = Instance.new("UIGradient", G2L["66"]);
G2L["68"]["Rotation"] = 90;
G2L["68"]["Color"] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(233, 233, 233)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(149, 149, 149))};


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.General.ToggleTexturesButton
G2L["69"] = Instance.new("TextButton", G2L["55"]);
G2L["69"]["TextWrapped"] = true;
G2L["69"]["BorderSizePixel"] = 0;
G2L["69"]["TextStrokeColor3"] = Color3.fromRGB(255, 255, 255);
G2L["69"]["TextSize"] = 14;
G2L["69"]["TextScaled"] = true;
G2L["69"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["69"]["BackgroundColor3"] = Color3.fromRGB(68, 20, 84);
G2L["69"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["69"]["Size"] = UDim2.new(0.15, 0, 0.05295, 0);
G2L["69"]["BorderColor3"] = Color3.fromRGB(255, 255, 255);
G2L["69"]["Text"] = [[Toggle Textures]];
G2L["69"]["Name"] = [[ToggleTexturesButton]];
G2L["69"]["Position"] = UDim2.new(0.55821, 0, 0.0881, 0);


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.General.ToggleTexturesButton.TexturesButton
G2L["6a"] = Instance.new("LocalScript", G2L["69"]);
G2L["6a"]["Name"] = [[TexturesButton]];


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.General.ToggleTexturesButton.UIGradient
G2L["6b"] = Instance.new("UIGradient", G2L["69"]);
G2L["6b"]["Rotation"] = 90;
G2L["6b"]["Color"] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(233, 233, 233)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(149, 149, 149))};


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.General.InfJump
G2L["6c"] = Instance.new("TextButton", G2L["55"]);
G2L["6c"]["TextWrapped"] = true;
G2L["6c"]["BorderSizePixel"] = 0;
G2L["6c"]["TextStrokeColor3"] = Color3.fromRGB(255, 255, 255);
G2L["6c"]["TextSize"] = 14;
G2L["6c"]["TextScaled"] = true;
G2L["6c"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["6c"]["BackgroundColor3"] = Color3.fromRGB(68, 20, 84);
G2L["6c"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["6c"]["Size"] = UDim2.new(0.15, 0, 0.05295, 0);
G2L["6c"]["BorderColor3"] = Color3.fromRGB(255, 255, 255);
G2L["6c"]["Text"] = [[Inf Jump]];
G2L["6c"]["Name"] = [[InfJump]];
G2L["6c"]["Position"] = UDim2.new(0.21906, 0, 0.25793, 0);


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.General.InfJump.InfJumpScript
G2L["6d"] = Instance.new("LocalScript", G2L["6c"]);
G2L["6d"]["Name"] = [[InfJumpScript]];


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.General.InfJump.UIGradient
G2L["6e"] = Instance.new("UIGradient", G2L["6c"]);
G2L["6e"]["Rotation"] = 90;
G2L["6e"]["Color"] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(233, 233, 233)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(149, 149, 149))};


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.General.SwimInAirButton
G2L["6f"] = Instance.new("TextButton", G2L["55"]);
G2L["6f"]["TextWrapped"] = true;
G2L["6f"]["BorderSizePixel"] = 0;
G2L["6f"]["TextStrokeColor3"] = Color3.fromRGB(255, 255, 255);
G2L["6f"]["TextSize"] = 14;
G2L["6f"]["TextScaled"] = true;
G2L["6f"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["6f"]["BackgroundColor3"] = Color3.fromRGB(68, 20, 84);
G2L["6f"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["6f"]["Size"] = UDim2.new(0.15, 0, 0.05295, 0);
G2L["6f"]["BorderColor3"] = Color3.fromRGB(255, 255, 255);
G2L["6f"]["Text"] = [[Swim In Air]];
G2L["6f"]["Name"] = [[SwimInAirButton]];
G2L["6f"]["Position"] = UDim2.new(0.39208, 0, 0.26197, 0);


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.General.SwimInAirButton.SwimInAirScript
G2L["70"] = Instance.new("LocalScript", G2L["6f"]);
G2L["70"]["Name"] = [[SwimInAirScript]];


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.General.SwimInAirButton.UIGradient
G2L["71"] = Instance.new("UIGradient", G2L["6f"]);
G2L["71"]["Rotation"] = 90;
G2L["71"]["Color"] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(233, 233, 233)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(149, 149, 149))};


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.General.GravityButton
G2L["72"] = Instance.new("TextButton", G2L["55"]);
G2L["72"]["TextWrapped"] = true;
G2L["72"]["BorderSizePixel"] = 0;
G2L["72"]["TextStrokeColor3"] = Color3.fromRGB(255, 255, 255);
G2L["72"]["TextSize"] = 14;
G2L["72"]["TextScaled"] = true;
G2L["72"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["72"]["BackgroundColor3"] = Color3.fromRGB(68, 20, 84);
G2L["72"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["72"]["Size"] = UDim2.new(0.15, 0, 0.05295, 0);
G2L["72"]["BorderColor3"] = Color3.fromRGB(255, 255, 255);
G2L["72"]["Text"] = [[Set Gravity]];
G2L["72"]["Name"] = [[GravityButton]];
G2L["72"]["Position"] = UDim2.new(0.21906, 0, 0.34174, 0);


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.General.GravityButton.GravityScript
G2L["73"] = Instance.new("LocalScript", G2L["72"]);
G2L["73"]["Name"] = [[GravityScript]];


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.General.GravityButton.UIGradient
G2L["74"] = Instance.new("UIGradient", G2L["72"]);
G2L["74"]["Rotation"] = 90;
G2L["74"]["Color"] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(233, 233, 233)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(149, 149, 149))};


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.General.SitButton
G2L["75"] = Instance.new("TextButton", G2L["55"]);
G2L["75"]["TextWrapped"] = true;
G2L["75"]["BorderSizePixel"] = 0;
G2L["75"]["TextStrokeColor3"] = Color3.fromRGB(255, 255, 255);
G2L["75"]["TextSize"] = 14;
G2L["75"]["TextScaled"] = true;
G2L["75"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["75"]["BackgroundColor3"] = Color3.fromRGB(68, 20, 84);
G2L["75"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["75"]["Size"] = UDim2.new(0.15, 0, 0.05295, 0);
G2L["75"]["BorderColor3"] = Color3.fromRGB(255, 255, 255);
G2L["75"]["Text"] = [[Sit]];
G2L["75"]["Name"] = [[SitButton]];
G2L["75"]["Position"] = UDim2.new(0.55821, 0, 0.17221, 0);


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.General.SitButton.SitScript
G2L["76"] = Instance.new("LocalScript", G2L["75"]);
G2L["76"]["Name"] = [[SitScript]];


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.General.SitButton.UIGradient
G2L["77"] = Instance.new("UIGradient", G2L["75"]);
G2L["77"]["Rotation"] = 90;
G2L["77"]["Color"] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(233, 233, 233)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(149, 149, 149))};


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.General.ParalyzeButton
G2L["78"] = Instance.new("TextButton", G2L["55"]);
G2L["78"]["TextWrapped"] = true;
G2L["78"]["BorderSizePixel"] = 0;
G2L["78"]["TextStrokeColor3"] = Color3.fromRGB(255, 255, 255);
G2L["78"]["TextSize"] = 14;
G2L["78"]["TextScaled"] = true;
G2L["78"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["78"]["BackgroundColor3"] = Color3.fromRGB(68, 20, 84);
G2L["78"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["78"]["Size"] = UDim2.new(0.15, 0, 0.05295, 0);
G2L["78"]["BorderColor3"] = Color3.fromRGB(255, 255, 255);
G2L["78"]["Text"] = [[Paralyze]];
G2L["78"]["Name"] = [[ParalyzeButton]];
G2L["78"]["Position"] = UDim2.new(0.72324, 0, 0.08723, 0);


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.General.ParalyzeButton.ParalyzeScript
G2L["79"] = Instance.new("LocalScript", G2L["78"]);
G2L["79"]["Name"] = [[ParalyzeScript]];


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.General.ParalyzeButton.UIGradient
G2L["7a"] = Instance.new("UIGradient", G2L["78"]);
G2L["7a"]["Rotation"] = 90;
G2L["7a"]["Color"] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(233, 233, 233)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(149, 149, 149))};


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.General.HelicopterButton
G2L["7b"] = Instance.new("TextButton", G2L["55"]);
G2L["7b"]["TextWrapped"] = true;
G2L["7b"]["BorderSizePixel"] = 0;
G2L["7b"]["TextStrokeColor3"] = Color3.fromRGB(255, 255, 255);
G2L["7b"]["TextSize"] = 14;
G2L["7b"]["TextScaled"] = true;
G2L["7b"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["7b"]["BackgroundColor3"] = Color3.fromRGB(68, 20, 84);
G2L["7b"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["7b"]["Size"] = UDim2.new(0.15, 0, 0.05295, 0);
G2L["7b"]["BorderColor3"] = Color3.fromRGB(255, 255, 255);
G2L["7b"]["Text"] = [[Helicopter]];
G2L["7b"]["Name"] = [[HelicopterButton]];
G2L["7b"]["Position"] = UDim2.new(0.72324, 0, 0.2621, 0);


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.General.HelicopterButton.HelicopterScript
G2L["7c"] = Instance.new("LocalScript", G2L["7b"]);
G2L["7c"]["Name"] = [[HelicopterScript]];


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.General.HelicopterButton.UIGradient
G2L["7d"] = Instance.new("UIGradient", G2L["7b"]);
G2L["7d"]["Rotation"] = 90;
G2L["7d"]["Color"] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(233, 233, 233)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(149, 149, 149))};


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.General.MoonwalkButton
G2L["7e"] = Instance.new("TextButton", G2L["55"]);
G2L["7e"]["TextWrapped"] = true;
G2L["7e"]["BorderSizePixel"] = 0;
G2L["7e"]["TextStrokeColor3"] = Color3.fromRGB(255, 255, 255);
G2L["7e"]["TextSize"] = 14;
G2L["7e"]["TextScaled"] = true;
G2L["7e"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["7e"]["BackgroundColor3"] = Color3.fromRGB(68, 20, 84);
G2L["7e"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["7e"]["Size"] = UDim2.new(0.15, 0, 0.05295, 0);
G2L["7e"]["BorderColor3"] = Color3.fromRGB(255, 255, 255);
G2L["7e"]["Text"] = [[Moonwalk]];
G2L["7e"]["Name"] = [[MoonwalkButton]];
G2L["7e"]["Position"] = UDim2.new(0.72324, 0, 0.34132, 0);


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.General.MoonwalkButton.MoonwalkScript
G2L["7f"] = Instance.new("LocalScript", G2L["7e"]);
G2L["7f"]["Name"] = [[MoonwalkScript]];


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.General.MoonwalkButton.UIGradient
G2L["80"] = Instance.new("UIGradient", G2L["7e"]);
G2L["80"]["Rotation"] = 90;
G2L["80"]["Color"] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(233, 233, 233)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(149, 149, 149))};


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.General.SeizureButton
G2L["81"] = Instance.new("TextButton", G2L["55"]);
G2L["81"]["TextWrapped"] = true;
G2L["81"]["BorderSizePixel"] = 0;
G2L["81"]["TextStrokeColor3"] = Color3.fromRGB(255, 255, 255);
G2L["81"]["TextSize"] = 14;
G2L["81"]["TextScaled"] = true;
G2L["81"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["81"]["BackgroundColor3"] = Color3.fromRGB(68, 20, 84);
G2L["81"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["81"]["Size"] = UDim2.new(0.15, 0, 0.053, 0);
G2L["81"]["BorderColor3"] = Color3.fromRGB(255, 255, 255);
G2L["81"]["Text"] = [[Seizure]];
G2L["81"]["Name"] = [[SeizureButton]];
G2L["81"]["Position"] = UDim2.new(0.72324, 0, 0.1727, 0);


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.General.SeizureButton.SeizureScript
G2L["82"] = Instance.new("LocalScript", G2L["81"]);
G2L["82"]["Name"] = [[SeizureScript]];


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.General.SeizureButton.UIGradient
G2L["83"] = Instance.new("UIGradient", G2L["81"]);
G2L["83"]["Rotation"] = 90;
G2L["83"]["Color"] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(233, 233, 233)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(149, 149, 149))};


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.General.NoclipButton
G2L["84"] = Instance.new("TextButton", G2L["55"]);
G2L["84"]["TextWrapped"] = true;
G2L["84"]["BorderSizePixel"] = 0;
G2L["84"]["TextStrokeColor3"] = Color3.fromRGB(255, 255, 255);
G2L["84"]["TextSize"] = 14;
G2L["84"]["TextScaled"] = true;
G2L["84"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["84"]["BackgroundColor3"] = Color3.fromRGB(68, 20, 84);
G2L["84"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["84"]["Size"] = UDim2.new(0.14987, 0, 0.05295, 0);
G2L["84"]["BorderColor3"] = Color3.fromRGB(255, 255, 255);
G2L["84"]["Text"] = [[Noclip]];
G2L["84"]["Name"] = [[NoclipButton]];
G2L["84"]["Position"] = UDim2.new(0.04129, 0, 0.26214, 0);


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.General.NoclipButton.NoclipScript
G2L["85"] = Instance.new("LocalScript", G2L["84"]);
G2L["85"]["Name"] = [[NoclipScript]];


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.General.NoclipButton.UIGradient
G2L["86"] = Instance.new("UIGradient", G2L["84"]);
G2L["86"]["Rotation"] = 90;
G2L["86"]["Color"] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(233, 233, 233)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(149, 149, 149))};


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.General.FlyButton
G2L["87"] = Instance.new("TextButton", G2L["55"]);
G2L["87"]["TextWrapped"] = true;
G2L["87"]["BorderSizePixel"] = 0;
G2L["87"]["TextStrokeColor3"] = Color3.fromRGB(255, 255, 255);
G2L["87"]["TextSize"] = 14;
G2L["87"]["TextScaled"] = true;
G2L["87"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["87"]["BackgroundColor3"] = Color3.fromRGB(68, 20, 84);
G2L["87"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["87"]["Size"] = UDim2.new(0.14987, 0, 0.05295, 0);
G2L["87"]["BorderColor3"] = Color3.fromRGB(255, 255, 255);
G2L["87"]["Text"] = [[Fly (X Toggle)]];
G2L["87"]["Name"] = [[FlyButton]];
G2L["87"]["Position"] = UDim2.new(0.04129, 0, 0.0881, 0);


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.General.FlyButton.FlyScript
G2L["88"] = Instance.new("LocalScript", G2L["87"]);
G2L["88"]["Name"] = [[FlyScript]];


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.General.FlyButton.UIGradient
G2L["89"] = Instance.new("UIGradient", G2L["87"]);
G2L["89"]["Rotation"] = 90;
G2L["89"]["Color"] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(233, 233, 233)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(149, 149, 149))};


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.General.AntiVoidButton
G2L["8a"] = Instance.new("TextButton", G2L["55"]);
G2L["8a"]["TextWrapped"] = true;
G2L["8a"]["BorderSizePixel"] = 0;
G2L["8a"]["TextStrokeColor3"] = Color3.fromRGB(255, 255, 255);
G2L["8a"]["TextSize"] = 14;
G2L["8a"]["TextScaled"] = true;
G2L["8a"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["8a"]["BackgroundColor3"] = Color3.fromRGB(68, 20, 84);
G2L["8a"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["8a"]["Size"] = UDim2.new(0.15, 0, 0.05295, 0);
G2L["8a"]["BorderColor3"] = Color3.fromRGB(255, 255, 255);
G2L["8a"]["Text"] = [[Anti-Void]];
G2L["8a"]["Name"] = [[AntiVoidButton]];
G2L["8a"]["Position"] = UDim2.new(0.39208, 0, 0.41893, 0);


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.General.AntiVoidButton.AntivoidScript
G2L["8b"] = Instance.new("LocalScript", G2L["8a"]);
G2L["8b"]["Name"] = [[AntivoidScript]];


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.General.AntiVoidButton.UIGradient
G2L["8c"] = Instance.new("UIGradient", G2L["8a"]);
G2L["8c"]["Rotation"] = 90;
G2L["8c"]["Color"] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(233, 233, 233)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(149, 149, 149))};


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.General.ChatSpam
G2L["8d"] = Instance.new("TextButton", G2L["55"]);
G2L["8d"]["TextWrapped"] = true;
G2L["8d"]["BorderSizePixel"] = 0;
G2L["8d"]["TextStrokeColor3"] = Color3.fromRGB(255, 255, 255);
G2L["8d"]["TextSize"] = 14;
G2L["8d"]["TextScaled"] = true;
G2L["8d"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["8d"]["BackgroundColor3"] = Color3.fromRGB(68, 20, 84);
G2L["8d"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["8d"]["Size"] = UDim2.new(0.15, 0, 0.05295, 0);
G2L["8d"]["BorderColor3"] = Color3.fromRGB(255, 255, 255);
G2L["8d"]["Text"] = [[Chat Spam]];
G2L["8d"]["Name"] = [[ChatSpam]];
G2L["8d"]["Position"] = UDim2.new(0.03892, 0, 0.42315, 0);


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.General.ChatSpam.ChatSpamScript
G2L["8e"] = Instance.new("LocalScript", G2L["8d"]);
G2L["8e"]["Name"] = [[ChatSpamScript]];


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.General.ChatSpam.UIGradient
G2L["8f"] = Instance.new("UIGradient", G2L["8d"]);
G2L["8f"]["Rotation"] = 90;
G2L["8f"]["Color"] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(233, 233, 233)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(149, 149, 149))};


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.General.ChatlogButton
G2L["90"] = Instance.new("TextButton", G2L["55"]);
G2L["90"]["TextWrapped"] = true;
G2L["90"]["BorderSizePixel"] = 0;
G2L["90"]["TextStrokeColor3"] = Color3.fromRGB(255, 255, 255);
G2L["90"]["TextSize"] = 14;
G2L["90"]["TextScaled"] = true;
G2L["90"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["90"]["BackgroundColor3"] = Color3.fromRGB(68, 20, 84);
G2L["90"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["90"]["Size"] = UDim2.new(0.15, 0, 0.05295, 0);
G2L["90"]["BorderColor3"] = Color3.fromRGB(255, 255, 255);
G2L["90"]["Text"] = [[ChatLogs]];
G2L["90"]["Name"] = [[ChatlogButton]];
G2L["90"]["Position"] = UDim2.new(0.55821, 0, 0.33885, 0);


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.General.ChatlogButton.ChatlogScriptToggle
G2L["91"] = Instance.new("LocalScript", G2L["90"]);
G2L["91"]["Name"] = [[ChatlogScriptToggle]];


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.General.ChatlogButton.UIGradient
G2L["92"] = Instance.new("UIGradient", G2L["90"]);
G2L["92"]["Rotation"] = 90;
G2L["92"]["Color"] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(233, 233, 233)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(149, 149, 149))};


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.General.ClickToMove
G2L["93"] = Instance.new("TextButton", G2L["55"]);
G2L["93"]["TextWrapped"] = true;
G2L["93"]["BorderSizePixel"] = 0;
G2L["93"]["TextStrokeColor3"] = Color3.fromRGB(255, 255, 255);
G2L["93"]["TextSize"] = 14;
G2L["93"]["TextScaled"] = true;
G2L["93"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["93"]["BackgroundColor3"] = Color3.fromRGB(68, 20, 84);
G2L["93"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["93"]["Size"] = UDim2.new(0.14987, 0, 0.05295, 0);
G2L["93"]["BorderColor3"] = Color3.fromRGB(255, 255, 255);
G2L["93"]["Text"] = [[Click To Teleport]];
G2L["93"]["Name"] = [[ClickToMove]];
G2L["93"]["Position"] = UDim2.new(0.04129, 0, 0.17404, 0);


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.General.ClickToMove.ClickScript
G2L["94"] = Instance.new("LocalScript", G2L["93"]);
G2L["94"]["Name"] = [[ClickScript]];


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.General.ClickToMove.UIGradient
G2L["95"] = Instance.new("UIGradient", G2L["93"]);
G2L["95"]["Rotation"] = 90;
G2L["95"]["Color"] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(233, 233, 233)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(149, 149, 149))};


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.General.DashButton
G2L["96"] = Instance.new("TextButton", G2L["55"]);
G2L["96"]["TextWrapped"] = true;
G2L["96"]["BorderSizePixel"] = 0;
G2L["96"]["TextStrokeColor3"] = Color3.fromRGB(255, 255, 255);
G2L["96"]["TextSize"] = 14;
G2L["96"]["TextScaled"] = true;
G2L["96"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["96"]["BackgroundColor3"] = Color3.fromRGB(68, 20, 84);
G2L["96"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["96"]["Size"] = UDim2.new(0.15, 0, 0.05295, 0);
G2L["96"]["BorderColor3"] = Color3.fromRGB(255, 255, 255);
G2L["96"]["Text"] = [[Dash (Q Toggle)]];
G2L["96"]["Name"] = [[DashButton]];
G2L["96"]["Position"] = UDim2.new(0.39208, 0, 0.33917, 0);


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.General.DashButton.DashScript
G2L["97"] = Instance.new("LocalScript", G2L["96"]);
G2L["97"]["Name"] = [[DashScript]];


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.General.DashButton.UIGradient
G2L["98"] = Instance.new("UIGradient", G2L["96"]);
G2L["98"]["Rotation"] = 90;
G2L["98"]["Color"] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(233, 233, 233)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(149, 149, 149))};


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.General.ESP
G2L["99"] = Instance.new("TextButton", G2L["55"]);
G2L["99"]["TextWrapped"] = true;
G2L["99"]["BorderSizePixel"] = 0;
G2L["99"]["TextStrokeColor3"] = Color3.fromRGB(255, 255, 255);
G2L["99"]["TextSize"] = 14;
G2L["99"]["TextScaled"] = true;
G2L["99"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["99"]["BackgroundColor3"] = Color3.fromRGB(68, 20, 84);
G2L["99"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["99"]["Size"] = UDim2.new(0.14987, 0, 0.05295, 0);
G2L["99"]["BorderColor3"] = Color3.fromRGB(255, 255, 255);
G2L["99"]["Text"] = [[ESP]];
G2L["99"]["Name"] = [[ESP]];
G2L["99"]["Position"] = UDim2.new(0.04129, 0, 0.34379, 0);


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.General.ESP.ESPscriptnew
G2L["9a"] = Instance.new("LocalScript", G2L["99"]);
G2L["9a"]["Name"] = [[ESPscriptnew]];


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.General.ESP.ESPscript
G2L["9b"] = Instance.new("LocalScript", G2L["99"]);
G2L["9b"]["Enabled"] = false;
G2L["9b"]["Name"] = [[ESPscript]];
G2L["9b"]["Disabled"] = true;


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.General.ESP.UIGradient
G2L["9c"] = Instance.new("UIGradient", G2L["99"]);
G2L["9c"]["Rotation"] = 90;
G2L["9c"]["Color"] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(233, 233, 233)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(149, 149, 149))};


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.General.FakeLagButton
G2L["9d"] = Instance.new("TextButton", G2L["55"]);
G2L["9d"]["TextWrapped"] = true;
G2L["9d"]["BorderSizePixel"] = 0;
G2L["9d"]["TextStrokeColor3"] = Color3.fromRGB(255, 255, 255);
G2L["9d"]["TextSize"] = 14;
G2L["9d"]["TextScaled"] = true;
G2L["9d"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["9d"]["BackgroundColor3"] = Color3.fromRGB(68, 20, 84);
G2L["9d"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["9d"]["Size"] = UDim2.new(0.15, 0, 0.05295, 0);
G2L["9d"]["BorderColor3"] = Color3.fromRGB(255, 255, 255);
G2L["9d"]["Text"] = [[FakeLag]];
G2L["9d"]["Name"] = [[FakeLagButton]];
G2L["9d"]["Position"] = UDim2.new(0.55821, 0, 0.25963, 0);


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.General.FakeLagButton.FakeLagScript
G2L["9e"] = Instance.new("LocalScript", G2L["9d"]);
G2L["9e"]["Name"] = [[FakeLagScript]];


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.General.FakeLagButton.UIGradient
G2L["9f"] = Instance.new("UIGradient", G2L["9d"]);
G2L["9f"]["Rotation"] = 90;
G2L["9f"]["Color"] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(233, 233, 233)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(149, 149, 149))};


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.General.FieldOfViewButton
G2L["a0"] = Instance.new("TextButton", G2L["55"]);
G2L["a0"]["TextWrapped"] = true;
G2L["a0"]["BorderSizePixel"] = 0;
G2L["a0"]["TextStrokeColor3"] = Color3.fromRGB(255, 255, 255);
G2L["a0"]["TextSize"] = 14;
G2L["a0"]["TextScaled"] = true;
G2L["a0"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["a0"]["BackgroundColor3"] = Color3.fromRGB(68, 20, 84);
G2L["a0"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["a0"]["Size"] = UDim2.new(0.15, 0, 0.05295, 0);
G2L["a0"]["BorderColor3"] = Color3.fromRGB(255, 255, 255);
G2L["a0"]["Text"] = [[Field Of View]];
G2L["a0"]["Name"] = [[FieldOfViewButton]];
G2L["a0"]["Position"] = UDim2.new(0.39208, 0, 0.0881, 0);


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.General.FieldOfViewButton.FOVscript
G2L["a1"] = Instance.new("LocalScript", G2L["a0"]);
G2L["a1"]["Name"] = [[FOVscript]];


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.General.FieldOfViewButton.UIGradient
G2L["a2"] = Instance.new("UIGradient", G2L["a0"]);
G2L["a2"]["Rotation"] = 90;
G2L["a2"]["Color"] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(233, 233, 233)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(149, 149, 149))};


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.General.AntiFlingButton
G2L["a3"] = Instance.new("TextButton", G2L["55"]);
G2L["a3"]["TextWrapped"] = true;
G2L["a3"]["BorderSizePixel"] = 0;
G2L["a3"]["TextStrokeColor3"] = Color3.fromRGB(255, 255, 255);
G2L["a3"]["TextSize"] = 14;
G2L["a3"]["TextScaled"] = true;
G2L["a3"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["a3"]["BackgroundColor3"] = Color3.fromRGB(68, 20, 84);
G2L["a3"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["a3"]["Size"] = UDim2.new(0.15, 0, 0.053, 0);
G2L["a3"]["BorderColor3"] = Color3.fromRGB(255, 255, 255);
G2L["a3"]["Text"] = [[Anti-Fling]];
G2L["a3"]["Name"] = [[AntiFlingButton]];
G2L["a3"]["Position"] = UDim2.new(0.04123, 0, 0.50055, 0);


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.General.AntiFlingButton.AntiFlingScript
G2L["a4"] = Instance.new("LocalScript", G2L["a3"]);
G2L["a4"]["Name"] = [[AntiFlingScript]];


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.General.AntiFlingButton.UIGradient
G2L["a5"] = Instance.new("UIGradient", G2L["a3"]);
G2L["a5"]["Rotation"] = 90;
G2L["a5"]["Color"] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(233, 233, 233)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(149, 149, 149))};


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.General.JerkOff
G2L["a6"] = Instance.new("TextButton", G2L["55"]);
G2L["a6"]["TextWrapped"] = true;
G2L["a6"]["BorderSizePixel"] = 0;
G2L["a6"]["TextStrokeColor3"] = Color3.fromRGB(255, 255, 255);
G2L["a6"]["TextSize"] = 14;
G2L["a6"]["TextScaled"] = true;
G2L["a6"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["a6"]["BackgroundColor3"] = Color3.fromRGB(68, 20, 84);
G2L["a6"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["a6"]["Size"] = UDim2.new(0.15, 0, 0.053, 0);
G2L["a6"]["BorderColor3"] = Color3.fromRGB(255, 255, 255);
G2L["a6"]["Text"] = [[Jerk Off]];
G2L["a6"]["Name"] = [[JerkOff]];
G2L["a6"]["Position"] = UDim2.new(0.217, 0, 0.501, 0);


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.General.JerkOff.UIGradient
G2L["a7"] = Instance.new("UIGradient", G2L["a6"]);
G2L["a7"]["Rotation"] = 90;
G2L["a7"]["Color"] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(233, 233, 233)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(149, 149, 149))};


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.General.JerkOff.JerkOffScript
G2L["a8"] = Instance.new("LocalScript", G2L["a6"]);
G2L["a8"]["Name"] = [[JerkOffScript]];


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.Notes
G2L["a9"] = Instance.new("Frame", G2L["6"]);
G2L["a9"]["Visible"] = false;
G2L["a9"]["BorderSizePixel"] = 0;
G2L["a9"]["BackgroundColor3"] = Color3.fromRGB(16, 16, 16);
G2L["a9"]["Size"] = UDim2.new(0.8006, 0, 0.93192, 0);
G2L["a9"]["Position"] = UDim2.new(0.18206, 0, 0.03205, 0);
G2L["a9"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["a9"]["Name"] = [[Notes]];
G2L["a9"]["BackgroundTransparency"] = 1;


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.Notes.TextBox
G2L["aa"] = Instance.new("TextBox", G2L["a9"]);
G2L["aa"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["aa"]["BorderSizePixel"] = 0;
G2L["aa"]["TextWrapped"] = true;
G2L["aa"]["TextSize"] = 14;
G2L["aa"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["aa"]["TextYAlignment"] = Enum.TextYAlignment.Top;
G2L["aa"]["BackgroundColor3"] = Color3.fromRGB(16, 16, 16);
G2L["aa"]["RichText"] = true;
G2L["aa"]["FontFace"] = Font.new([[rbxasset://fonts/families/Merriweather.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["aa"]["MultiLine"] = true;
G2L["aa"]["ClearTextOnFocus"] = false;
G2L["aa"]["PlaceholderText"] = [[Enter notes here...]];
G2L["aa"]["Size"] = UDim2.new(1.03815, 0, 1.07086, 0);
G2L["aa"]["Position"] = UDim2.new(-0.01649, 0, -0.03219, 0);
G2L["aa"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["aa"]["Text"] = [[]];
G2L["aa"]["BackgroundTransparency"] = 0.5;


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.Notes.TextBox.NotesSaver
G2L["ab"] = Instance.new("LocalScript", G2L["aa"]);
G2L["ab"]["Name"] = [[NotesSaver]];


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.Settings
G2L["ac"] = Instance.new("Frame", G2L["6"]);
G2L["ac"]["Visible"] = false;
G2L["ac"]["BorderSizePixel"] = 0;
G2L["ac"]["BackgroundColor3"] = Color3.fromRGB(16, 16, 16);
G2L["ac"]["Size"] = UDim2.new(0.83336, 0, 0.99795, 0);
G2L["ac"]["Position"] = UDim2.new(0.16664, 0, 0.00205, 0);
G2L["ac"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["ac"]["Name"] = [[Settings]];
G2L["ac"]["BackgroundTransparency"] = 0.5;


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.Settings.Header
G2L["ad"] = Instance.new("TextLabel", G2L["ac"]);
G2L["ad"]["TextWrapped"] = true;
G2L["ad"]["BorderSizePixel"] = 0;
G2L["ad"]["TextSize"] = 14;
G2L["ad"]["TextScaled"] = true;
G2L["ad"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["ad"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["ad"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["ad"]["BackgroundTransparency"] = 1;
G2L["ad"]["Size"] = UDim2.new(0.4755, 0, 0.24612, 0);
G2L["ad"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["ad"]["Text"] = [[Settings]];
G2L["ad"]["Name"] = [[Header]];
G2L["ad"]["Position"] = UDim2.new(0.26166, 0, 0, 0);


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.Settings.Buttons
G2L["ae"] = Instance.new("Folder", G2L["ac"]);
G2L["ae"]["Name"] = [[Buttons]];


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.Settings.Buttons.Panic
G2L["af"] = Instance.new("TextButton", G2L["ae"]);
G2L["af"]["TextWrapped"] = true;
G2L["af"]["BorderSizePixel"] = 0;
G2L["af"]["TextStrokeColor3"] = Color3.fromRGB(255, 255, 255);
G2L["af"]["TextSize"] = 14;
G2L["af"]["TextScaled"] = true;
G2L["af"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["af"]["BackgroundColor3"] = Color3.fromRGB(84, 84, 84);
G2L["af"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["af"]["Size"] = UDim2.new(0.18875, 0, 0.1258, 0);
G2L["af"]["BorderColor3"] = Color3.fromRGB(255, 255, 255);
G2L["af"]["Text"] = [[PANIC]];
G2L["af"]["Name"] = [[Panic]];
G2L["af"]["Position"] = UDim2.new(0.07129, 0, 0.28387, 0);


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.Settings.Buttons.Panic.AntiFlingScript
G2L["b0"] = Instance.new("LocalScript", G2L["af"]);
G2L["b0"]["Name"] = [[AntiFlingScript]];


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.Settings.Buttons.Panic.UIGradient
G2L["b1"] = Instance.new("UIGradient", G2L["af"]);
G2L["b1"]["Rotation"] = 90;
G2L["b1"]["Color"] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(233, 233, 233)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(149, 149, 149))};


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.Settings.Buttons.DiscordLink
G2L["b2"] = Instance.new("TextButton", G2L["ae"]);
G2L["b2"]["TextWrapped"] = true;
G2L["b2"]["BorderSizePixel"] = 0;
G2L["b2"]["TextStrokeColor3"] = Color3.fromRGB(255, 255, 255);
G2L["b2"]["TextSize"] = 14;
G2L["b2"]["TextScaled"] = true;
G2L["b2"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["b2"]["BackgroundColor3"] = Color3.fromRGB(84, 84, 84);
G2L["b2"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["b2"]["Size"] = UDim2.new(0.189, 0, 0.126, 0);
G2L["b2"]["BorderColor3"] = Color3.fromRGB(255, 255, 255);
G2L["b2"]["Text"] = [[Discord Link]];
G2L["b2"]["Name"] = [[DiscordLink]];
G2L["b2"]["Position"] = UDim2.new(0.07129, 0, 0.48507, 0);


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.Settings.Buttons.DiscordLink.DiscordLinkScript
G2L["b3"] = Instance.new("LocalScript", G2L["b2"]);
G2L["b3"]["Name"] = [[DiscordLinkScript]];


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.Settings.Buttons.DiscordLink.UIGradient
G2L["b4"] = Instance.new("UIGradient", G2L["b2"]);
G2L["b4"]["Rotation"] = 90;
G2L["b4"]["Color"] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(233, 233, 233)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(149, 149, 149))};


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.Client
G2L["b5"] = Instance.new("ScrollingFrame", G2L["6"]);
G2L["b5"]["Visible"] = false;
G2L["b5"]["Active"] = true;
G2L["b5"]["BorderSizePixel"] = 0;
G2L["b5"]["BackgroundColor3"] = Color3.fromRGB(16, 16, 16);
G2L["b5"]["Name"] = [[Client]];
G2L["b5"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
G2L["b5"]["Size"] = UDim2.new(0.83115, 0, 0.99795, 0);
G2L["b5"]["ScrollBarImageColor3"] = Color3.fromRGB(0, 0, 0);
G2L["b5"]["Position"] = UDim2.new(0.58443, 0, 0.50102, 0);
G2L["b5"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["b5"]["BackgroundTransparency"] = 0.5;


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.Client.DihButton
G2L["b6"] = Instance.new("TextButton", G2L["b5"]);
G2L["b6"]["TextWrapped"] = true;
G2L["b6"]["BorderSizePixel"] = 0;
G2L["b6"]["TextStrokeColor3"] = Color3.fromRGB(255, 255, 255);
G2L["b6"]["TextSize"] = 14;
G2L["b6"]["TextScaled"] = true;
G2L["b6"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["b6"]["BackgroundColor3"] = Color3.fromRGB(68, 20, 84);
G2L["b6"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["b6"]["Size"] = UDim2.new(0.14987, 0, 0.05295, 0);
G2L["b6"]["BorderColor3"] = Color3.fromRGB(255, 255, 255);
G2L["b6"]["Text"] = [[big thing]];
G2L["b6"]["Name"] = [[DihButton]];
G2L["b6"]["Position"] = UDim2.new(0.04129, 0, 0.0881, 0);


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.Client.DihButton.UIGradient
G2L["b7"] = Instance.new("UIGradient", G2L["b6"]);
G2L["b7"]["Rotation"] = 90;
G2L["b7"]["Color"] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(233, 233, 233)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(149, 149, 149))};


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.Client.DihButton.ppscript
G2L["b8"] = Instance.new("LocalScript", G2L["b6"]);
G2L["b8"]["Name"] = [[ppscript]];


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.Client.TextLabel
G2L["b9"] = Instance.new("TextLabel", G2L["b5"]);
G2L["b9"]["TextWrapped"] = true;
G2L["b9"]["BorderSizePixel"] = 0;
G2L["b9"]["TextSize"] = 14;
G2L["b9"]["TextScaled"] = true;
G2L["b9"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["b9"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["b9"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["b9"]["BackgroundTransparency"] = 1;
G2L["b9"]["Size"] = UDim2.new(0.21935, 0, 0.07045, 0);
G2L["b9"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["b9"]["Text"] = [[Client]];
G2L["b9"]["Position"] = UDim2.new(-0.00267, 0, 0, 0);


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.Client.RainbowSkinButton
G2L["ba"] = Instance.new("TextButton", G2L["b5"]);
G2L["ba"]["TextWrapped"] = true;
G2L["ba"]["BorderSizePixel"] = 0;
G2L["ba"]["TextStrokeColor3"] = Color3.fromRGB(255, 255, 255);
G2L["ba"]["TextSize"] = 14;
G2L["ba"]["TextScaled"] = true;
G2L["ba"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["ba"]["BackgroundColor3"] = Color3.fromRGB(68, 20, 84);
G2L["ba"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["ba"]["Size"] = UDim2.new(0.15, 0, 0.05295, 0);
G2L["ba"]["BorderColor3"] = Color3.fromRGB(255, 255, 255);
G2L["ba"]["Text"] = [[Rainbow Skin]];
G2L["ba"]["Name"] = [[RainbowSkinButton]];
G2L["ba"]["Position"] = UDim2.new(0.21906, 0, 0.0881, 0);


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.Client.RainbowSkinButton.RainbowSkinScript
G2L["bb"] = Instance.new("LocalScript", G2L["ba"]);
G2L["bb"]["Name"] = [[RainbowSkinScript]];


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.Client.RainbowSkinButton.UIGradient
G2L["bc"] = Instance.new("UIGradient", G2L["ba"]);
G2L["bc"]["Rotation"] = 90;
G2L["bc"]["Color"] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(233, 233, 233)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(149, 149, 149))};


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.Client.FartButton
G2L["bd"] = Instance.new("TextButton", G2L["b5"]);
G2L["bd"]["TextWrapped"] = true;
G2L["bd"]["BorderSizePixel"] = 0;
G2L["bd"]["TextStrokeColor3"] = Color3.fromRGB(255, 255, 255);
G2L["bd"]["TextSize"] = 14;
G2L["bd"]["TextScaled"] = true;
G2L["bd"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["bd"]["BackgroundColor3"] = Color3.fromRGB(68, 20, 84);
G2L["bd"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["bd"]["Size"] = UDim2.new(0.15, 0, 0.05295, 0);
G2L["bd"]["BorderColor3"] = Color3.fromRGB(255, 255, 255);
G2L["bd"]["Text"] = [[Fart]];
G2L["bd"]["Name"] = [[FartButton]];
G2L["bd"]["Position"] = UDim2.new(0.39208, 0, 0.0881, 0);


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.Client.FartButton.UIGradient
G2L["be"] = Instance.new("UIGradient", G2L["bd"]);
G2L["be"]["Rotation"] = 90;
G2L["be"]["Color"] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(233, 233, 233)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(149, 149, 149))};


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.Client.FartButton.fartscript
G2L["bf"] = Instance.new("LocalScript", G2L["bd"]);
G2L["bf"]["Name"] = [[fartscript]];


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.Client.NightButton
G2L["c0"] = Instance.new("TextButton", G2L["b5"]);
G2L["c0"]["TextWrapped"] = true;
G2L["c0"]["BorderSizePixel"] = 0;
G2L["c0"]["TextStrokeColor3"] = Color3.fromRGB(255, 255, 255);
G2L["c0"]["TextSize"] = 14;
G2L["c0"]["TextScaled"] = true;
G2L["c0"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["c0"]["BackgroundColor3"] = Color3.fromRGB(68, 20, 84);
G2L["c0"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["c0"]["Size"] = UDim2.new(0.15, 0, 0.05295, 0);
G2L["c0"]["BorderColor3"] = Color3.fromRGB(255, 255, 255);
G2L["c0"]["Text"] = [[Night]];
G2L["c0"]["Name"] = [[NightButton]];
G2L["c0"]["Position"] = UDim2.new(0.55821, 0, 0.0881, 0);


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.Client.NightButton.NightScript
G2L["c1"] = Instance.new("LocalScript", G2L["c0"]);
G2L["c1"]["Name"] = [[NightScript]];


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.Client.NightButton.UIGradient
G2L["c2"] = Instance.new("UIGradient", G2L["c0"]);
G2L["c2"]["Rotation"] = 90;
G2L["c2"]["Color"] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(233, 233, 233)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(149, 149, 149))};


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.Client.DayButton
G2L["c3"] = Instance.new("TextButton", G2L["b5"]);
G2L["c3"]["TextWrapped"] = true;
G2L["c3"]["BorderSizePixel"] = 0;
G2L["c3"]["TextStrokeColor3"] = Color3.fromRGB(255, 255, 255);
G2L["c3"]["TextSize"] = 14;
G2L["c3"]["TextScaled"] = true;
G2L["c3"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["c3"]["BackgroundColor3"] = Color3.fromRGB(68, 20, 84);
G2L["c3"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["c3"]["Size"] = UDim2.new(0.15, 0, 0.05295, 0);
G2L["c3"]["BorderColor3"] = Color3.fromRGB(255, 255, 255);
G2L["c3"]["Text"] = [[Day]];
G2L["c3"]["Name"] = [[DayButton]];
G2L["c3"]["Position"] = UDim2.new(0.72324, 0, 0.08723, 0);


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.Client.DayButton.DayScript
G2L["c4"] = Instance.new("LocalScript", G2L["c3"]);
G2L["c4"]["Name"] = [[DayScript]];


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.Client.DayButton.UIGradient
G2L["c5"] = Instance.new("UIGradient", G2L["c3"]);
G2L["c5"]["Rotation"] = 90;
G2L["c5"]["Color"] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(233, 233, 233)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(149, 149, 149))};


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.Client.RemoveFogButton
G2L["c6"] = Instance.new("TextButton", G2L["b5"]);
G2L["c6"]["TextWrapped"] = true;
G2L["c6"]["BorderSizePixel"] = 0;
G2L["c6"]["TextStrokeColor3"] = Color3.fromRGB(255, 255, 255);
G2L["c6"]["TextSize"] = 14;
G2L["c6"]["TextScaled"] = true;
G2L["c6"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["c6"]["BackgroundColor3"] = Color3.fromRGB(68, 20, 84);
G2L["c6"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["c6"]["Size"] = UDim2.new(0.14987, 0, 0.05295, 0);
G2L["c6"]["BorderColor3"] = Color3.fromRGB(255, 255, 255);
G2L["c6"]["Text"] = [[Remove Fog]];
G2L["c6"]["Name"] = [[RemoveFogButton]];
G2L["c6"]["Position"] = UDim2.new(0.04129, 0, 0.17404, 0);


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.Client.RemoveFogButton.RemoveFog
G2L["c7"] = Instance.new("LocalScript", G2L["c6"]);
G2L["c7"]["Name"] = [[RemoveFog]];


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.Client.RemoveFogButton.UIGradient
G2L["c8"] = Instance.new("UIGradient", G2L["c6"]);
G2L["c8"]["Rotation"] = 90;
G2L["c8"]["Color"] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(233, 233, 233)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(149, 149, 149))};


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.Client.ClickToDeleteButton
G2L["c9"] = Instance.new("TextButton", G2L["b5"]);
G2L["c9"]["TextWrapped"] = true;
G2L["c9"]["BorderSizePixel"] = 0;
G2L["c9"]["TextStrokeColor3"] = Color3.fromRGB(255, 255, 255);
G2L["c9"]["TextSize"] = 14;
G2L["c9"]["TextScaled"] = true;
G2L["c9"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["c9"]["BackgroundColor3"] = Color3.fromRGB(68, 20, 84);
G2L["c9"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["c9"]["Size"] = UDim2.new(0.14987, 0, 0.05295, 0);
G2L["c9"]["BorderColor3"] = Color3.fromRGB(255, 255, 255);
G2L["c9"]["Text"] = [[Click To Delete]];
G2L["c9"]["Name"] = [[ClickToDeleteButton]];
G2L["c9"]["Position"] = UDim2.new(0.21519, 0, 0.1734, 0);


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.Client.ClickToDeleteButton.UIGradient
G2L["ca"] = Instance.new("UIGradient", G2L["c9"]);
G2L["ca"]["Rotation"] = 90;
G2L["ca"]["Color"] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(233, 233, 233)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(149, 149, 149))};


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.Client.ClickToDeleteButton.clicktodeletescript
G2L["cb"] = Instance.new("LocalScript", G2L["c9"]);
G2L["cb"]["Name"] = [[clicktodeletescript]];


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.Client.ClickToCollisionButton
G2L["cc"] = Instance.new("TextButton", G2L["b5"]);
G2L["cc"]["TextWrapped"] = true;
G2L["cc"]["BorderSizePixel"] = 0;
G2L["cc"]["TextStrokeColor3"] = Color3.fromRGB(255, 255, 255);
G2L["cc"]["TextSize"] = 14;
G2L["cc"]["TextScaled"] = true;
G2L["cc"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["cc"]["BackgroundColor3"] = Color3.fromRGB(68, 20, 84);
G2L["cc"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["cc"]["Size"] = UDim2.new(0.14987, 0, 0.05295, 0);
G2L["cc"]["BorderColor3"] = Color3.fromRGB(255, 255, 255);
G2L["cc"]["Text"] = [[Click To Disable Collision]];
G2L["cc"]["Name"] = [[ClickToCollisionButton]];
G2L["cc"]["Position"] = UDim2.new(0.39141, 0, 0.17441, 0);


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.Client.ClickToCollisionButton.UIGradient
G2L["cd"] = Instance.new("UIGradient", G2L["cc"]);
G2L["cd"]["Rotation"] = 90;
G2L["cd"]["Color"] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(233, 233, 233)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(149, 149, 149))};


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.Client.ClickToCollisionButton.clicktodeletescript
G2L["ce"] = Instance.new("LocalScript", G2L["cc"]);
G2L["ce"]["Name"] = [[clicktodeletescript]];


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.Client.LadderToHeaven
G2L["cf"] = Instance.new("TextButton", G2L["b5"]);
G2L["cf"]["TextWrapped"] = true;
G2L["cf"]["BorderSizePixel"] = 0;
G2L["cf"]["TextStrokeColor3"] = Color3.fromRGB(255, 255, 255);
G2L["cf"]["TextSize"] = 14;
G2L["cf"]["TextScaled"] = true;
G2L["cf"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["cf"]["BackgroundColor3"] = Color3.fromRGB(68, 20, 84);
G2L["cf"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["cf"]["Size"] = UDim2.new(0.14987, 0, 0.05295, 0);
G2L["cf"]["BorderColor3"] = Color3.fromRGB(255, 255, 255);
G2L["cf"]["Text"] = [[Ladder to Heaven]];
G2L["cf"]["Name"] = [[LadderToHeaven]];
G2L["cf"]["Position"] = UDim2.new(0.55603, 0, 0.17412, 0);


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.Client.LadderToHeaven.UIGradient
G2L["d0"] = Instance.new("UIGradient", G2L["cf"]);
G2L["d0"]["Rotation"] = 90;
G2L["d0"]["Color"] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(233, 233, 233)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(149, 149, 149))};


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.Client.LadderToHeaven.LadderToHeaven
G2L["d1"] = Instance.new("LocalScript", G2L["cf"]);
G2L["d1"]["Name"] = [[LadderToHeaven]];


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.Client.ExplodeButton
G2L["d2"] = Instance.new("TextButton", G2L["b5"]);
G2L["d2"]["TextWrapped"] = true;
G2L["d2"]["BorderSizePixel"] = 0;
G2L["d2"]["TextStrokeColor3"] = Color3.fromRGB(255, 255, 255);
G2L["d2"]["TextSize"] = 14;
G2L["d2"]["TextScaled"] = true;
G2L["d2"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["d2"]["BackgroundColor3"] = Color3.fromRGB(68, 20, 84);
G2L["d2"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["d2"]["Size"] = UDim2.new(0.14987, 0, 0.05295, 0);
G2L["d2"]["BorderColor3"] = Color3.fromRGB(255, 255, 255);
G2L["d2"]["Text"] = [[Explode Urself]];
G2L["d2"]["Name"] = [[ExplodeButton]];
G2L["d2"]["Position"] = UDim2.new(0.72298, 0, 0.17355, 0);


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.Client.ExplodeButton.UIGradient
G2L["d3"] = Instance.new("UIGradient", G2L["d2"]);
G2L["d3"]["Rotation"] = 90;
G2L["d3"]["Color"] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(233, 233, 233)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(149, 149, 149))};


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.Client.ExplodeButton.ExplodeScript
G2L["d4"] = Instance.new("LocalScript", G2L["d2"]);
G2L["d4"]["Name"] = [[ExplodeScript]];


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.TargetOLD
G2L["d5"] = Instance.new("ScrollingFrame", G2L["6"]);
G2L["d5"]["Visible"] = false;
G2L["d5"]["Active"] = true;
G2L["d5"]["BorderSizePixel"] = 0;
G2L["d5"]["BackgroundColor3"] = Color3.fromRGB(16, 16, 16);
G2L["d5"]["Name"] = [[TargetOLD]];
G2L["d5"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
G2L["d5"]["Size"] = UDim2.new(0.83115, 0, 0.99795, 0);
G2L["d5"]["ScrollBarImageColor3"] = Color3.fromRGB(0, 0, 0);
G2L["d5"]["Position"] = UDim2.new(0.58443, 0, 0.50102, 0);
G2L["d5"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["d5"]["BackgroundTransparency"] = 0.5;


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.TargetOLD.TextLabel
G2L["d6"] = Instance.new("TextLabel", G2L["d5"]);
G2L["d6"]["TextWrapped"] = true;
G2L["d6"]["BorderSizePixel"] = 0;
G2L["d6"]["TextSize"] = 14;
G2L["d6"]["TextScaled"] = true;
G2L["d6"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["d6"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["d6"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["d6"]["BackgroundTransparency"] = 1;
G2L["d6"]["Size"] = UDim2.new(0.21935, 0, 0.07045, 0);
G2L["d6"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["d6"]["Text"] = [[Target]];
G2L["d6"]["Position"] = UDim2.new(0.00396, 0, 0.00518, 0);


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.TargetOLD.AnnoyButton
G2L["d7"] = Instance.new("TextButton", G2L["d5"]);
G2L["d7"]["TextWrapped"] = true;
G2L["d7"]["BorderSizePixel"] = 0;
G2L["d7"]["TextStrokeColor3"] = Color3.fromRGB(255, 255, 255);
G2L["d7"]["TextSize"] = 14;
G2L["d7"]["TextScaled"] = true;
G2L["d7"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["d7"]["BackgroundColor3"] = Color3.fromRGB(68, 20, 84);
G2L["d7"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["d7"]["Size"] = UDim2.new(0.14987, 0, 0.05295, 0);
G2L["d7"]["BorderColor3"] = Color3.fromRGB(255, 255, 255);
G2L["d7"]["Text"] = [[Annoy Player]];
G2L["d7"]["Name"] = [[AnnoyButton]];
G2L["d7"]["Position"] = UDim2.new(0.04129, 0, 0.0881, 0);


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.TargetOLD.AnnoyButton.AnnoyScript
G2L["d8"] = Instance.new("LocalScript", G2L["d7"]);
G2L["d8"]["Name"] = [[AnnoyScript]];


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.TargetOLD.AnnoyButton.UIGradient
G2L["d9"] = Instance.new("UIGradient", G2L["d7"]);
G2L["d9"]["Rotation"] = 90;
G2L["d9"]["Color"] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(233, 233, 233)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(149, 149, 149))};


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.Target
G2L["da"] = Instance.new("Frame", G2L["6"]);
G2L["da"]["Visible"] = false;
G2L["da"]["BorderSizePixel"] = 0;
G2L["da"]["BackgroundColor3"] = Color3.fromRGB(16, 16, 16);
G2L["da"]["Size"] = UDim2.new(0.83336, 0, 0.99795, 0);
G2L["da"]["Position"] = UDim2.new(0.16664, 0, 0.00205, 0);
G2L["da"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["da"]["Name"] = [[Target]];
G2L["da"]["BackgroundTransparency"] = 0.5;


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.Target.EnterTarget
G2L["db"] = Instance.new("TextBox", G2L["da"]);
G2L["db"]["CursorPosition"] = -1;
G2L["db"]["Name"] = [[EnterTarget]];
G2L["db"]["BorderSizePixel"] = 0;
G2L["db"]["TextWrapped"] = true;
G2L["db"]["TextStrokeColor3"] = Color3.fromRGB(255, 255, 255);
G2L["db"]["TextSize"] = 14;
G2L["db"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
G2L["db"]["TextScaled"] = true;
G2L["db"]["BackgroundColor3"] = Color3.fromRGB(119, 119, 119);
G2L["db"]["RichText"] = true;
G2L["db"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["db"]["Size"] = UDim2.new(0.45444, 0, 0.17482, 0);
G2L["db"]["Position"] = UDim2.new(0.27164, 0, 0.28802, 0);
G2L["db"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["db"]["Text"] = [[]];


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.Target.EnterTarget.UICorner
G2L["dc"] = Instance.new("UICorner", G2L["db"]);



-- StarterGui.VEXGUI.Main.VexFrame.Tabs.Target.TargetEnterButton
G2L["dd"] = Instance.new("TextButton", G2L["da"]);
G2L["dd"]["TextWrapped"] = true;
G2L["dd"]["RichText"] = true;
G2L["dd"]["BorderSizePixel"] = 0;
G2L["dd"]["TextSize"] = 14;
G2L["dd"]["TextScaled"] = true;
G2L["dd"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
G2L["dd"]["BackgroundColor3"] = Color3.fromRGB(255, 133, 25);
G2L["dd"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["dd"]["Size"] = UDim2.new(0.227, 0, 0.17984, 0);
G2L["dd"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["dd"]["Text"] = [[Enter]];
G2L["dd"]["Name"] = [[TargetEnterButton]];
G2L["dd"]["Position"] = UDim2.new(0.3852, 0, 0.53763, 0);


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.Target.TargetEnterButton.UICorner
G2L["de"] = Instance.new("UICorner", G2L["dd"]);



-- StarterGui.VEXGUI.Main.VexFrame.Tabs.Target.TargetEnterButton.UIGradient
G2L["df"] = Instance.new("UIGradient", G2L["dd"]);
G2L["df"]["Rotation"] = 90;
G2L["df"]["Color"] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(233, 233, 233)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(149, 149, 149))};


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.Target.TargetEnterButton.TargetEnterScript
G2L["e0"] = Instance.new("LocalScript", G2L["dd"]);
G2L["e0"]["Name"] = [[TargetEnterScript]];


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.Target.CurrentTarget
G2L["e1"] = Instance.new("TextLabel", G2L["da"]);
G2L["e1"]["TextWrapped"] = true;
G2L["e1"]["BorderSizePixel"] = 0;
G2L["e1"]["TextSize"] = 14;
G2L["e1"]["TextScaled"] = true;
G2L["e1"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["e1"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["e1"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["e1"]["BackgroundTransparency"] = 1;
G2L["e1"]["RichText"] = true;
G2L["e1"]["Size"] = UDim2.new(0.40055, 0, 0.1, 0);
G2L["e1"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["e1"]["Text"] = [[Current Target:]];
G2L["e1"]["Name"] = [[CurrentTarget]];
G2L["e1"]["Position"] = UDim2.new(0.29871, 0, 0.81284, 0);


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.Target.Buttons
G2L["e2"] = Instance.new("Frame", G2L["da"]);
G2L["e2"]["BorderSizePixel"] = 0;
G2L["e2"]["BackgroundColor3"] = Color3.fromRGB(16, 16, 16);
G2L["e2"]["Size"] = UDim2.new(0.22807, 0, 1.00205, 0);
G2L["e2"]["Position"] = UDim2.new(0.99902, 0, -0.00205, 0);
G2L["e2"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["e2"]["Name"] = [[Buttons]];
G2L["e2"]["BackgroundTransparency"] = 0.6;


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.Target.Buttons.AnnoyButton
G2L["e3"] = Instance.new("TextButton", G2L["e2"]);
G2L["e3"]["TextWrapped"] = true;
G2L["e3"]["RichText"] = true;
G2L["e3"]["BorderSizePixel"] = 0;
G2L["e3"]["TextSize"] = 14;
G2L["e3"]["TextScaled"] = true;
G2L["e3"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["e3"]["BackgroundColor3"] = Color3.fromRGB(68, 20, 84);
G2L["e3"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["e3"]["Size"] = UDim2.new(0.996, 0, 0.132, 0);
G2L["e3"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["e3"]["Text"] = [[Annoy]];
G2L["e3"]["Name"] = [[AnnoyButton]];
G2L["e3"]["Position"] = UDim2.new(0.00431, 0, 0, 0);


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.Target.Buttons.AnnoyButton.UIGradient
G2L["e4"] = Instance.new("UIGradient", G2L["e3"]);
G2L["e4"]["Rotation"] = 90;
G2L["e4"]["Color"] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(233, 233, 233)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(149, 149, 149))};


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.Target.Buttons.BangButton
G2L["e5"] = Instance.new("TextButton", G2L["e2"]);
G2L["e5"]["TextWrapped"] = true;
G2L["e5"]["RichText"] = true;
G2L["e5"]["BorderSizePixel"] = 0;
G2L["e5"]["TextSize"] = 14;
G2L["e5"]["TextScaled"] = true;
G2L["e5"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["e5"]["BackgroundColor3"] = Color3.fromRGB(68, 20, 84);
G2L["e5"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["e5"]["Size"] = UDim2.new(0.996, 0, 0.132, 0);
G2L["e5"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["e5"]["Text"] = [[Bang]];
G2L["e5"]["Name"] = [[BangButton]];
G2L["e5"]["Position"] = UDim2.new(0, 0, 0.1294, 0);


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.Target.Buttons.BangButton.UIGradient
G2L["e6"] = Instance.new("UIGradient", G2L["e5"]);
G2L["e6"]["Rotation"] = 90;
G2L["e6"]["Color"] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(233, 233, 233)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(149, 149, 149))};


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.Target.Buttons.InsideButton
G2L["e7"] = Instance.new("TextButton", G2L["e2"]);
G2L["e7"]["TextWrapped"] = true;
G2L["e7"]["RichText"] = true;
G2L["e7"]["BorderSizePixel"] = 0;
G2L["e7"]["TextSize"] = 14;
G2L["e7"]["TextScaled"] = true;
G2L["e7"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["e7"]["BackgroundColor3"] = Color3.fromRGB(68, 20, 84);
G2L["e7"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["e7"]["Size"] = UDim2.new(0.996, 0, 0.132, 0);
G2L["e7"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["e7"]["Text"] = [[Inside]];
G2L["e7"]["Name"] = [[InsideButton]];
G2L["e7"]["Position"] = UDim2.new(-0.01323, 0, 0.26045, 0);


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.Target.Buttons.InsideButton.UIGradient
G2L["e8"] = Instance.new("UIGradient", G2L["e7"]);
G2L["e8"]["Rotation"] = 90;
G2L["e8"]["Color"] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(233, 233, 233)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(149, 149, 149))};


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.Kohaú
G2L["e9"] = Instance.new("Frame", G2L["6"]);
G2L["e9"]["Visible"] = false;
G2L["e9"]["BorderSizePixel"] = 0;
G2L["e9"]["BackgroundColor3"] = Color3.fromRGB(16, 16, 16);
G2L["e9"]["Size"] = UDim2.new(0.83336, 0, 0.99795, 0);
G2L["e9"]["Position"] = UDim2.new(0.16664, 0, 0.00205, 0);
G2L["e9"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["e9"]["Name"] = [[Kohaú]];
G2L["e9"]["BackgroundTransparency"] = 0.5;


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.Kohaú.Header
G2L["ea"] = Instance.new("TextLabel", G2L["e9"]);
G2L["ea"]["TextWrapped"] = true;
G2L["ea"]["BorderSizePixel"] = 0;
G2L["ea"]["TextSize"] = 14;
G2L["ea"]["TextScaled"] = true;
G2L["ea"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["ea"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["ea"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["ea"]["BackgroundTransparency"] = 1;
G2L["ea"]["Size"] = UDim2.new(0.49863, 0, 0.19802, 0);
G2L["ea"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["ea"]["Text"] = [[Kohau]];
G2L["ea"]["Name"] = [[Header]];
G2L["ea"]["Position"] = UDim2.new(0.24851, 0, -0.00516, 0);


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.Kohaú.SlipAnimButton
G2L["eb"] = Instance.new("TextButton", G2L["e9"]);
G2L["eb"]["TextWrapped"] = true;
G2L["eb"]["BorderSizePixel"] = 0;
G2L["eb"]["TextStrokeColor3"] = Color3.fromRGB(255, 255, 255);
G2L["eb"]["TextSize"] = 14;
G2L["eb"]["TextScaled"] = true;
G2L["eb"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["eb"]["BackgroundColor3"] = Color3.fromRGB(132, 106, 53);
G2L["eb"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["eb"]["Size"] = UDim2.new(0.27663, 0, 0.13611, 0);
G2L["eb"]["BorderColor3"] = Color3.fromRGB(255, 255, 255);
G2L["eb"]["Text"] = [[Slip Anim]];
G2L["eb"]["Name"] = [[SlipAnimButton]];
G2L["eb"]["Position"] = UDim2.new(0.08291, 0, 0.22223, 0);


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.Kohaú.SlipAnimButton.SlipAnim
G2L["ec"] = Instance.new("LocalScript", G2L["eb"]);
G2L["ec"]["Name"] = [[SlipAnim]];


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.Kohaú.SlipAnimButton.UIGradient
G2L["ed"] = Instance.new("UIGradient", G2L["eb"]);
G2L["ed"]["Rotation"] = 90;
G2L["ed"]["Color"] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(233, 233, 233)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(149, 149, 149))};


-- StarterGui.VEXGUI.Main.VexFrame.Tabs.Kohaú.SlipAnimButton.UIStroke
G2L["ee"] = Instance.new("UIStroke", G2L["eb"]);



-- StarterGui.VEXGUI.Main.VexFrame.ButtonModule
G2L["ef"] = Instance.new("ModuleScript", G2L["5"]);
G2L["ef"]["Name"] = [[ButtonModule]];


-- StarterGui.VEXGUI.Main.VexFrame.TextBoxModule
G2L["f0"] = Instance.new("ModuleScript", G2L["5"]);
G2L["f0"]["Name"] = [[TextBoxModule]];


-- StarterGui.VEXGUI.Main.VexFrame.TextBoxs
G2L["f1"] = Instance.new("Folder", G2L["5"]);
G2L["f1"]["Name"] = [[TextBoxs]];


-- StarterGui.VEXGUI.Main.VexFrame.TextBoxs.TextBoxFrame
G2L["f2"] = Instance.new("Frame", G2L["f1"]);
G2L["f2"]["Visible"] = false;
G2L["f2"]["BorderSizePixel"] = 0;
G2L["f2"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["f2"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
G2L["f2"]["Size"] = UDim2.new(0.60993, 0, 0.69053, 0);
G2L["f2"]["Position"] = UDim2.new(0.49962, 0, 0.45946, 0);
G2L["f2"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["f2"]["Name"] = [[TextBoxFrame]];
G2L["f2"]["BackgroundTransparency"] = 0.6;


-- StarterGui.VEXGUI.Main.VexFrame.TextBoxs.TextBoxFrame.TypeBelow
G2L["f3"] = Instance.new("TextLabel", G2L["f2"]);
G2L["f3"]["TextWrapped"] = true;
G2L["f3"]["BorderSizePixel"] = 0;
G2L["f3"]["TextSize"] = 14;
G2L["f3"]["TextStrokeColor3"] = Color3.fromRGB(255, 255, 255);
G2L["f3"]["TextScaled"] = true;
G2L["f3"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["f3"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["f3"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["f3"]["BackgroundTransparency"] = 1;
G2L["f3"]["Size"] = UDim2.new(1, 0, 0.3219, 0);
G2L["f3"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["f3"]["Text"] = [[Type Below]];
G2L["f3"]["Name"] = [[TypeBelow]];
G2L["f3"]["Position"] = UDim2.new(-0.00175, 0, 0.03202, 0);


-- StarterGui.VEXGUI.Main.VexFrame.TextBoxs.TextBoxFrame.TextBox
G2L["f4"] = Instance.new("TextBox", G2L["f2"]);
G2L["f4"]["BorderSizePixel"] = 0;
G2L["f4"]["TextWrapped"] = true;
G2L["f4"]["TextSize"] = 14;
G2L["f4"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["f4"]["TextScaled"] = true;
G2L["f4"]["BackgroundColor3"] = Color3.fromRGB(76, 76, 76);
G2L["f4"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["f4"]["PlaceholderText"] = [[(Click off or press enter to close.)]];
G2L["f4"]["Size"] = UDim2.new(0.84041, 0, 0.47153, 0);
G2L["f4"]["Position"] = UDim2.new(0.0784, 0, 0.4109, 0);
G2L["f4"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["f4"]["Text"] = [[]];
G2L["f4"]["BackgroundTransparency"] = 0.2;


-- StarterGui.VEXGUI.Main.VexFrame.TextBoxs.IntTextBoxFrame
G2L["f5"] = Instance.new("Frame", G2L["f1"]);
G2L["f5"]["Visible"] = false;
G2L["f5"]["BorderSizePixel"] = 0;
G2L["f5"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["f5"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
G2L["f5"]["Size"] = UDim2.new(0.60993, 0, 0.69053, 0);
G2L["f5"]["Position"] = UDim2.new(0.49962, 0, 0.45946, 0);
G2L["f5"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["f5"]["Name"] = [[IntTextBoxFrame]];
G2L["f5"]["BackgroundTransparency"] = 0.6;


-- StarterGui.VEXGUI.Main.VexFrame.TextBoxs.IntTextBoxFrame.TypeBelow
G2L["f6"] = Instance.new("TextLabel", G2L["f5"]);
G2L["f6"]["TextWrapped"] = true;
G2L["f6"]["BorderSizePixel"] = 0;
G2L["f6"]["TextSize"] = 14;
G2L["f6"]["TextStrokeColor3"] = Color3.fromRGB(255, 255, 255);
G2L["f6"]["TextScaled"] = true;
G2L["f6"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["f6"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["f6"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["f6"]["BackgroundTransparency"] = 1;
G2L["f6"]["Size"] = UDim2.new(1, 0, 0.3219, 0);
G2L["f6"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["f6"]["Text"] = [[Type Below]];
G2L["f6"]["Name"] = [[TypeBelow]];
G2L["f6"]["Position"] = UDim2.new(-0.00175, 0, 0.03202, 0);


-- StarterGui.VEXGUI.Main.VexFrame.TextBoxs.IntTextBoxFrame.TextBox
G2L["f7"] = Instance.new("TextBox", G2L["f5"]);
G2L["f7"]["PlaceholderColor3"] = Color3.fromRGB(141, 141, 141);
G2L["f7"]["BorderSizePixel"] = 0;
G2L["f7"]["TextWrapped"] = true;
G2L["f7"]["TextSize"] = 14;
G2L["f7"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["f7"]["TextScaled"] = true;
G2L["f7"]["BackgroundColor3"] = Color3.fromRGB(76, 76, 76);
G2L["f7"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["f7"]["PlaceholderText"] = [[Text]];
G2L["f7"]["Size"] = UDim2.new(0.84041, 0, 0.47153, 0);
G2L["f7"]["Position"] = UDim2.new(0.0784, 0, 0.4109, 0);
G2L["f7"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["f7"]["Text"] = [[]];
G2L["f7"]["BackgroundTransparency"] = 0.2;


-- StarterGui.VEXGUI.Main.VexFrame.TextBoxs.IntTextBoxFrame.Close
G2L["f8"] = Instance.new("TextButton", G2L["f5"]);
G2L["f8"]["TextWrapped"] = true;
G2L["f8"]["BorderSizePixel"] = 0;
G2L["f8"]["TextSize"] = 25;
G2L["f8"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["f8"]["BackgroundColor3"] = Color3.fromRGB(85, 6, 6);
G2L["f8"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["f8"]["Size"] = UDim2.new(0.06979, 0, 0.11504, 0);
G2L["f8"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["f8"]["Text"] = [[X]];
G2L["f8"]["Name"] = [[Close]];
G2L["f8"]["Position"] = UDim2.new(0.93021, 0, 0, 0);


-- StarterGui.VEXGUI.Main.VexFrame.TextBoxs.TargetTextBoxFrame
G2L["f9"] = Instance.new("Frame", G2L["f1"]);
G2L["f9"]["Visible"] = false;
G2L["f9"]["BorderSizePixel"] = 0;
G2L["f9"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["f9"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
G2L["f9"]["Size"] = UDim2.new(0.60993, 0, 0.69053, 0);
G2L["f9"]["Position"] = UDim2.new(0.49962, 0, 0.45946, 0);
G2L["f9"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["f9"]["Name"] = [[TargetTextBoxFrame]];
G2L["f9"]["BackgroundTransparency"] = 0.6;


-- StarterGui.VEXGUI.Main.VexFrame.TextBoxs.TargetTextBoxFrame.TypeBelow
G2L["fa"] = Instance.new("TextLabel", G2L["f9"]);
G2L["fa"]["TextWrapped"] = true;
G2L["fa"]["BorderSizePixel"] = 0;
G2L["fa"]["TextSize"] = 14;
G2L["fa"]["TextStrokeColor3"] = Color3.fromRGB(255, 255, 255);
G2L["fa"]["TextScaled"] = true;
G2L["fa"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["fa"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["fa"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["fa"]["BackgroundTransparency"] = 1;
G2L["fa"]["Size"] = UDim2.new(1, 0, 0.3219, 0);
G2L["fa"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["fa"]["Text"] = [[Target Name]];
G2L["fa"]["Name"] = [[TypeBelow]];
G2L["fa"]["Position"] = UDim2.new(-0.00175, 0, 0.03202, 0);


-- StarterGui.VEXGUI.Main.VexFrame.TextBoxs.TargetTextBoxFrame.TextBox
G2L["fb"] = Instance.new("TextBox", G2L["f9"]);
G2L["fb"]["CursorPosition"] = -1;
G2L["fb"]["BorderSizePixel"] = 0;
G2L["fb"]["TextWrapped"] = true;
G2L["fb"]["TextSize"] = 14;
G2L["fb"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["fb"]["TextScaled"] = true;
G2L["fb"]["BackgroundColor3"] = Color3.fromRGB(76, 76, 76);
G2L["fb"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["fb"]["PlaceholderText"] = [[(Click off or press enter to close.)]];
G2L["fb"]["Size"] = UDim2.new(0.84041, 0, 0.47153, 0);
G2L["fb"]["Position"] = UDim2.new(0.0784, 0, 0.4109, 0);
G2L["fb"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["fb"]["Text"] = [[]];
G2L["fb"]["BackgroundTransparency"] = 0.2;


-- StarterGui.VEXGUI.Main.VexFrame.NotificationModule
G2L["fc"] = Instance.new("ModuleScript", G2L["5"]);
G2L["fc"]["Name"] = [[NotificationModule]];


-- StarterGui.VEXGUI.Main.VexFrame.GameDetector
G2L["fd"] = Instance.new("LocalScript", G2L["5"]);
G2L["fd"]["Name"] = [[GameDetector]];


-- StarterGui.VEXGUI.Main.Title
G2L["fe"] = Instance.new("TextLabel", G2L["2"]);
G2L["fe"]["TextWrapped"] = true;
G2L["fe"]["BorderSizePixel"] = 0;
G2L["fe"]["TextSize"] = 14;
G2L["fe"]["TextScaled"] = true;
G2L["fe"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["fe"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["fe"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["fe"]["BackgroundTransparency"] = 1;
G2L["fe"]["Size"] = UDim2.new(0.17721, 0, -0.97373, 0);
G2L["fe"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["fe"]["Text"] = [[VEXSPLOIT PANEL]];
G2L["fe"]["Name"] = [[Title]];
G2L["fe"]["Position"] = UDim2.new(0.05917, 0, 0.97373, 0);


-- StarterGui.VEXGUI.Main.Drag
G2L["ff"] = Instance.new("LocalScript", G2L["2"]);
G2L["ff"]["Name"] = [[Drag]];


-- StarterGui.VEXGUI.Main.OpenAndClose
G2L["100"] = Instance.new("LocalScript", G2L["2"]);
G2L["100"]["Name"] = [[OpenAndClose]];


-- StarterGui.VEXGUI.Main.UIGradient
G2L["101"] = Instance.new("UIGradient", G2L["2"]);
G2L["101"]["Rotation"] = 90;
G2L["101"]["Color"] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(181, 181, 181)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(39, 33, 43))};


-- StarterGui.VEXGUI.Main.FPS
G2L["102"] = Instance.new("TextLabel", G2L["2"]);
G2L["102"]["TextWrapped"] = true;
G2L["102"]["BorderSizePixel"] = 0;
G2L["102"]["TextSize"] = 14;
G2L["102"]["TextScaled"] = true;
G2L["102"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["102"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["102"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["102"]["BackgroundTransparency"] = 1;
G2L["102"]["Size"] = UDim2.new(0.10535, 0, 0.97373, 0);
G2L["102"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["102"]["Text"] = [[FPS:]];
G2L["102"]["Name"] = [[FPS]];
G2L["102"]["Position"] = UDim2.new(0.89465, 0, 0, 0);


-- StarterGui.VEXGUI.Main.FPS.LocalScript
G2L["103"] = Instance.new("LocalScript", G2L["102"]);



-- StarterGui.VEXGUI.Main.Values
G2L["104"] = Instance.new("Folder", G2L["2"]);
G2L["104"]["Name"] = [[Values]];


-- StarterGui.VEXGUI.Main.Values.Games
G2L["105"] = Instance.new("Folder", G2L["104"]);
G2L["105"]["Name"] = [[Games]];


-- StarterGui.VEXGUI.Main.Values.Games.Kohaú
G2L["106"] = Instance.new("BoolValue", G2L["105"]);
G2L["106"]["Name"] = [[Kohaú]];


-- StarterGui.VEXGUI.Logo
G2L["107"] = Instance.new("ImageLabel", G2L["1"]);
G2L["107"]["BorderSizePixel"] = 0;
G2L["107"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
-- [ERROR] cannot convert ImageContent, please report to "https://github.com/uniquadev/GuiToLuaConverter/issues"
G2L["107"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
G2L["107"]["Image"] = [[rbxassetid://101713159491693]];
G2L["107"]["Size"] = UDim2.new(0.318, 1, 0.77702, 1);
G2L["107"]["Visible"] = false;
G2L["107"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["107"]["BackgroundTransparency"] = 1;
G2L["107"]["Name"] = [[Logo]];
G2L["107"]["Position"] = UDim2.new(0.47964, 0, 0.49877, 0);


-- StarterGui.VEXGUI.Logo.LocalScript
G2L["108"] = Instance.new("LocalScript", G2L["107"]);



-- StarterGui.VEXGUI.Logo.UICorner
G2L["109"] = Instance.new("UICorner", G2L["107"]);
G2L["109"]["CornerRadius"] = UDim.new(10, 10);


-- StarterGui.VEXGUI.ChatLog
G2L["10a"] = Instance.new("Frame", G2L["1"]);
G2L["10a"]["Visible"] = false;
G2L["10a"]["BorderSizePixel"] = 0;
G2L["10a"]["BackgroundColor3"] = Color3.fromRGB(156, 58, 236);
G2L["10a"]["Size"] = UDim2.new(0.29085, 0, 0.0324, 0);
G2L["10a"]["Position"] = UDim2.new(0.69828, 0, 0.3319, 0);
G2L["10a"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["10a"]["Name"] = [[ChatLog]];
G2L["10a"]["BackgroundTransparency"] = 0.3;


-- StarterGui.VEXGUI.ChatLog.UIGradient
G2L["10b"] = Instance.new("UIGradient", G2L["10a"]);
G2L["10b"]["Rotation"] = 90;
G2L["10b"]["Color"] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(181, 181, 181)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(0, 0, 0))};


-- StarterGui.VEXGUI.ChatLog.Text
G2L["10c"] = Instance.new("Folder", G2L["10a"]);
G2L["10c"]["Name"] = [[Text]];


-- StarterGui.VEXGUI.ChatLog.Text.Chats
G2L["10d"] = Instance.new("Folder", G2L["10c"]);
G2L["10d"]["Name"] = [[Chats]];


-- StarterGui.VEXGUI.ChatLog.Text.Other
G2L["10e"] = Instance.new("Folder", G2L["10c"]);
G2L["10e"]["Name"] = [[Other]];


-- StarterGui.VEXGUI.ChatLog.Text.Other.Title
G2L["10f"] = Instance.new("TextLabel", G2L["10e"]);
G2L["10f"]["TextWrapped"] = true;
G2L["10f"]["BorderSizePixel"] = 0;
G2L["10f"]["TextSize"] = 14;
G2L["10f"]["TextScaled"] = true;
G2L["10f"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["10f"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["10f"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["10f"]["BackgroundTransparency"] = 1;
G2L["10f"]["Size"] = UDim2.new(1.00001, 0, 0.89565, 0);
G2L["10f"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["10f"]["Text"] = [[Chatlogs]];
G2L["10f"]["Name"] = [[Title]];
G2L["10f"]["Position"] = UDim2.new(-0, 0, 0.05351, 0);


-- StarterGui.VEXGUI.ChatLog.Drag
G2L["110"] = Instance.new("LocalScript", G2L["10a"]);
G2L["110"]["Name"] = [[Drag]];


-- StarterGui.VEXGUI.ChatLog.ScrollingMainFrame
G2L["111"] = Instance.new("ScrollingFrame", G2L["10a"]);
G2L["111"]["Active"] = true;
G2L["111"]["BorderSizePixel"] = 0;
G2L["111"]["BackgroundColor3"] = Color3.fromRGB(49, 49, 49);
G2L["111"]["Name"] = [[ScrollingMainFrame]];
G2L["111"]["Size"] = UDim2.new(1.00001, 0, 12.78472, 0);
G2L["111"]["ScrollBarImageColor3"] = Color3.fromRGB(0, 0, 0);
G2L["111"]["Position"] = UDim2.new(-0, 0, 1, 0);
G2L["111"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["111"]["ScrollBarThickness"] = 14;
G2L["111"]["BackgroundTransparency"] = 0.5;


-- StarterGui.VEXGUI.ChatLog.ScrollingMainFrame.ChatLogger
G2L["112"] = Instance.new("LocalScript", G2L["111"]);
G2L["112"]["Name"] = [[ChatLogger]];


-- StarterGui.VEXGUI.ChatLog.Template
G2L["113"] = Instance.new("Folder", G2L["10a"]);
G2L["113"]["Name"] = [[Template]];


-- StarterGui.VEXGUI.ChatLog.Template.UserSent
G2L["114"] = Instance.new("TextLabel", G2L["113"]);
G2L["114"]["TextWrapped"] = true;
G2L["114"]["BorderSizePixel"] = 0;
G2L["114"]["TextSize"] = 14;
G2L["114"]["TextScaled"] = true;
G2L["114"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["114"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["114"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["114"]["BackgroundTransparency"] = 1;
G2L["114"]["Size"] = UDim2.new(0.24324, 0, 1.09074, 0);
G2L["114"]["Visible"] = false;
G2L["114"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["114"]["Text"] = [[User:]];
G2L["114"]["Name"] = [[UserSent]];
G2L["114"]["Position"] = UDim2.new(-0.00001, 0, 1.15995, 0);


-- StarterGui.VEXGUI.ChatLog.Template.UserSent.MessageSent
G2L["115"] = Instance.new("TextLabel", G2L["114"]);
G2L["115"]["TextWrapped"] = true;
G2L["115"]["BorderSizePixel"] = 0;
G2L["115"]["TextSize"] = 14;
G2L["115"]["TextScaled"] = true;
G2L["115"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["115"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["115"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["115"]["BackgroundTransparency"] = 1;
G2L["115"]["Size"] = UDim2.new(3.2506, 0, 1.80398, 0);
G2L["115"]["Visible"] = false;
G2L["115"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["115"]["Text"] = [[Message]];
G2L["115"]["Name"] = [[MessageSent]];
G2L["115"]["Position"] = UDim2.new(0.86067, 0, 0.24149, 0);


-- StarterGui.VEXGUI.DeathText
G2L["116"] = Instance.new("TextLabel", G2L["1"]);
G2L["116"]["TextWrapped"] = true;
G2L["116"]["BorderSizePixel"] = 0;
G2L["116"]["TextSize"] = 14;
G2L["116"]["TextScaled"] = true;
G2L["116"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["116"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["116"]["TextColor3"] = Color3.fromRGB(255, 0, 0);
G2L["116"]["BackgroundTransparency"] = 1;
G2L["116"]["Size"] = UDim2.new(0.69845, 0, 0.25668, 0);
G2L["116"]["Visible"] = false;
G2L["116"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["116"]["Text"] = [[PLEASE STAND BY AS WE RE-EXECUTE]];
G2L["116"]["Name"] = [[DeathText]];
G2L["116"]["Position"] = UDim2.new(0.15031, 0, 0.33132, 0);


-- StarterGui.VEXGUI.ReExecute
G2L["117"] = Instance.new("LocalScript", G2L["1"]);
G2L["117"]["Enabled"] = false;
G2L["117"]["Name"] = [[ReExecute]];
G2L["117"]["Disabled"] = true;


-- StarterGui.VEXGUI.NotificationTop
G2L["118"] = Instance.new("Frame", G2L["1"]);
G2L["118"]["Visible"] = false;
G2L["118"]["BorderSizePixel"] = 0;
G2L["118"]["BackgroundColor3"] = Color3.fromRGB(16, 16, 16);
G2L["118"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
G2L["118"]["Size"] = UDim2.new(0.39058, 0, 0.10605, 0);
G2L["118"]["Position"] = UDim2.new(0.45245, 0, 0.05295, 0);
G2L["118"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["118"]["Name"] = [[NotificationTop]];
G2L["118"]["BackgroundTransparency"] = 0.25;


-- StarterGui.VEXGUI.NotificationTop.UICorner
G2L["119"] = Instance.new("UICorner", G2L["118"]);
G2L["119"]["CornerRadius"] = UDim.new(0.05, 8);


-- StarterGui.VEXGUI.NotificationTop.Text
G2L["11a"] = Instance.new("Folder", G2L["118"]);
G2L["11a"]["Name"] = [[Text]];


-- StarterGui.VEXGUI.NotificationTop.Text.Title
G2L["11b"] = Instance.new("TextLabel", G2L["11a"]);
G2L["11b"]["TextWrapped"] = true;
G2L["11b"]["BorderSizePixel"] = 0;
G2L["11b"]["TextSize"] = 14;
G2L["11b"]["TextScaled"] = true;
G2L["11b"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["11b"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["11b"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["11b"]["BackgroundTransparency"] = 1;
G2L["11b"]["Size"] = UDim2.new(1, 0, 0.41369, 0);
G2L["11b"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["11b"]["Text"] = [[Title]];
G2L["11b"]["Name"] = [[Title]];
G2L["11b"]["Position"] = UDim2.new(-0, 0, 0, 0);


-- StarterGui.VEXGUI.NotificationTop.Text.Text
G2L["11c"] = Instance.new("TextLabel", G2L["11a"]);
G2L["11c"]["TextWrapped"] = true;
G2L["11c"]["BorderSizePixel"] = 0;
G2L["11c"]["TextSize"] = 14;
G2L["11c"]["TextScaled"] = true;
G2L["11c"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["11c"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["11c"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["11c"]["BackgroundTransparency"] = 1;
G2L["11c"]["Size"] = UDim2.new(0.99628, 0, 0.44237, 0);
G2L["11c"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["11c"]["Text"] = [[Text goes here.]];
G2L["11c"]["Name"] = [[Text]];
G2L["11c"]["Position"] = UDim2.new(0.00372, 0, 0.41369, 0);


-- StarterGui.VEXGUI.NotificationTop.Text.GUI
G2L["11d"] = Instance.new("TextLabel", G2L["11a"]);
G2L["11d"]["TextWrapped"] = true;
G2L["11d"]["BorderSizePixel"] = 0;
G2L["11d"]["TextSize"] = 14;
G2L["11d"]["TextScaled"] = true;
G2L["11d"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["11d"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["11d"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["11d"]["BackgroundTransparency"] = 1;
G2L["11d"]["Size"] = UDim2.new(0.09843, 0, 0.19986, 0);
G2L["11d"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["11d"]["Text"] = [[VEXsploit]];
G2L["11d"]["Name"] = [[GUI]];
G2L["11d"]["Position"] = UDim2.new(0.87571, 0, 0.09986, 0);


-- StarterGui.VEXGUI.NotificationTop.Text.GUI.UIGradient
G2L["11e"] = Instance.new("UIGradient", G2L["11d"]);
G2L["11e"]["Color"] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(179, 124, 255)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(103, 59, 168))};


-- Require G2L wrapper
local G2L_REQUIRE = require;
local G2L_MODULES = {};
local function require(Module:ModuleScript)
	local ModuleState = G2L_MODULES[Module];
	if ModuleState then
		if not ModuleState.Required then
			ModuleState.Required = true;
			ModuleState.Value = ModuleState.Closure();
		end
		return ModuleState.Value;
	end;
	return G2L_REQUIRE(Module);
end

G2L_MODULES[G2L["ef"]] = {
	Closure = function()
		local script = G2L["ef"];local ButtonModule = {}

		function ButtonModule.ColorOn(Button)
			Button.BorderSizePixel = 2
		end

		function ButtonModule.ColorOff(Button)
			Button.BorderSizePixel = 0
		end


		return ButtonModule

	end;
};
G2L_MODULES[G2L["f0"]] = {
	Closure = function()
		local script = G2L["f0"];local TextBoxModule = {}
		local TextBoxFrame = script.Parent.TextBoxs.TextBoxFrame
		local TextBox = TextBoxFrame.TextBox

		local main = script.Parent.Parent.Parent.Main

		local intTextBoxframe = script.Parent.TextBoxs.IntTextBoxFrame
		local inttextbox = intTextBoxframe.TextBox

		local textBoxsFrame = script.Parent.TextBoxs

		-- Helper to set transparency of all elements in Main except TextBoxs
		local function setMainTransparency(transparency)
			for _, obj in pairs(main:GetDescendants()) do
				if not textBoxsFrame:IsAncestorOf(obj) then
					if obj:IsA("TextLabel") or obj:IsA("TextButton") or obj:IsA("Frame") then
						if obj:FindFirstChild("BackgroundTransparency") then
							obj.BackgroundTransparency = transparency
						end
						if obj:IsA("TextLabel") or obj:IsA("TextButton") then
							obj.TextTransparency = transparency
						end
					end
				end
			end
		end

		function TextBoxModule.SetProperty(object, propertyName)
			TextBoxFrame.Visible = true
			setMainTransparency(1)

			TextBox.FocusLost:Connect(function()
				TextBoxFrame.Visible = false
				local value = tonumber(TextBox.Text) or TextBox.Text
				object[propertyName] = value
				setMainTransparency(0)
			end)
		end
		local notificationmodule = require(script.Parent.NotificationModule)

		function TextBoxModule.IntSetProperty(object, propertyName)
			intTextBoxframe.Visible = true
			setMainTransparency(1)

			local Names = {"WalkSpeed", "JumpPower", "Gravity", "FieldOfView"}
			local OriginalValues = {"16", "50", "196.2", ""}

			for i, v in pairs(Names) do
				if propertyName == v then
					inttextbox.PlaceholderText = OriginalValues[i]
				end
			end

			inttextbox.FocusLost:Connect(function()
				intTextBoxframe.Visible = false

				local value = tonumber(inttextbox.Text)
				if value then
					object[propertyName] = value
				else
					warn("Invalid input: Must be a number.")
					notificationmodule.Notification("Warning", "Must be a number ‼️.", 3)
				end

				inttextbox.Text = ""
				setMainTransparency(0)
			end)

			intTextBoxframe.Close.MouseButton1Up:Connect(function()
				intTextBoxframe.Visible = false
				setMainTransparency(0)
			end)
		end


		return TextBoxModule

	end;
};
G2L_MODULES[G2L["fc"]] = {
	Closure = function()
		local script = G2L["fc"];local NotificationModule = {}

		local guiNotificationFrame = script.Parent.Parent.Parent.NotificationTop
		local guiTitle = guiNotificationFrame.Text.Title
		local guiText = guiNotificationFrame.Text.Text


		local TweenService = game:GetService("TweenService")
		local ti = TweenInfo.new(0.4, Enum.EasingStyle.Sine, Enum.EasingDirection.Out)

		local NotificationAudio

		function NotificationModule.Notification(Title, Text, Time)
			local MainIcon = "rbxassetid://6031071050" -- Replace with your actual icon ID

			game:GetService("StarterGui"):SetCore("SendNotification", {
				Title = Title,
				Text = Text,
				Duration = Time or 5,
				Icon = MainIcon,
			})
		end


		function NotificationModule.GuiNotification(Title, Text, Duration)
			-- Clone the notification frame
			local clone = guiNotificationFrame:Clone()
			clone.Parent = guiNotificationFrame.Parent
			clone.Visible = false

			-- Set title and text
			clone.Text.Title.Text = Title
			clone.Text.Text.Text = Text

			-- Play notification sound

			-- Slide in
			clone.Position = UDim2.new(0.5, -clone.Size.X.Offset / 2, -0.12, 0)
			clone.Visible = true
			TweenService:Create(clone, ti, {
				Position = UDim2.new(0.5, -clone.Size.X.Offset / 2, 0.02, 0)
			}):Play()

			local NotificationAudio = Instance.new("Sound")
			NotificationAudio.SoundId = "rbxassetid://4590662766"
			NotificationAudio.Parent = workspace
			NotificationAudio:Play()
			game.Debris:AddItem(NotificationAudio, Duration + 0.5)

			-- Wait and slide out
			task.delay(Duration, function()
				TweenService:Create(clone, ti, {
					Position = UDim2.new(0.5, -clone.Size.X.Offset / 2, -1.5, 0)
				}):Play()

				task.wait(0.5)
				clone:Destroy()
			end)
		end



		return NotificationModule


	end;
};
-- StarterGui.VEXGUI.Main.VexFrame.Tabs.Home.Thanks.RGBLabelScript
local function C_a()
	local script = G2L["a"];
	local Button = script.Parent
	local CurrentColor = Color3.new(255, 0 , 0)

	function zigzag(X) return math.acos(math.cos(X*math.pi))/math.pi end

	counter = 0

	while wait(0.1)do
		script.Parent.TextColor3 = Color3.fromHSV(zigzag(counter),1,1)

		counter = counter + 0.05
	end
end;
task.spawn(C_a);
-- StarterGui.VEXGUI.Main.VexFrame.Tabs.Home.ChangeTheme.ThemeScript
local function C_1d()
	local script = G2L["1d"];
	local HttpService = game:GetService("HttpService")
	local FILE_NAME = "theme_color.json"

	local Colors = script.Parent.Colors
	local Frame = script.Parent.Parent.Parent.Parent.Parent.VexFrame
	local Main = Frame.Parent
	local textbox = script.Parent.CustomColor

	-- Darkens a Color3 by a given factor (e.g., 0.9 = 10% darker)
	local function darkenColor(color, factor)
		return Color3.new(
			math.clamp(color.R * factor, 0, 1),
			math.clamp(color.G * factor, 0, 1),
			math.clamp(color.B * factor, 0, 1)
		)
	end

	-- Saves the color to a local file
	local function saveColor(color)
		local data = {
			R = color.R,
			G = color.G,
			B = color.B
		}
		writefile(FILE_NAME, HttpService:JSONEncode(data))
	end

	-- Loads the color from the local file, or returns nil
	local function loadColor()
		if isfile(FILE_NAME) then
			local data = HttpService:JSONDecode(readfile(FILE_NAME))
			return Color3.new(data.R, data.G, data.B)
		end
		return nil
	end

	-- Applies the theme color to all target elements
	local function applyColorTheme(color)
		local darkerColor = darkenColor(color, 0.3)
		local darkerColor2 = darkenColor(color, 0.3)

		Frame.BackgroundColor3 = color
		Main.BackgroundColor3 = color

		for _, button in pairs(script.Parent.Parent.Parent.Parent.Tabs.VexButtons.ScrollingFrame:GetChildren()) do
			if button:IsA("TextButton") then
				button.BackgroundColor3 = darkerColor
			end
		end

		for _, button2 in pairs(script.Parent.Parent.Parent.General:GetChildren()) do
			if button2:IsA("TextButton") then
				button2.BackgroundColor3 = darkerColor2
			end
		end

		for _ ,button3 in pairs(script.Parent.Parent.Parent.Settings.Buttons:GetChildren()) do
			if button3:IsA("TextButton") then
				button3.BackgroundColor3 = darkerColor2
			end
		end

		for _ ,button4 in pairs(script.Parent.Parent.Parent.Client:GetChildren()) do
			if button4:IsA("TextButton") then
				button4.BackgroundColor3 = darkerColor2
			end
		end

		for _ ,button5 in pairs(script.Parent.Parent.Parent.Target.Buttons:GetChildren()) do
			if button5:IsA("TextButton") then
				button5.BackgroundColor3 = darkerColor2
			end
		end

		for _, textbox in pairs(script.Parent.Parent.Parent.Parent.TextBoxs:GetChildren()) do
			if textbox:IsA("Frame") then
				textbox.BackgroundColor3 = color
			end
		end


		script.Parent.Parent.Parent.Parent.Parent.Parent.ChatLog.BackgroundColor3 = color
		script.Parent.Parent.Parent.Teleport.ImageLabel.BackgroundColor3 = darkerColor2
	end

	-- Handle color buttons
	for _, v in pairs(Colors:GetChildren()) do
		if v:IsA("TextButton") then
			v.MouseButton1Up:Connect(function()
				local originalColor = v.BackgroundColor3
				applyColorTheme(originalColor)
				saveColor(originalColor)
			end)
		end
	end

	-- Handle custom RGB input
	textbox.FocusLost:Connect(function()
		local text = textbox.Text:gsub("[()%[%]{}]", "") -- remove any brackets
		local r, g, b = text:match("^(%d+),%s*(%d+),%s*(%d+)$")
		r, g, b = tonumber(r), tonumber(g), tonumber(b)

		if r and g and b and r <= 255 and g <= 255 and b <= 255 then
			local color = Color3.fromRGB(r, g, b)
			applyColorTheme(color)
			saveColor(color)
			textbox.Text = string.format("%d,%d,%d is your theme color", r, g, b)
		else
			warn("Invalid RGB input. Please enter in the format: 255,0,0")
		end
	end)

	-- Load saved color on startup
	local savedColor = loadColor()
	if savedColor then
		applyColorTheme(savedColor)
	end

end;
task.spawn(C_1d);
-- StarterGui.VEXGUI.Main.VexFrame.Tabs.TextHandler
local function C_38()
	local script = G2L["38"];
	local Players = game:GetService("Players")
	local Player = game.Players.LocalPlayer
	local char = Player.Character or Player.CharacterAdded:Wait()  -- Wait for the character to fully load

	local image = script.Parent.Home.PlayerImage

	-- Load player thumbnail
	local content = Players:GetUserThumbnailAsync(Player.UserId, Enum.ThumbnailType.HeadShot, Enum.ThumbnailSize.Size150x150)
	image.Image = content

	local NotificationModule = require(script.Parent.Parent.NotificationModule)

	local accage = Player.AccountAge
	local id = Player.UserId
	local username = char.Name

	local info = script.Parent.Home.Info
	local ts = game:GetService("TweenService")

	info.PlrName.Text = "Welcome "..username.."!"
	info.AccAge.Text = "Your account age is "..accage.." Days old"
	info.plrid.Text = "USER ID "..id

	local charLoaded = false
	local ti = TweenInfo.new(3, Enum.EasingStyle.Sine, Enum.EasingDirection.In)

	local nocc = false

	-- Wait for the character to load properly
	while not charLoaded do
		wait()

		script.Parent.Parent.Parent.Parent.Main.Visible = false
		for _, v in pairs(script.Parent.Parent.Parent.Parent.Main.VexFrame:WaitForChild("Tabs"):GetChildren()) do
			if v:IsA("Frame") then
				if v.Name ~= "Home" then
					v.Visible = false
				else
					v.Visible = true
				end
			end
		end

		for _, v in pairs(script.Parent.Parent.Parent.Parent.Main.VexFrame:WaitForChild("Tabs"):GetChildren()) do
			if v:IsA("ScrollingFrame") then
				if v.Name ~= "Home" then
					v.Visible = false
				end
			end
		end

		script.Parent.Parent.Parent.Parent:WaitForChild("Logo").ImageTransparency = 0

		local lighting = game:GetService("Lighting")
		local cc = lighting:FindFirstChild("ColorCorrection")
		if cc then
			origColor = cc.TintColor
			cc.TintColor = Color3.new(0, 0, 0)
		else
			nocc = true
			cc = Instance.new("ColorCorrectionEffect")
			cc.Name = "ColorCorrection"
			cc.TintColor = Color3.new(0, 0, 0)
			cc.Parent = lighting
			origColor = Color3.new(1, 1, 1)
		end

		-- Check if character exists
		if char then
			-- Handle the removal of ColorCorrectionEffect after 3 seconds
			if nocc == true then
				game.Debris:AddItem(cc, 3)
			end

			-- Tween the Logo transparency
			ts:Create(script.Parent.Parent.Parent.Parent.Logo, ti, {ImageTransparency = 1}):Play()
			wait(3)

			-- Show main UI again
			script.Parent.Parent.Parent.Parent.Main.Visible = true
			NotificationModule.GuiNotification("Welcome!", "Thanks for using VexSploit", 3)

			-- Restore ColorCorrectionEffect tint
			ts:Create(cc, ti, {TintColor = origColor}):Play()

			-- Mark character as fully loaded
			charLoaded = true
		end
	end

end;
task.spawn(C_38);
-- StarterGui.VEXGUI.Main.VexFrame.Tabs.Spectate.enterButton.SpectateScript
local function C_3c()
	local script = G2L["3c"];
	local button = script.Parent
	local textbox = button.Parent.TextBox
	local player = game.Players.LocalPlayer
	local cam = workspace.CurrentCamera
	local rs = game:GetService("RunService")
	local resetbutton = button.Parent.resetButton
	local TextChatService = game:GetService("TextChatService")
	local followTarget = nil

	-- Custom system message function with rich text styling
	local function sendSystemMessage(msg)
		local prefix = "<b><font color='#0073FF'>[SPECTATE]</font></b>" -- Bold + Blue
		local errorMessage = string.format("<font color='#FF0000'>⚠️ %s ⚠️</font>", msg) -- Red error text
		TextChatService.TextChannels.RBXGeneral:DisplaySystemMessage(prefix .. " " .. errorMessage)
	end

	-- Function to find a matching player (partial + case-insensitive)
	local function findMatchingPlayer(partialName)
		local matches = {}
		local lowerInput = string.lower(partialName)

		for _, plr in pairs(game.Players:GetPlayers()) do
			if string.sub(string.lower(plr.Name), 1, #lowerInput) == lowerInput then
				table.insert(matches, plr)
			end
		end

		-- Send error message based on the number of matches
		if #matches == 1 then
			return matches[1]  -- Single match, return it
		elseif #matches > 1 then
			sendSystemMessage("Error: " .. #matches .. " targets found")  -- Multiple matches, error
		elseif #matches == 0 then
			sendSystemMessage("Error: No target found")  -- No matches, error
		end

		return nil
	end

	-- Spectate camera update loop
	local function updateCamera()
		while followTarget do
			if followTarget.Character and followTarget.Character:FindFirstChild("HumanoidRootPart") then
				cam.CameraSubject = followTarget.Character:FindFirstChild("Humanoid")
			end
			rs.RenderStepped:Wait()
		end
	end

	-- Button click: try to find a valid player and follow
	button.MouseButton1Up:Connect(function()
		local inputText = textbox.Text
		if inputText == "" or inputText:match("^%s*$") then -- Check for empty or whitespace-only input
			sendSystemMessage("Error: No target entered")
			return
		end

		local targetPlayer = findMatchingPlayer(inputText)
		if targetPlayer then
			followTarget = targetPlayer
			updateCamera()
		end
	end)

	-- Reset button: stop following and return camera to self
	resetbutton.MouseButton1Up:Connect(function()
		followTarget = nil
		cam.CameraType = Enum.CameraType.Custom
		if player.Character and player.Character:FindFirstChild("Humanoid") then
			cam.CameraSubject = player.Character.Humanoid
			cam.CFrame = player.Character.HumanoidRootPart.CFrame
		end
	end)

end;
task.spawn(C_3c);
-- StarterGui.VEXGUI.Main.VexFrame.Tabs.Teleport.teleportenter.TeleportScript
local function C_48()
	local script = G2L["48"];
	local button = script.Parent
	local textbox = button.Parent.TextBox
	local image = script.Parent.Parent.ImageLabel
	local player = game.Players.LocalPlayer
	local TextChatService = game:GetService("TextChatService")
	local Players = game:GetService("Players")

	-- System message with TELEPORT tag
	local function sendSystemMessage(msg)
		local prefix = "<b><font color='#9A33A4'>[TELEPORT]</font></b>"
		local warningMessage = string.format("<font color='#FF0000'>⚠️ %s ⚠️</font>", msg)
		TextChatService.TextChannels.RBXGeneral:DisplaySystemMessage(prefix .. " " .. warningMessage)
	end

	-- Find model by partial name in Workspace
	local function findMatchingTarget(partialName)
		local matches = {}
		local lowerInput = string.lower(partialName)

		for _, obj in pairs(workspace:GetChildren()) do
			if obj:IsA("Model") and string.sub(string.lower(obj.Name), 1, #lowerInput) == lowerInput then
				table.insert(matches, obj)
			end
		end

		if #matches == 1 then
			return matches[1]
		elseif #matches > 1 then
			sendSystemMessage("Error: " .. #matches .. " targets found")
		elseif #matches == 0 then
			sendSystemMessage("Error: No target found")
		end

		return nil
	end

	-- Try to find a player by partial name (case-insensitive)
	local function findPlayerByName(partialName)
		local lowerInput = string.lower(partialName)

		for _, plr in pairs(Players:GetPlayers()) do
			if string.sub(string.lower(plr.Name), 1, #lowerInput) == lowerInput then
				return plr
			end
		end

		return nil
	end

	-- Teleport and display thumbnail
	button.MouseButton1Up:Connect(function()
		local targetName = textbox.Text

		if not targetName or targetName:match("^%s*$") then
			sendSystemMessage("Error: No target entered")
			return
		end

		local target = findMatchingTarget(targetName)
		if not target then return end

		local char = player.Character or player.CharacterAdded:Wait()
		local root = char:FindFirstChild("HumanoidRootPart")
		local targetRoot = target:FindFirstChild("HumanoidRootPart")

		if root and targetRoot then
			root.CFrame = targetRoot.CFrame + Vector3.new(0, 5, 0)

			-- Update image if it's a player
			local targetPlayer = findPlayerByName(target.Name)
			if targetPlayer then
				local success, content = pcall(function()
					return Players:GetUserThumbnailAsync(
						targetPlayer.UserId,
						Enum.ThumbnailType.HeadShot,
						Enum.ThumbnailSize.Size150x150
					)
				end)
				if success then
					image.Image = content
				else
					warn("Thumbnail failed:", content)
				end
			else
				image.Image = "" -- Clear image if target is not a player
			end
		end
	end)

end;
task.spawn(C_48);
-- StarterGui.VEXGUI.Main.VexFrame.Tabs.General.FlingButton.FlingScript
local function C_57()
	local script = G2L["57"];
	local plr = game.Players.LocalPlayer
	local button = script.Parent
	local buttonmodule = require(script.Parent.Parent.Parent.Parent.ButtonModule)
	local NotificationModule = require(script.Parent.Parent.Parent.Parent.NotificationModule)

	local toggle = false
	local spinSpeed = 10000
	local spinningCoroutine = nil
	local touchConnections = {}

	-- FLING FUNCTION
	local function onPartTouched(otherPart)
		if not toggle then return end

		local char = plr.Character
		if not char then return end

		local humrootpart = char:FindFirstChild("HumanoidRootPart")
		if not humrootpart then return end

		local otherChar = otherPart:FindFirstAncestorOfClass("Model")
		if otherChar and otherChar ~= char and otherChar:FindFirstChild("Humanoid") then
			local otherHumRoot = otherChar:FindFirstChild("HumanoidRootPart")
			if otherHumRoot then
				local direction = (otherHumRoot.Position - humrootpart.Position).Unit
				otherHumRoot.Velocity = direction * 10000
			end
		end
	end

	-- GET BODY PARTS
	local function getBodyParts(character)
		local bodyParts = {}
		local names = {}

		if character:FindFirstChild("Torso") then
			names = {"Head", "Torso", "LeftLeg", "RightLeg", "LeftArm", "RightArm"}
		elseif character:FindFirstChild("UpperTorso") then
			names = {
				"LeftFoot", "LeftHand", "LeftLowerArm", "LeftLowerLeg",
				"LeftUpperArm", "LeftUpperLeg", "UpperTorso",
				"RightFoot", "RightHand", "RightLowerArm", "RightLowerLeg",
				"RightUpperArm", "RightUpperLeg"
			}
		end

		for _, name in ipairs(names) do
			local part = character:FindFirstChild(name)
			if part then
				table.insert(bodyParts, part)
			end
		end

		return bodyParts
	end

	-- SPIN LOOP
	local function spinCharacter(humrootpart)
		while toggle and humrootpart and humrootpart.Parent do
			humrootpart.AssemblyAngularVelocity = Vector3.new(0, spinSpeed, 0)
			task.wait(0.1)
		end

		if humrootpart then
			humrootpart.AssemblyAngularVelocity = Vector3.zero
			humrootpart.RotVelocity = Vector3.zero
		end
	end

	-- APPLY TO CHARACTER
	local function setupCharacter(character)
		-- Disconnect previous
		for _, conn in pairs(touchConnections) do
			conn:Disconnect()
		end
		touchConnections = {}

		local humrootpart = character:WaitForChild("HumanoidRootPart")
		local bodyParts = getBodyParts(character)

		for _, part in ipairs(bodyParts) do
			local conn = part.Touched:Connect(onPartTouched)
			table.insert(touchConnections, conn)
		end

		if toggle then
			humrootpart.CanCollide = true
			humrootpart.CFrame = humrootpart.CFrame * CFrame.new(0, 0.5, 0)
			spinningCoroutine = coroutine.create(function()
				spinCharacter(humrootpart)
			end)
			coroutine.resume(spinningCoroutine)
		end
	end

	-- BUTTON TOGGLE
	button.MouseButton1Up:Connect(function()
		toggle = not toggle

		local char = plr.Character
		if not char then return end

		local humrootpart = char:FindFirstChild("HumanoidRootPart")
		if not humrootpart then return end

		if toggle then
			humrootpart.CanCollide = true
			humrootpart.CFrame = humrootpart.CFrame * CFrame.new(0, 0.5, 0)
			spinningCoroutine = coroutine.create(function()
				spinCharacter(humrootpart)
			end)
			coroutine.resume(spinningCoroutine)
			buttonmodule.ColorOn(button)
			NotificationModule.Notification("Fling", "DONT USE SHIFTLOCK OR SIT!!!", 3)
		else
			humrootpart.CanCollide = false
			humrootpart.AssemblyAngularVelocity = Vector3.zero
			humrootpart.RotVelocity = Vector3.zero
			buttonmodule.ColorOff(button)
		end
	end)

	-- INITIAL SETUP
	if plr.Character then
		setupCharacter(plr.Character)
	end

	-- ON RESPAWN
	plr.CharacterAdded:Connect(setupCharacter)

end;
task.spawn(C_57);
-- StarterGui.VEXGUI.Main.VexFrame.Tabs.General.SpazButton.SpazScript
local function C_5b()
	local script = G2L["5b"];
	local button = script.Parent
	local toggle = false

	local buttonmodule = require(script.Parent.Parent.Parent.Parent.ButtonModule)
	local notifmodule = require(script.Parent.Parent.Parent.Parent.NotificationModule)

	local plr = game:GetService("Players").LocalPlayer
	local character = plr.Character or plr.CharacterAdded:Wait()
	local humrootpart = character:WaitForChild("HumanoidRootPart")

	local seizureCoroutine = nil

	-- Update reference when character resets
	plr.CharacterAdded:Connect(function(newChar)
		character = newChar
		humrootpart = newChar:WaitForChild("HumanoidRootPart")
	end)

	button.MouseButton1Up:Connect(function()
		toggle = not toggle

		if toggle then
			buttonmodule.ColorOn(button)

			seizureCoroutine = coroutine.create(function()
				while toggle do
					local jitter = Vector3.new(
						math.random(-1, 1),
						math.random(-1, 1),
						math.random(-1, 1)
					) * 0.2

					local rotation = CFrame.Angles(
						math.rad(math.random(-15, 15)),
						math.rad(math.random(-15, 15)),
						math.rad(math.random(-15, 15))
					)

					if humrootpart then
						humrootpart.CFrame = humrootpart.CFrame + jitter
						humrootpart.CFrame = humrootpart.CFrame * rotation
					end

					task.wait(0.05)
				end
			end)

			coroutine.resume(seizureCoroutine)
		else
			buttonmodule.ColorOff(button)
		end
	end)

end;
task.spawn(C_5b);
-- StarterGui.VEXGUI.Main.VexFrame.Tabs.General.FreezeButton.FreezeScript
local function C_5e()
	local script = G2L["5e"];
	local button = script.Parent
	local toggle = false

	local buttonmodule = require(script.Parent.Parent.Parent.Parent.ButtonModule)
	local notifmodule = require(script.Parent.Parent.Parent.Parent.NotificationModule)

	local plr = game:GetService("Players").LocalPlayer
	local char = plr.Character or plr.CharacterAdded:Wait()  -- Ensure the character is loaded

	-- Function to safely get HumanoidRootPart
	local function getHumanoidRootPart()
		return char:FindFirstChild("HumanoidRootPart")
	end

	local function onCharacterAdded()
		char = plr.Character or plr.CharacterAdded:Wait()

		-- Wait for HumanoidRootPart to load on respawn
		local humrootpart = getHumanoidRootPart()
		while not humrootpart do
			humrootpart = getHumanoidRootPart()
			wait(0.1)
		end
	end

	-- Listen for respawn event and rebind HumanoidRootPart
	plr.CharacterAdded:Connect(onCharacterAdded)

	button.MouseButton1Up:Connect(function()
		local humrootpart = getHumanoidRootPart()

		-- Ensure HumanoidRootPart exists before toggling
		if humrootpart then
			humrootpart.Anchored = not humrootpart.Anchored
		else
			print("HumanoidRootPart not found!")
			return
		end

		-- Handle the toggle logic for the button color and notification
		if toggle == false then
			buttonmodule.ColorOn(button)
			notifmodule.Notification("Warning", "May break w/ Fake Lag ⚠️!", 3)
		else
			buttonmodule.ColorOff(button)
		end
		toggle = not toggle
	end)

end;
task.spawn(C_5e);
-- StarterGui.VEXGUI.Main.VexFrame.Tabs.General.XRayButton.XRayScript
local function C_61()
	local script = G2L["61"];
	local player = game.Players.LocalPlayer

	-- Function to get the character and ensure it has Humanoid and HumanoidRootPart
	local function getCharacter()
		local char = player.Character or player.CharacterAdded:Wait()
		while not char:FindFirstChild("Humanoid") or not char:FindFirstChild("HumanoidRootPart") do
			char.ChildAdded:Wait()
		end
		return char
	end

	local button = script.Parent
	local toggle = false
	local buttonmodule = require(script.Parent.Parent.Parent.Parent.ButtonModule)

	button.MouseButton1Up:Connect(function()
		-- Toggle the state
		toggle = not toggle

		-- Fix button color logic
		if toggle then
			buttonmodule.ColorOn(script.Parent)
		else
			buttonmodule.ColorOff(script.Parent)
		end

		-- Get the updated character
		local character = getCharacter()

		-- Ensure we are excluding the player's HumanoidRootPart from transparency changes
		for _, v in pairs(game.Workspace:GetDescendants()) do
			if v:IsA("Model") and v.Name ~= player.Name then  -- Exclude player's model
				for _, part in pairs(v:GetChildren()) do
					if part:IsA("BasePart") then
						-- Adjust transparency of models in the workspace
						part.Transparency = toggle and 0.5 or 0
					end
				end
			elseif v:IsA("BasePart") and v.Name ~= "HumanoidRootPart" then  -- Exclude HumanoidRootPart
				-- Adjust transparency of parts in the workspace
				v.Transparency = toggle and 0.5 or 0
			end
		end

		-- Handle the transparency of the player's HumanoidRootPart separately if needed
		local humRootPart = character:FindFirstChild("HumanoidRootPart")
		if humRootPart then
			-- Don't modify the HumanoidRootPart transparency
			humRootPart.Transparency = 1  -- Set transparency as needed, or skip this step if not necessary
		end
	end)

end;
task.spawn(C_61);
-- StarterGui.VEXGUI.Main.VexFrame.Tabs.General.JumpPowerButton.JumpPowerScript
local function C_64()
	local script = G2L["64"];
	local player = game.Players.LocalPlayer
	local character = player.Character or player.CharacterAdded:Wait()

	-- Wait for necessary parts
	local function getHumanoid()
		return character:WaitForChild("Humanoid")
	end

	local function getHumanoidRootPart()
		return character:WaitForChild("HumanoidRootPart")
	end

	local humanoid = getHumanoid()
	local humRootPart = getHumanoidRootPart()

	local toggle = false

	local textboxmodule = require(script.Parent.Parent.Parent.Parent.TextBoxModule)
	local buttonmodule = require(script.Parent.Parent.Parent.Parent.ButtonModule)

	local btn = script.Parent
	local textbox = script.Parent.Parent.Parent.Parent.TextBoxs.TextBoxFrame.TextBox

	btn.MouseButton1Up:Connect(function()
		-- Toggle the effect of jump power
		toggle = not toggle

		if toggle then
			humanoid.UseJumpPower = true
			textboxmodule.IntSetProperty(humanoid, "JumpPower")
		else
			humanoid.UseJumpPower = false
		end
	end)

	-- Handle character respawn (in case character resets)
	player.CharacterAdded:Connect(function(newCharacter)
		character = newCharacter
		humanoid = getHumanoid()
		humRootPart = getHumanoidRootPart()
	end)

end;
task.spawn(C_64);
-- StarterGui.VEXGUI.Main.VexFrame.Tabs.General.WalkSpeedButton.WalkspeedScript
local function C_67()
	local script = G2L["67"];
	local player = game.Players.LocalPlayer

	-- Function to get the character and ensure it has Humanoid and HumanoidRootPart
	local function getCharacter()
		local char = player.Character or player.CharacterAdded:Wait()
		while not char:FindFirstChild("Humanoid") or not char:FindFirstChild("HumanoidRootPart") do
			char.ChildAdded:Wait()
		end
		return char
	end

	local toggle = false

	local textboxmodule = require(script.Parent.Parent.Parent.Parent.TextBoxModule)
	local buttonmodule = require(script.Parent.Parent.Parent.Parent.ButtonModule)

	local btn = script.Parent
	local textbox = script.Parent.Parent.Parent.Parent.TextBoxs.TextBoxFrame.TextBox

	-- Function to handle button click and update walk speed
	local function handleButtonClick()
		local character = getCharacter()  -- Always get the current character
		local humanoid = character:WaitForChild("Humanoid")

		-- Call the module function to set walk speed
		textboxmodule.IntSetProperty(humanoid, "WalkSpeed")
	end

	btn.MouseButton1Up:Connect(function()
		handleButtonClick()
	end)

	-- Listen for respawn event to update character and ensure functionality
	player.CharacterAdded:Connect(function()
		-- You might need to reset the state or rebind certain properties here if needed
	end)

end;
task.spawn(C_67);
-- StarterGui.VEXGUI.Main.VexFrame.Tabs.General.ToggleTexturesButton.TexturesButton
local function C_6a()
	local script = G2L["6a"];
	local Button = script.Parent
	local toggleState = false -- false = visible, true = hidden

	local buttonmodule = require(script.Parent.Parent.Parent.Parent.ButtonModule)

	-- Store original transparency so we can restore it
	local cachedAssets = {}

	local function setDecalsAndTexturesVisibility(visible)
		for _, obj in ipairs(workspace:GetDescendants()) do
			if obj:IsA("Decal") or obj:IsA("Texture") then
				-- Cache the original transparency if not already done
				if cachedAssets[obj] == nil then
					cachedAssets[obj] = obj.Transparency
				end

				-- Set transparency: 0 = visible, 1 = invisible
				obj.Transparency = visible and cachedAssets[obj] or 1
			end
		end
	end

	-- Function to re-apply state after the character respawns
	local function resetVisibilityOnRespawn()
		local character = game.Players.LocalPlayer.Character or game.Players.LocalPlayer.CharacterAdded:Wait()
		character:WaitForChild("HumanoidRootPart") -- Ensures the character has respawned
		setDecalsAndTexturesVisibility(not toggleState) -- reapply the visibility state
	end

	-- Listen for player respawn to reset the visibility correctly
	game.Players.LocalPlayer.CharacterAdded:Connect(resetVisibilityOnRespawn)

	Button.MouseButton1Click:Connect(function()
		toggleState = not toggleState
		setDecalsAndTexturesVisibility(not toggleState) -- true = show, false = hide

		if toggleState then
			buttonmodule.ColorOn(Button)
		else
			buttonmodule.ColorOff(Button)
		end
	end)

end;
task.spawn(C_6a);
-- StarterGui.VEXGUI.Main.VexFrame.Tabs.General.InfJump.InfJumpScript
local function C_6d()
	local script = G2L["6d"];
	local player = game.Players.LocalPlayer
	local character = player.Character or player.CharacterAdded:Wait()
	local userInputService = game:GetService("UserInputService")
	local toggle = false
	local jumpConnection -- Variable to store the connection
	local buttonmodule = require(script.Parent.Parent.Parent.Parent.ButtonModule)

	-- Function to handle the jump logic
	local function onJumpRequest(input)
		-- Ensure the character is properly loaded before attempting to access Humanoid
		local humanoid = character:FindFirstChild("Humanoid")
		if toggle and input.KeyCode == Enum.KeyCode.Space and humanoid then
			humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
		end
	end

	-- Handles toggling the button color and the toggle state
	script.Parent.MouseButton1Up:Connect(function()
		if toggle == false then
			toggle = true
			buttonmodule.ColorOn(script.Parent)
			jumpConnection = userInputService.InputBegan:Connect(onJumpRequest)
		else
			toggle = false
			buttonmodule.ColorOff(script.Parent)
			if jumpConnection then
				jumpConnection:Disconnect() 
			end
		end
	end)

	-- Reconnect when the character respawns
	player.CharacterAdded:Connect(function(newCharacter)
		-- Update the character reference
		character = newCharacter

		-- If toggle is on, reconnect the jump connection
		if toggle then
			jumpConnection = userInputService.InputBegan:Connect(onJumpRequest)
		end
	end)

end;
task.spawn(C_6d);
-- StarterGui.VEXGUI.Main.VexFrame.Tabs.General.SwimInAirButton.SwimInAirScript
local function C_70()
	local script = G2L["70"];
	local button = script.Parent
	local RunService = game:GetService("RunService")
	local Players = game:GetService("Players")
	local player = Players.LocalPlayer
	local terrain = workspace.Terrain

	local buttonmodule = require(script.Parent.Parent.Parent.Parent.ButtonModule)
	local notification = require(script.Parent.Parent.Parent.Parent.NotificationModule)

	local toggled = false
	local updateConnection
	local waterSize = Vector3.new(4, 7, 10)
	local waterLifetime = 1.5 -- seconds
	local activeWaterCFrames = {}

	-- Function to clear all tracked water blocks
	local function clearAllWater()
		for _, cframe in ipairs(activeWaterCFrames) do
			terrain:FillBlock(cframe, waterSize, Enum.Material.Air)
		end
		activeWaterCFrames = {}
	end

	-- Update character reference when the player resets
	player.CharacterAdded:Connect(function()
		local character = player.Character or player.CharacterAdded:Wait()
		local hrp = character:WaitForChild("HumanoidRootPart")
	end)

	button.MouseButton1Click:Connect(function()
		toggled = not toggled

		if toggled then
			updateConnection = RunService.RenderStepped:Connect(function()
				local character = player.Character or player.CharacterAdded:Wait()
				local hrp = character:FindFirstChild("HumanoidRootPart")
				buttonmodule.ColorOn(script.Parent)
				game.Workspace.Terrain.WaterReflectance = 0
				game.Workspace.Terrain.WaterTransparency = 1

				if hrp then
					local cframe = hrp.CFrame
					terrain:FillBlock(cframe, waterSize, Enum.Material.Water)
					table.insert(activeWaterCFrames, cframe)

					-- Schedule this block to be removed after waterLifetime
					task.delay(waterLifetime, function()
						terrain:FillBlock(cframe, waterSize, Enum.Material.Air)

						-- Clean up from the list
						for i, cf in ipairs(activeWaterCFrames) do
							if cf == cframe then
								table.remove(activeWaterCFrames, i)
								break
							end
						end
					end)
				end
			end)
		else
			if updateConnection then
				updateConnection:Disconnect()
				updateConnection = nil
			end
			clearAllWater()

			game.Workspace.Terrain.WaterReflectance = 1
			game.Workspace.Terrain.WaterTransparency = 0
			buttonmodule.ColorOff(script.Parent)
		end
	end)

	script.Parent.MouseButton1Up:Connect(function()
		if toggled == true then
			notification.Notification("AirSwim", "sorry about how it looks :(", 3)
		end
	end)

end;
task.spawn(C_70);
-- StarterGui.VEXGUI.Main.VexFrame.Tabs.General.GravityButton.GravityScript
local function C_73()
	local script = G2L["73"];
	local player = game.Players.LocalPlayer
	local character = player.Character or player.CharacterAdded:Wait()

	local toggle = false

	local textboxmodule = require(script.Parent.Parent.Parent.Parent.TextBoxModule)
	local buttonmodule = require(script.Parent.Parent.Parent.Parent.ButtonModule)

	local btn = script.Parent
	local textbox = script.Parent.Parent.Parent.Parent.TextBoxs.TextBoxFrame.TextBox


	btn.MouseButton1Up:Connect(function()
		textboxmodule.IntSetProperty(workspace, "Gravity")
	end)
end;
task.spawn(C_73);
-- StarterGui.VEXGUI.Main.VexFrame.Tabs.General.SitButton.SitScript
local function C_76()
	local script = G2L["76"];
	local plr = game:GetService("Players").LocalPlayer
	local currentCharacter = plr.Character or plr.CharacterAdded:Wait()

	-- Always get updated character after a reset
	plr.CharacterAdded:Connect(function(char)
		currentCharacter = char
	end)

	script.Parent.MouseButton1Up:Connect(function()
		local hum = currentCharacter:FindFirstChild("Humanoid")
		if hum then
			hum.Sit = not hum.Sit
		end
	end)

end;
task.spawn(C_76);
-- StarterGui.VEXGUI.Main.VexFrame.Tabs.General.ParalyzeButton.ParalyzeScript
local function C_79()
	local script = G2L["79"];
	local button = script.Parent
	local toggle = false

	local buttonmodule = require(script.Parent.Parent.Parent.Parent.ButtonModule)
	local notifmodule = require(script.Parent.Parent.Parent.Parent.NotificationModule)

	local plr = game:GetService("Players").LocalPlayer
	local RunService = game:GetService("RunService")

	-- Function to get the character and ensure it has Humanoid and HumanoidRootPart
	local function getCharacter()
		local char = plr.Character or plr.CharacterAdded:Wait()
		while not char:FindFirstChild("Humanoid") or not char:FindFirstChild("HumanoidRootPart") do
			char.ChildAdded:Wait()
		end
		return char
	end

	local function onCharacterAdded()
		local char = getCharacter()
		local hum = char:FindFirstChild("Humanoid")
		local humrootpart = char:FindFirstChild("HumanoidRootPart")

		-- Check if character is R6 or R15 by looking for "UpperTorso" or "Torso"
		local torso
		if char:FindFirstChild("UpperTorso") then
			torso = char:FindFirstChild("UpperTorso") -- R15 has UpperTorso
		elseif char:FindFirstChild("Torso") then
			torso = char:FindFirstChild("Torso") -- R6 has Torso
		end

		-- Button click event
		button.MouseButton1Up:Connect(function()
			if toggle == false then
				buttonmodule.ColorOn(button)

				if hum and humrootpart and torso then
					-- Create a BodyVelocity object to apply an upward force
					local bodyVelocity = Instance.new("BodyVelocity")
					bodyVelocity.MaxForce = Vector3.new(100000, 100000, 100000) -- High force to ensure movement
					bodyVelocity.Velocity = Vector3.new(0, 50, 0)  -- Apply upward velocity
					bodyVelocity.Parent = humrootpart

					-- Wait for the player to reach 5 studs above their starting position
					local initialHeight = humrootpart.Position.Y
					local reachedHeight = false
					local heartbeatConnection

					heartbeatConnection = RunService.Heartbeat:Connect(function()
						if humrootpart.Position.Y - initialHeight >= 5 then
							reachedHeight = true
						end
					end)

					-- Wait until the height is reached
					while not reachedHeight do
						wait(0.1)
					end

					-- Once the player reaches the target height, stop them by enabling PlatformStand
					hum.PlatformStand = true

					-- Remove the BodyVelocity to stop any further motion
					bodyVelocity:Destroy()
					heartbeatConnection:Disconnect() -- Stop the heartbeat connection
				end
			else
				-- If toggled off, disable PlatformStand
				if hum then
					hum.PlatformStand = false
				end
				buttonmodule.ColorOff(button)
			end

			toggle = not toggle
		end)
	end

	-- Connect to CharacterAdded to handle respawn
	plr.CharacterAdded:Connect(onCharacterAdded)

	-- Initialize when the script first runs
	if plr.Character then
		onCharacterAdded()
	end

end;
task.spawn(C_79);
-- StarterGui.VEXGUI.Main.VexFrame.Tabs.General.HelicopterButton.HelicopterScript
local function C_7c()
	local script = G2L["7c"];
	local button = script.Parent
	local toggle = false

	local buttonmodule = require(script.Parent.Parent.Parent.Parent.ButtonModule)
	local notifmodule = require(script.Parent.Parent.Parent.Parent.NotificationModule)

	local plr = game:GetService("Players").LocalPlayer
	local humrootpart
	local spinConnection
	local helicopteraudio

	-- Function to handle button click and toggle the spin effect
	local function initCharacter()
		-- Ensure the character and HumanoidRootPart are loaded
		local char = plr.Character or plr.CharacterAdded:Wait()
		humrootpart = char:WaitForChild("HumanoidRootPart")
	end

	button.MouseButton1Up:Connect(function()
		toggle = not toggle

		if toggle then
			buttonmodule.ColorOn(button)
			humrootpart.Anchored = true

			local spinAngle = 0

			-- Connect to Heartbeat to handle continuous spin and upward movement
			spinConnection = game:GetService("RunService").Heartbeat:Connect(function(dt)
				spinAngle += math.rad(720) * dt -- Fast spin

				local pos = humrootpart.Position
				local newY = pos.Y + 15 * dt -- Move upward

				-- Set the new position and spin angle
				humrootpart.CFrame = CFrame.new(pos.X, newY, pos.Z)
					* CFrame.Angles(math.rad(-90), 0, 0)  -- Lie face down
					* CFrame.Angles(0, 0, spinAngle)     -- Spin like rotor
			end)

			-- Add helicopter sound effect
			helicopteraudio = Instance.new("Sound", humrootpart)
			helicopteraudio.SoundId = "rbxassetid://686885384"
			helicopteraudio.Looped = true
			helicopteraudio:Play()
			helicopteraudio.Name = "helicopteraudio"
		else
			-- Reset button color and stop effect
			buttonmodule.ColorOff(button)

			-- Destroy the sound when toggled off
			if helicopteraudio then
				helicopteraudio:Destroy()
				helicopteraudio = nil
			end

			-- Disconnect spin connection and reset Anchored state
			if spinConnection then
				spinConnection:Disconnect()
				spinConnection = nil
			end

			humrootpart.Anchored = false
		end
	end)

	-- Reattach the connection if the character respawns
	plr.CharacterAdded:Connect(function()
		-- Cleanup any previous connections and effects
		if spinConnection then
			spinConnection:Disconnect()
			spinConnection = nil
		end
		if helicopteraudio then
			helicopteraudio:Destroy()
			helicopteraudio = nil
		end

		-- Re-initialize HumanoidRootPart after respawn
		initCharacter()
	end)

	-- Initialize HumanoidRootPart for the first time
	initCharacter()

end;
task.spawn(C_7c);
-- StarterGui.VEXGUI.Main.VexFrame.Tabs.General.MoonwalkButton.MoonwalkScript
local function C_7f()
	local script = G2L["7f"];
	local button = script.Parent
	local toggle = false

	local buttonmodule = require(script.Parent.Parent.Parent.Parent.ButtonModule)
	local notifmodule = require(script.Parent.Parent.Parent.Parent.NotificationModule)

	local plr = game:GetService("Players").LocalPlayer

	-- Function to get the character and ensure it's loaded
	local function getCharacter()
		local char = plr.Character or plr.CharacterAdded:Wait()
		while not char:FindFirstChild("Humanoid") or not char:FindFirstChild("HumanoidRootPart") do
			char.ChildAdded:Wait()
		end
		return char
	end

	-- Initial character setup
	local char = getCharacter()

	-- Function to handle character respawn
	plr.CharacterAdded:Connect(function()
		char = getCharacter()  -- Update character reference
	end)

	button.MouseButton1Up:Connect(function()
		local hum = char:WaitForChild("Humanoid")
		if toggle == false then
			if hum then
				buttonmodule.ColorOn(button)
				hum.AutoRotate = false
				notifmodule.Notification("Warning", "MOVE BACKWARDS ‼️", 3)
			end
		else
			if hum then
				hum.AutoRotate = true
				buttonmodule.ColorOff(button)
			end
		end

		toggle = not toggle
	end)

end;
task.spawn(C_7f);
-- StarterGui.VEXGUI.Main.VexFrame.Tabs.General.SeizureButton.SeizureScript
local function C_82()
	local script = G2L["82"];
	local button = script.Parent
	local toggle = false

	local buttonmodule = require(script.Parent.Parent.Parent.Parent.ButtonModule)
	local notifmodule = require(script.Parent.Parent.Parent.Parent.NotificationModule)

	local plr = game:GetService("Players").LocalPlayer

	-- Function to get the character and ensure it has Humanoid and HumanoidRootPart
	local function getCharacter()
		local char = plr.Character or plr.CharacterAdded:Wait()
		while not char:FindFirstChild("Humanoid") or not char:FindFirstChild("HumanoidRootPart") do
			char.ChildAdded:Wait()
		end
		return char
	end

	local function resetCharacterReferences()
		-- Wait until character is fully loaded
		local char = getCharacter()
		local hum = char:WaitForChild("Humanoid")
		local humrootpart = char:WaitForChild("HumanoidRootPart")
		return hum, humrootpart
	end

	-- Seizure coroutine variable
	local seizureCoroutine = nil

	-- Function to stop seizure effect if toggle is off
	local function stopSeizure()
		if seizureCoroutine then
			-- Stop the coroutine
			coroutine.close(seizureCoroutine)
			seizureCoroutine = nil
		end
	end

	-- Initial character references
	local hum, humrootpart = resetCharacterReferences()

	button.MouseButton1Up:Connect(function()
		toggle = not toggle

		-- If the character references are invalid, reinitialize them
		if not hum or not humrootpart then
			hum, humrootpart = resetCharacterReferences()
		end

		if toggle then
			buttonmodule.ColorOn(button)
			hum.PlatformStand = true

			-- Create and start the seizure coroutine
			seizureCoroutine = coroutine.create(function()
				while toggle do
					-- Random jitter
					local jitter = Vector3.new(
						math.random(-1, 1),
						math.random(-1, 1),
						math.random(-1, 1)
					) * 0.3

					-- Random rotation
					local rotation = CFrame.Angles(
						math.rad(math.random(-15, 15)),
						math.rad(math.random(-15, 15)),
						math.rad(math.random(-15, 15))
					)

					-- Apply jitter and rotation to HumanoidRootPart
					humrootpart.CFrame = humrootpart.CFrame + jitter
					humrootpart.CFrame = humrootpart.CFrame * rotation

					-- Small delay for jittering effect
					task.wait(0.05)
				end
			end)

			-- Resume the coroutine to start jittering
			coroutine.resume(seizureCoroutine)
		else
			-- When toggled off, stop the seizure effect and reset PlatformStand
			stopSeizure()
			buttonmodule.ColorOff(button)
			hum.PlatformStand = false
		end
	end)

	-- Handle character respawn to ensure proper setup
	plr.CharacterAdded:Connect(function()
		-- Reinitialize character references upon respawn
		hum, humrootpart = resetCharacterReferences()
	end)

end;
task.spawn(C_82);
-- StarterGui.VEXGUI.Main.VexFrame.Tabs.General.NoclipButton.NoclipScript
local function C_85()
	local script = G2L["85"];
	local textButton = script.Parent
	local player = game.Players.LocalPlayer
	local char = player.Character or player.CharacterAdded:Wait()
	-- Ensure the character is properly loaded
	local function getCharacter()
		while not char:FindFirstChild("Humanoid") or not char:FindFirstChild("HumanoidRootPart") do
			char.ChildAdded:Wait()
		end
		return char
	end

	local buttonmodule = require(script.Parent.Parent.Parent.Parent.ButtonModule)

	local isNoclipping = false
	local previousCollisionState = {}

	-- Function to save and disable collisions
	local function enableNoclip()
		for _, part in pairs(char:GetDescendants()) do
			if part:IsA("BasePart") then
				previousCollisionState[part] = part.CanCollide
				part.CanCollide = false
			end
		end
	end

	-- Function to restore collisions
	local function disableNoclip()
		for part, state in pairs(previousCollisionState) do
			if part:IsA("BasePart") then
				part.CanCollide = state
			end
		end
		previousCollisionState = {}  -- Reset the stored states
	end

	-- Update character on respawn
	local character = getCharacter()
	player.CharacterAdded:Connect(function()
		character = getCharacter()  -- Update character reference
	end)

	textButton.MouseButton1Click:Connect(function()
		isNoclipping = not isNoclipping

		if isNoclipping then
			buttonmodule.ColorOn(textButton)
			enableNoclip()
		else
			buttonmodule.ColorOff(textButton)
			disableNoclip()
		end
	end)

end;
task.spawn(C_85);
-- StarterGui.VEXGUI.Main.VexFrame.Tabs.General.FlyButton.FlyScript
local function C_88()
	local script = G2L["88"];
	function Fly()
		local plr = game.Players.LocalPlayer
		local mouse = plr:GetMouse()
		local localplayer = plr

		if workspace:FindFirstChild("Core") then
			workspace.Core:Destroy()
		end

		local Core = Instance.new("Part")
		Core.CanCollide = false
		Core.Name = "Core"
		Core.Size = Vector3.new(0.05, 0.05, 0.05)

		spawn(function()
			Core.Parent = workspace
			local Weld = Instance.new("Weld", Core)
			Weld.Part0 = Core

			-- Dynamically check if the player is R6 or R15
			local torsoPart = localplayer.Character:FindFirstChild("UpperTorso") or localplayer.Character:FindFirstChild("Torso")
			Weld.Part1 = torsoPart
			Weld.C0 = CFrame.new(0, 0, 0)
		end)

		workspace:WaitForChild("Core")

		local torso = workspace.Core
		local flying = true
		local speed = 10
		local keys = {a = false, d = false, w = false, s = false}
		local e1, e2

		local function start()
			local pos = Instance.new("BodyPosition", torso)
			local gyro = Instance.new("BodyGyro", torso)
			pos.Name = "EPIXPOS"
			pos.maxForce = Vector3.new(math.huge, math.huge, math.huge)
			pos.position = torso.Position
			gyro.maxTorque = Vector3.new(9e9, 9e9, 9e9)
			gyro.cframe = torso.CFrame

			repeat
				wait()
				localplayer.Character.Humanoid.PlatformStand = true
				local new = gyro.cframe - gyro.cframe.p + pos.position

				if not keys.w and not keys.s and not keys.a and not keys.d then
					speed = 5
				end

				if keys.w then
					new = new + workspace.CurrentCamera.CFrame.LookVector * speed
				end

				if keys.s then
					new = new - workspace.CurrentCamera.CFrame.LookVector * speed
				end

				if keys.d then
					new = new * CFrame.new(speed, 0, 0)
				end

				if keys.a then
					new = new * CFrame.new(-speed, 0, 0)
				end

				if speed > 10 then
					speed = 5
				end

				pos.position = new.p

				if keys.w then
					gyro.cframe = workspace.CurrentCamera.CFrame * CFrame.Angles(-math.rad(speed * 0), 0, 0)
				elseif keys.s then
					gyro.cframe = workspace.CurrentCamera.CFrame * CFrame.Angles(math.rad(speed * 0), 0, 0)
				else
					gyro.cframe = workspace.CurrentCamera.CFrame
				end
			until flying == false

			if gyro then gyro:Destroy() end
			if pos then pos:Destroy() end
			flying = false
			localplayer.Character.Humanoid.PlatformStand = false
			speed = 10
		end

		e1 = mouse.KeyDown:Connect(function(key)
			if not torso or not torso.Parent then 
				flying = false 
				e1:Disconnect() 
				e2:Disconnect() 
				return 
			end

			if key == "w" then
				keys.w = true
			elseif key == "s" then
				keys.s = true
			elseif key == "a" then
				keys.a = true
			elseif key == "d" then
				keys.d = true
			elseif key == "x" then
				if flying == true then
					flying = false
				else
					flying = true
					start()
				end
			end
		end)

		e2 = mouse.KeyUp:Connect(function(key)
			if key == "w" then
				keys.w = false
			elseif key == "s" then
				keys.s = false
			elseif key == "a" then
				keys.a = false
			elseif key == "d" then
				keys.d = false
			end
		end)

		start()
	end

	local player = game.Players.LocalPlayer
	local notifmodule = require(script.Parent.Parent.Parent.Parent.NotificationModule)
	local debounce = false

	script.Parent.MouseButton1Up:Connect(function()
		if not debounce then
			Fly()
			notifmodule.Notification("Warning", "After reset, may need to click button again.", 3)
			debounce = true
		end
	end)

	local function onCharacterAdded(char)
		debounce = false
		char:WaitForChild("Humanoid").Died:Connect(function()
			debounce = false
			player.Character.Humanoid.PlatformStand = false
		end)
	end

	-- Initial connection for current character
	if player.Character then
		onCharacterAdded(player.Character)
	end

	-- Reconnect on respawn
	player.CharacterAdded:Connect(onCharacterAdded)

end;
task.spawn(C_88);
-- StarterGui.VEXGUI.Main.VexFrame.Tabs.General.AntiVoidButton.AntivoidScript
local function C_8b()
	local script = G2L["8b"];
	local button = script.Parent
	local Players = game:GetService("Players")
	local RunService = game:GetService("RunService")
	local TweenService = game:GetService("TweenService")

	local buttonmodule = require(script.Parent.Parent.Parent.Parent.ButtonModule)

	local player = Players.LocalPlayer
	local lastSafeCFrame = nil
	local fallThresholdY = -50
	local antiVoidEnabled = false
	local connection = nil

	local debounceTime = 2 -- Time in seconds between showing warnings
	local canShowWarning = true -- Flag for controlling the warning debounce

	-- UI Setup
	local function createUI()
		local screenGui = Instance.new("ScreenGui")
		screenGui.Name = "AntiVoidUI"
		screenGui.ResetOnSpawn = false
		screenGui.Parent = player:WaitForChild("PlayerGui")

		local warning = Instance.new("TextLabel")
		warning.Name = "VoidWarning"
		warning.Size = UDim2.new(0.5, 0, 0.1, 0)
		warning.Position = UDim2.new(0.25, 0, 0.4, 0)
		warning.BackgroundTransparency = 0.4
		warning.BackgroundColor3 = Color3.new(0, 0, 0)
		warning.TextColor3 = Color3.new(1, 0.2, 0.2)
		warning.Font = Enum.Font.GothamBold
		warning.TextScaled = true
		warning.Text = "Void Detected! Returning to Safe Ground..."
		warning.Visible = false
		warning.Parent = screenGui

		return warning
	end

	local warningLabel = createUI()

	local function showWarning()
		if not canShowWarning then return end

		canShowWarning = false
		warningLabel.Visible = true
		warningLabel.TextTransparency = 1
		warningLabel.TextStrokeTransparency = 1

		local tweenIn = TweenService:Create(warningLabel, TweenInfo.new(0.3), {
			TextTransparency = 0,
			TextStrokeTransparency = 0.3
		})

		local tweenOut = TweenService:Create(warningLabel, TweenInfo.new(0.5), {
			TextTransparency = 1,
			TextStrokeTransparency = 1
		})

		tweenIn:Play()
		tweenIn.Completed:Wait()
		wait(1)
		tweenOut:Play()
		tweenOut.Completed:Wait()
		warningLabel.Visible = false

		-- Reset debounce after a delay
		wait(debounceTime)
		canShowWarning = true
	end

	local function enableAntiVoid(character)
		local humanoid = character:WaitForChild("Humanoid", 5)
		local rootPart = character:WaitForChild("HumanoidRootPart", 5)

		if not humanoid or not rootPart then return end

		local raycastParams = RaycastParams.new()
		raycastParams.FilterDescendantsInstances = {character}
		raycastParams.FilterType = Enum.RaycastFilterType.Blacklist

		connection = RunService.RenderStepped:Connect(function()
			if not antiVoidEnabled then return end

			-- Raycast downward to check if feet are over ground
			local rayOrigin = rootPart.Position
			local rayDirection = Vector3.new(0, -4, 0)

			local result = workspace:Raycast(rayOrigin, rayDirection, raycastParams)
			if result and humanoid:GetState() ~= Enum.HumanoidStateType.Freefall then
				lastSafeCFrame = rootPart.CFrame
			end

			-- Void detection and recovery
			if humanoid:GetState() == Enum.HumanoidStateType.Freefall and rootPart.Position.Y < fallThresholdY then
				if lastSafeCFrame then
					rootPart.CFrame = lastSafeCFrame + Vector3.new(0, 3, 0)
					showWarning()
					warn("Void detected — Teleported to grounded position.")
				end
			end
		end)
	end

	local function onCharacterAdded(char)
		if antiVoidEnabled then
			enableAntiVoid(char)
		end
	end

	if player.Character then
		onCharacterAdded(player.Character)
	end

	player.CharacterAdded:Connect(onCharacterAdded)
	local notificationmodule = require(script.Parent.Parent.Parent.Parent.NotificationModule)

	-- Toggle system
	button.MouseButton1Click:Connect(function()
		antiVoidEnabled = not antiVoidEnabled


		if antiVoidEnabled then
			warn("Anti-Void Enabled")
			notificationmodule.Notification("WARNING ⚠️", "FLASH WARNING (Use fly incase‼️)", 3)
			buttonmodule.ColorOn(script.Parent)
			if player.Character then
				enableAntiVoid(player.Character)
			end
		else
			warn("Anti-Void Disabled")
			buttonmodule.ColorOff(script.Parent)
			if connection then
				connection:Disconnect()
				connection = nil
			end
		end
	end)

end;
task.spawn(C_8b);
-- StarterGui.VEXGUI.Main.VexFrame.Tabs.General.ChatSpam.ChatSpamScript
local function C_8e()
	local script = G2L["8e"];
	local player = game.Players.LocalPlayer
	local character = player.Character or player.CharacterAdded:Wait()
	local humanoid = character:WaitForChild("Humanoid")

	local toggle = false

	local textboxmodule = require(script.Parent.Parent.Parent.Parent.TextBoxModule)
	local buttonmodule = require(script.Parent.Parent.Parent.Parent.ButtonModule)

	local btn = script.Parent
	local textbox = script.Parent.Parent.Parent.Parent.TextBoxs.TextBoxFrame.TextBox

	local TextChatService = game:GetService("TextChatService")
	local chatChannel = TextChatService:WaitForChild("TextChannels"):WaitForChild("RBXGeneral")

	-- Toggle on button click
	btn.MouseButton1Up:Connect(function()
		toggle = not toggle
		btn.Text = toggle and "Stop Spamming" or "Chat Spam"
		buttonmodule.ColorOff(btn)

		if toggle then

			textboxmodule.SetProperty(textbox, "Text")
			textbox.Text = ""
			buttonmodule.ColorOn(btn)
		end
	end)

	-- Use TextBoxModule to allow editing the textbox


	-- Repeating task to send messages
	task.spawn(function()
		while true do
			if toggle then
				local message = textbox.Text
				if message and message ~= "" then
					chatChannel:SendAsync(message)
				end
			end
			task.wait(0.4) -- adjust for spam rate
		end
	end)

end;
task.spawn(C_8e);
-- StarterGui.VEXGUI.Main.VexFrame.Tabs.General.ChatlogButton.ChatlogScriptToggle
local function C_91()
	local script = G2L["91"];
	local Players = game:GetService("Players")
	local RunService = game:GetService("RunService")
	local player = Players.LocalPlayer
	local buttonmodule = require(script.Parent.Parent.Parent.Parent.ButtonModule)
	local btn = script.Parent

	local toggled = false

	local chatlogframe = script.Parent.Parent.Parent.Parent.Parent.Parent.ChatLog

	btn.MouseButton1Up:Connect(function()
		chatlogframe.Visible = not chatlogframe.Visible

		if chatlogframe.Visible then
			buttonmodule.ColorOn(script.Parent)
		else
			buttonmodule.ColorOff(script.Parent)
		end
	end)

end;
task.spawn(C_91);
-- StarterGui.VEXGUI.Main.VexFrame.Tabs.General.ClickToMove.ClickScript
local function C_94()
	local script = G2L["94"];
	local player = game.Players.LocalPlayer
	local mouse = player:GetMouse()
	local button = script.Parent
	local toggle = false

	local module = require(script.Parent.Parent.Parent.Parent.ButtonModule)

	-- Toggle Teleport Mode
	button.MouseButton1Click:Connect(function()
		toggle = not toggle
		if toggle then
			module.ColorOn(button)
		else
			module.ColorOff(button)
		end
	end)

	-- Teleport Logic
	mouse.Button1Down:Connect(function()
		if toggle then
			local char = player.Character or player.CharacterAdded:Wait()
			local hrp = char:WaitForChild("HumanoidRootPart")
			local pos = mouse.Hit and mouse.Hit.Position
			if pos then
				hrp.CFrame = CFrame.new(pos + Vector3.new(0, 3, 0))
			end
		end
	end)

end;
task.spawn(C_94);
-- StarterGui.VEXGUI.Main.VexFrame.Tabs.General.DashButton.DashScript
local function C_97()
	local script = G2L["97"];
	-- LocalScript in your TextButton

	local button = script.Parent
	local player = game.Players.LocalPlayer
	local character = player.Character or player.CharacterAdded:Wait()
	local toggle = false
	local dashDistance = 10

	local buttonmodule = require(script.Parent.Parent.Parent.Parent.ButtonModule)

	-- Update character on respawn
	player.CharacterAdded:Connect(function(char)
		character = char
	end)

	-- Toggle system for enabling and disabling dash
	button.MouseButton1Up:Connect(function()
		toggle = not toggle

		if toggle then
			buttonmodule.ColorOn(button)
		else
			buttonmodule.ColorOff(button)
		end
	end)

	-- Dash function
	local function dash()
		if toggle and character and character:FindFirstChild("HumanoidRootPart") then
			local camera = workspace.CurrentCamera
			local dashDirection = camera.CFrame.LookVector
			local dashPosition = character.HumanoidRootPart.Position + dashDirection * dashDistance

			character:SetPrimaryPartCFrame(CFrame.new(dashPosition))
		end
	end

	-- Detect Q key
	local UserInputService = game:GetService("UserInputService")

	UserInputService.InputBegan:Connect(function(input, gameProcessed)
		if gameProcessed then return end
		if input.KeyCode == Enum.KeyCode.Q then
			dash()
		end
	end)

end;
task.spawn(C_97);
-- StarterGui.VEXGUI.Main.VexFrame.Tabs.General.ESP.ESPscriptnew
local function C_9a()
	local script = G2L["9a"];
	-- Fancy ESP Toggle Button Script with Username, Distance, and Toggle GUI
	-- Must be a LocalScript inside a TextButton

	local button = script.Parent
	local Players = game:GetService("Players")
	local RunService = game:GetService("RunService")
	local localPlayer = Players.LocalPlayer
	local buttonmodule = require(script.Parent.Parent.Parent.Parent.ButtonModule)

	-- Global ESP API
	_G.FancyESP = _G.FancyESP or {}
	local ESP = _G.FancyESP

	ESP.settings = setmetatable({
		enabled = false,
		boxColor = Color3.fromRGB(255, 0, 0),
		showUsername = true,
		showDistance = true
	}, {
		__index = function(t, k) return rawget(t, k) end,
		__newindex = function(t, k, v) rawset(t, k, v) end
	})

	local espTargets = {}
	local lastUpdated = 0
	local connection

	local function isTargetModel(model)
		return model:IsA("Model") and model:FindFirstChild("Humanoid") and model:FindFirstChild("HumanoidRootPart")
	end

	local function createESP(model)
		if espTargets[model] then return end

		local root = model:FindFirstChild("HumanoidRootPart")
		if not root then
			model.ChildAdded:Once(function(child)
				if child.Name == "HumanoidRootPart" and isTargetModel(model) then
					createESP(model)
				end
			end)
			return
		end

		local box = Instance.new("BoxHandleAdornment")
		box.Name = "FancyESPBox"
		box.Adornee = root
		box.Size = Vector3.new(4, 6, 1)
		box.Color3 = ESP.settings.boxColor
		box.AlwaysOnTop = true
		box.ZIndex = 5
		box.Transparency = 0.5
		box.Parent = workspace

		local billboard = Instance.new("BillboardGui")
		billboard.Name = "FancyESPLabel"
		billboard.Adornee = root
		billboard.Size = UDim2.new(0, 100, 0, 50)
		billboard.StudsOffset = Vector3.new(0, 5, 0)
		billboard.AlwaysOnTop = true
		billboard.Parent = workspace

		local nameLabel = Instance.new("TextLabel")
		nameLabel.Name = "Name"
		nameLabel.Size = UDim2.new(1, 0, 0.5, 0)
		nameLabel.Position = UDim2.new(0, 0, 0, 0)
		nameLabel.BackgroundTransparency = 1
		nameLabel.TextSize = 26
		nameLabel.Font = Enum.Font.SourceSansBold
		nameLabel.TextColor3 = Color3.new(1, 1, 1)
		nameLabel.TextStrokeTransparency = 0.5
		nameLabel.Text = model.Name
		nameLabel.Parent = billboard

		local distanceLabel = Instance.new("TextLabel")
		distanceLabel.Name = "Distance"
		distanceLabel.Size = UDim2.new(1, 0, 0.5, 0)
		distanceLabel.Position = UDim2.new(0, 0, 0.5, 0)
		distanceLabel.BackgroundTransparency = 1
		distanceLabel.TextSize = 18
		distanceLabel.Font = Enum.Font.SourceSans
		distanceLabel.TextColor3 = Color3.fromRGB(180, 255, 180)
		distanceLabel.TextStrokeTransparency = 0.7
		distanceLabel.Text = ""
		distanceLabel.Parent = billboard

		local humanoid = model:FindFirstChild("Humanoid")
		if humanoid then
			humanoid.Died:Connect(function()
				if espTargets[model] then
					espTargets[model].box:Destroy()
					espTargets[model].label:Destroy()
					espTargets[model] = nil
				end
			end)

			model:WaitForChild("HumanoidRootPart").AncestryChanged:Connect(function(_, parent)
				if not parent and espTargets[model] then
					espTargets[model].box:Destroy()
					espTargets[model].label:Destroy()
					espTargets[model] = nil
				end
			end)
		end

		espTargets[model] = {
			box = box,
			label = billboard,
			distance = distanceLabel,
			root = root,
			humanoid = humanoid,
			nameLabel = nameLabel
		}
	end

	function ESP:Destroy()
		for _, data in pairs(espTargets) do
			if data.box then data.box:Destroy() end
			if data.label then data.label:Destroy() end
		end
		espTargets = {}
	end

	local function startESP()
		connection = RunService.RenderStepped:Connect(function()
			if tick() - lastUpdated > 0.5 then
				lastUpdated = tick()
				for _, player in ipairs(Players:GetPlayers()) do
					if player ~= localPlayer and player.Character then
						local root = player.Character:FindFirstChild("HumanoidRootPart")
						if root and (localPlayer.Character.HumanoidRootPart.Position - root.Position).Magnitude < 100 then
							createESP(player.Character)
						end
					end
				end
				for _, model in ipairs(workspace:GetDescendants()) do
					if isTargetModel(model) and not Players:GetPlayerFromCharacter(model) then
						local root = model:FindFirstChild("HumanoidRootPart")
						if root and (localPlayer.Character.HumanoidRootPart.Position - root.Position).Magnitude < 100 then
							createESP(model)
						end
					end
				end
				for model, data in pairs(espTargets) do
					if model and data.root and localPlayer.Character and localPlayer.Character:FindFirstChild("HumanoidRootPart") then
						local distance = (localPlayer.Character.HumanoidRootPart.Position - data.root.Position).Magnitude
						data.distance.Text = ESP.settings.showDistance and math.floor(distance) .. " studs" or ""
						local scale = math.clamp(50 / distance, 0.5, 1.5)
						data.label.Size = UDim2.new(0, 100 * scale, 0, 50 * scale)
						data.nameLabel.Text = ESP.settings.showUsername and model.Name or ""
					end
				end
			end
		end)
	end

	-- Cleanup on character death
	local function onCharacterAdded(char)
		local hum = char:WaitForChild("Humanoid")
		hum.Died:Connect(function()
			ESP:Destroy()
			if connection then connection:Disconnect() end
			espGui.Enabled = false
			buttonmodule.ColorOff(button)
			ESP.settings.enabled = false
		end)
	end
	if localPlayer.Character then onCharacterAdded(localPlayer.Character) end
	localPlayer.CharacterAdded:Connect(onCharacterAdded)

	-- GUI controls
	local espGui = Instance.new("ScreenGui")
	espGui.Name = "ESPSettingsGui"
	espGui.Parent = localPlayer:WaitForChild("PlayerGui")
	espGui.Enabled = false

	local frame = Instance.new("Frame")
	frame.Size = UDim2.new(0, 200, 0, 150)
	frame.Position = UDim2.new(0, 10, 0, 10)
	frame.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
	frame.BackgroundTransparency = 0.3
	frame.Parent = espGui

	local usernameToggle = Instance.new("TextButton")
	usernameToggle.Size = UDim2.new(0, 180, 0, 30)
	usernameToggle.Position = UDim2.new(0, 10, 0, 10)
	usernameToggle.Text = "Username: ON"
	usernameToggle.TextColor3 = Color3.fromRGB(255, 255, 255)
	usernameToggle.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
	usernameToggle.Parent = frame

	local distanceToggle = Instance.new("TextButton")
	distanceToggle.Size = UDim2.new(0, 180, 0, 30)
	distanceToggle.Position = UDim2.new(0, 10, 0, 50)
	distanceToggle.Text = "Distance: ON"
	distanceToggle.TextColor3 = Color3.fromRGB(255, 255, 255)
	distanceToggle.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
	distanceToggle.Parent = frame

	usernameToggle.MouseButton1Click:Connect(function()
		ESP.settings.showUsername = not ESP.settings.showUsername
		usernameToggle.Text = ESP.settings.showUsername and "Username: ON" or "Username: OFF"
	end)

	distanceToggle.MouseButton1Click:Connect(function()
		ESP.settings.showDistance = not ESP.settings.showDistance
		distanceToggle.Text = ESP.settings.showDistance and "Distance: ON" or "Distance: OFF"
	end)

	button.MouseButton1Click:Connect(function()
		ESP.settings.enabled = not ESP.settings.enabled
		if ESP.settings.enabled then
			startESP()
			buttonmodule.ColorOn(button)
			espGui.Enabled = true
		else
			ESP:Destroy()
			if connection then connection:Disconnect() end
			buttonmodule.ColorOff(button)
			espGui.Enabled = false
		end
	end)
end;
task.spawn(C_9a);
-- StarterGui.VEXGUI.Main.VexFrame.Tabs.General.FakeLagButton.FakeLagScript
local function C_9e()
	local script = G2L["9e"];
	local Players = game:GetService("Players")
	local RunService = game:GetService("RunService")
	local player = Players.LocalPlayer
	local buttonmodule = require(script.Parent.Parent.Parent.Parent.ButtonModule)
	local btn = script.Parent

	local toggled = false
	local oldGravity = workspace.Gravity
	local renderConnection
	local mainLoop

	-- Store the current character reference and update on reset
	local character = player.Character or player.CharacterAdded:Wait()
	player.CharacterAdded:Connect(function(char)
		character = char
	end)

	btn.MouseButton1Up:Connect(function()
		toggled = not toggled

		if toggled then
			buttonmodule.ColorOn(btn)
			workspace.Gravity = 100

			mainLoop = task.spawn(function()
				while toggled do
					local char = character
					local hum = char and char:FindFirstChild("Humanoid")
					local hrp = char and char:FindFirstChild("HumanoidRootPart")

					if hum and hrp then
						local lastPos = hrp.Position

						task.wait(math.random(0.4, 0.9))
						hrp.Anchored = not hrp.Anchored

						if math.random() < 0.05 then
							task.wait(0.4)
							hrp.CFrame = CFrame.new(lastPos)
						end

						if renderConnection then
							renderConnection:Disconnect()
						end

						renderConnection = RunService.RenderStepped:Connect(function()
							if hum:GetState() == Enum.HumanoidStateType.Jumping or hum:GetState() == Enum.HumanoidStateType.Freefall then
								if math.random() < 0.6 then
									hrp.Anchored = not hrp.Anchored
								end
							end
						end)
					end

					task.wait(math.random(0.1, 0.3))
				end
			end)
		else
			buttonmodule.ColorOff(btn)

			if renderConnection then
				renderConnection:Disconnect()
				renderConnection = nil
			end

			if mainLoop then
				task.cancel(mainLoop)
				mainLoop = nil
			end

			local char = character
			local hrp = char and char:FindFirstChild("HumanoidRootPart")
			if hrp then
				hrp.Anchored = false
			end

			workspace.Gravity = oldGravity
		end
	end)

end;
task.spawn(C_9e);
-- StarterGui.VEXGUI.Main.VexFrame.Tabs.General.FieldOfViewButton.FOVscript
local function C_a1()
	local script = G2L["a1"];
	local player = game.Players.LocalPlayer

	local textboxmodule = require(script.Parent.Parent.Parent.Parent.TextBoxModule)
	local buttonmodule = require(script.Parent.Parent.Parent.Parent.ButtonModule)

	local btn = script.Parent
	local textbox = script.Parent.Parent.Parent.Parent.TextBoxs.TextBoxFrame.TextBox

	btn.MouseButton1Up:Connect(function()
		local camera = workspace.CurrentCamera
		if camera then
			textboxmodule.IntSetProperty(camera, "FieldOfView")
		end
	end)

end;
task.spawn(C_a1);
-- StarterGui.VEXGUI.Main.VexFrame.Tabs.General.AntiFlingButton.AntiFlingScript
local function C_a4()
	local script = G2L["a4"];
	local plr = game.Players.LocalPlayer
	local button = script.Parent
	local buttonmodule = require(script.Parent.Parent.Parent.Parent.ButtonModule)

	-- Toggle state
	local toggleAntiFling = false

	-- High density anti-fling physical properties
	local antiFlingProperties = PhysicalProperties.new(1000, 0.3, 0.5)
	-- Roblox's default for Plastic
	local defaultProperties = PhysicalProperties.new(0.7, 0.3, 0.5)

	-- Function to apply properties to all character parts
	local function applyPhysicalProperties(char, props)
		for _, part in ipairs(char:GetDescendants()) do
			if part:IsA("BasePart") then
				part.CustomPhysicalProperties = props
			end
		end
	end

	-- Enable/Disable Anti-Fling
	local function enableAntiFling(char)
		applyPhysicalProperties(char, antiFlingProperties)
	end

	local function disableAntiFling(char)
		applyPhysicalProperties(char, defaultProperties)
	end

	-- Button click toggles anti-fling
	button.MouseButton1Up:Connect(function()
		toggleAntiFling = not toggleAntiFling
		button.BorderSizePixel = toggleAntiFling and 2 or 0

		local char = plr.Character or plr.CharacterAdded:Wait()
		char:WaitForChild("HumanoidRootPart")

		if toggleAntiFling then
			enableAntiFling(char)
		else
			disableAntiFling(char)
		end
	end)

	-- Reapply on respawn
	plr.CharacterAdded:Connect(function(char)
		char:WaitForChild("HumanoidRootPart")
		if toggleAntiFling then
			enableAntiFling(char)
		end
	end)

end;
task.spawn(C_a4);
-- StarterGui.VEXGUI.Main.VexFrame.Tabs.General.JerkOff.JerkOffScript
local function C_a8()
	local script = G2L["a8"];
	local Players = game:GetService("Players")
	local plr = Players.LocalPlayer

	local R15jerkId = "rbxassetid://698251653"
	local R6jerkId  = "rbxassetid://72042024"

	local char = plr.Character or plr.CharacterAdded:Wait()
	local Humanoid
	local currentTrack
	local jerkLoopThread -- to keep track of the loop

	-- Function to check rig type (returns true if R15)
	local function isR15(character)
		return character:FindFirstChild("UpperTorso") ~= nil
	end

	-- Function to update character and humanoid
	local function updateCharacter(character)
		Humanoid = character:WaitForChild("Humanoid")
	end

	-- Initial character setup
	updateCharacter(char)

	-- Update on respawn
	plr.CharacterAdded:Connect(updateCharacter)

	-- UI + Button
	local btn = script.Parent
	local btnmodule = require(script.Parent.Parent.Parent.Parent.ButtonModule)
	local notificationmodule = require(script.Parent.Parent.Parent.Parent.NotificationModule)

	local toggle = false
	local warningShown = false

	btn.MouseButton1Up:Connect(function()
		if not Humanoid then return end

		-- Show warning first time only
		if not warningShown then
			warningShown = true
			notificationmodule.GuiNotification("WARNING", "This is a NSFW command, click again to proceed! ⚠️", 3)
			return
		end

		local character = plr.Character
		local animator = Humanoid:FindFirstChildOfClass("Animator") or Humanoid:WaitForChild("Animator")

		if not toggle then
			-- Turn ON and start repeating animation
			toggle = true
			btnmodule.ColorOn(btn)

			-- Run jerk animation loop every 2 seconds
			jerkLoopThread = task.spawn(function()
				while toggle do
					-- Play animation
					local anim = Instance.new("Animation")
					anim.AnimationId = isR15(character) and R15jerkId or R6jerkId
					currentTrack = animator:LoadAnimation(anim)
					currentTrack:Play()
					currentTrack:AdjustSpeed(isR15(character) and 0.7 or 0.65)
					currentTrack.TimePosition = 0.5

					task.wait(0.3) -- slightly less than 2s to account for startup delay
					if currentTrack then
						currentTrack:Stop()
						currentTrack:Destroy()
						currentTrack = nil
					end

				end
			end)
		else
			-- Turn OFF and stop animation loop
			toggle = false
			btnmodule.ColorOff(btn)

			if currentTrack then
				currentTrack:Stop()
				currentTrack:Destroy()
				currentTrack = nil
			end
		end
	end)

end;
task.spawn(C_a8);
-- StarterGui.VEXGUI.Main.VexFrame.Tabs.Notes.TextBox.NotesSaver
local function C_ab()
	local script = G2L["ab"];
	local HttpService = game:GetService("HttpService")
	local FILE_NAME = "textbox_content.json"

	local textbox = script.Parent  -- Reference to the TextBox this LocalScript is placed in.

	-- Function to save the text to a file (for Studio testing)
	local function saveText(text)
		local data = {
			content = text
		}
		writefile(FILE_NAME, HttpService:JSONEncode(data))  -- Save to a file in Studio.
	end

	-- Function to load the text from the file (for Studio testing)
	local function loadText()
		if isfile(FILE_NAME) then
			local data = HttpService:JSONDecode(readfile(FILE_NAME))  -- Read from the file in Studio.
			return data.content
		end
		return ""  -- Default to an empty string if no saved content is found.
	end

	-- Load saved text when the script starts
	local savedText = loadText()
	textbox.Text = savedText  -- Set the TextBox's text to the saved value on start.

	-- Function to save text every 3 seconds
	while true do
		wait(3)  -- Wait for 3 seconds before saving.
		saveText(textbox.Text)  -- Save the current text in the TextBox
	end

end;
task.spawn(C_ab);
-- StarterGui.VEXGUI.Main.VexFrame.Tabs.Settings.Buttons.Panic.AntiFlingScript
local function C_b0()
	local script = G2L["b0"];
	local plr = game.Players.LocalPlayer
	local button = script.Parent

	local gui = plr.PlayerGui:FindFirstChild("VEXGUI")


	button.MouseButton1Up:Connect(function()
		gui:Destroy()
	end)




end;
task.spawn(C_b0);
-- StarterGui.VEXGUI.Main.VexFrame.Tabs.Settings.Buttons.DiscordLink.DiscordLinkScript
local function C_b3()
	local script = G2L["b3"];
	local btn = script.Parent

	btn.MouseButton1Click:Connect(function()
		setclipboard("soon bruh 😭")
	end)

end;
task.spawn(C_b3);
-- StarterGui.VEXGUI.Main.VexFrame.Tabs.Client.DihButton.ppscript
local function C_b8()
	local script = G2L["b8"];
	local player = game.Players.LocalPlayer
	local button = script.Parent

	local notificationmodule = require(script.Parent.Parent.Parent.Parent.NotificationModule)
	local Buttonmodule = require(script.Parent.Parent.Parent.Parent.ButtonModule)

	local toggle = false

	-- Save original clothing
	local originalShirt, originalPants, originalShirtGraphic

	button.MouseButton1Up:Connect(function()
		local char = player.Character

		if toggle == false then
			notificationmodule.Notification("Warning", "NSFW ‼️", 3)
			Buttonmodule.ColorOn(script.Parent)

			local pp = Instance.new("Part", workspace)
			pp.Name = "ppLol"

			local lowertorso = char:FindFirstChild("LowerTorso")

			local weld1 = Instance.new("Weld", pp)
			weld1.Part0 = pp
			weld1.Part1 = lowertorso

			pp.Size = Vector3.new(3.303, 0.376, 0.752)
			pp.Orientation = Vector3.new(0, 90, 0)
			pp.BrickColor = char["Body Colors"].HeadColor
			pp.CanCollide = false
			weld1.C0 = CFrame.new(1.80, 0.5, -pp.Size.Z / 1 - -0.75) * CFrame.Angles(0, math.rad(90), 0)

			for _, v in pairs(char:GetDescendants()) do
				if v:IsA("MeshPart") then
					v.BrickColor = char["Body Colors"].HeadColor
				end
			end

			-- Save clothing
			local shirt = char:FindFirstChildOfClass("Shirt")
			if shirt then
				originalShirt = shirt:Clone()
				shirt:Destroy()
			end

			local pants = char:FindFirstChildOfClass("Pants")
			if pants then
				originalPants = pants:Clone()
				pants:Destroy()
			end

			local graphic = char:FindFirstChild("Shirt Graphic")
			if graphic then
				originalShirtGraphic = graphic:Clone()
				graphic:Destroy()
			end

		else
			-- Remove fake part
			local part = workspace:FindFirstChild("ppLol")
			if part then
				part:Destroy()
			end

			-- Reapply clothing
			if originalShirt then
				originalShirt:Clone().Parent = char
			end

			if originalPants then
				originalPants:Clone().Parent = char
			end

			if originalShirtGraphic then
				originalShirtGraphic:Clone().Parent = char
			end

			Buttonmodule.ColorOff(script.Parent)
		end

		toggle = not toggle
	end)

end;
task.spawn(C_b8);
-- StarterGui.VEXGUI.Main.VexFrame.Tabs.Client.RainbowSkinButton.RainbowSkinScript
local function C_bb()
	local script = G2L["bb"];
	local player = game.Players.LocalPlayer
	local button = script.Parent
	local runService = game:GetService("RunService")
	local Buttonmodule = require(script.Parent.Parent.Parent.Parent.ButtonModule)

	local toggle = false
	local connection
	local char
	local skintone

	-- Function to update character references
	local function updateCharacter()
		char = player.Character or player.CharacterAdded:Wait()
		skintone = char:WaitForChild("Body Colors")
	end

	-- Listen for character respawn
	player.CharacterAdded:Connect(function()
		if connection then
			connection:Disconnect()
			connection = nil
		end
		toggle = false
		Buttonmodule.ColorOff(script.Parent)
		updateCharacter()
	end)

	-- Initialize character
	updateCharacter()

	button.MouseButton1Up:Connect(function()
		if not toggle then
			Buttonmodule.ColorOn(script.Parent)

			local bodyParts = {}
			for _, part in pairs(char:GetChildren()) do
				if part:IsA("BasePart") then
					table.insert(bodyParts, part)
				end
			end

			local hue = 0
			connection = runService.RenderStepped:Connect(function(deltaTime)
				hue = (hue + deltaTime / 2) % 1
				local color = Color3.fromHSV(hue, 1, 1)

				for _, part in pairs(char:GetChildren()) do
					if part:IsA("BasePart") then
						part.Color = color
					end
				end
			end)
		else
			if connection then
				connection:Disconnect()
				connection = nil
			end

			Buttonmodule.ColorOff(script.Parent)

			for _, part in pairs(char:GetChildren()) do
				if part:IsA("BasePart") then
					part.BrickColor = skintone.HeadColor
				end
			end
		end

		toggle = not toggle
	end)

end;
task.spawn(C_bb);
-- StarterGui.VEXGUI.Main.VexFrame.Tabs.Client.FartButton.fartscript
local function C_bf()
	local script = G2L["bf"];
	local button = script.Parent
	local debounce = false

	button.MouseButton1Up:Connect(function()
		if not debounce then
			debounce = true
			local player = game.Players.LocalPlayer
			local char = player.Character or player.CharacterAdded:Wait()
			local humanoidRootPart = char:WaitForChild("LowerTorso")

			local audio = Instance.new("Sound", script.Parent)
			audio.SoundId = "rbxassetid://9059590824"
			audio:Play()

			-- Create a new part behind the HumanoidRootPart to attach the smoke
			local smokePart = Instance.new("Part")
			smokePart.Size = Vector3.new(1, 1, 1)
			smokePart.CanCollide = false
			smokePart.Anchored = true
			smokePart.Transparency = 1 -- Make the part invisible
			smokePart.CFrame = humanoidRootPart.CFrame * CFrame.new(0, 0, 2) -- Initial position behind the character
			smokePart.Parent = char

			-- Create a Smoke emitter and parent it to the smokePart
			local smoke = Instance.new("Smoke")
			smoke.Color = Color3.new(0.247059, 0.388235, 0.168627)
			smoke.Size = 0.3
			smoke.Opacity = 0.5
			smoke.RiseVelocity = 5
			smoke.Parent = smokePart

			-- Update the smoke position every 0.5 seconds for 10 seconds
			for i = 1, 20 do
				smokePart.CFrame = humanoidRootPart.CFrame * CFrame.new(0, 0, 2)
				wait(0.2)
			end

			-- Clean up
			smokePart:Destroy()	
			audio:Destroy()
			debounce = false
		end
	end)

end;
task.spawn(C_bf);
-- StarterGui.VEXGUI.Main.VexFrame.Tabs.Client.NightButton.NightScript
local function C_c1()
	local script = G2L["c1"];
	local button = script.Parent
	local lighting = game:GetService("Lighting")

	button.MouseButton1Up:Connect(function()
		lighting.TimeOfDay = "3:00"
	end)
end;
task.spawn(C_c1);
-- StarterGui.VEXGUI.Main.VexFrame.Tabs.Client.DayButton.DayScript
local function C_c4()
	local script = G2L["c4"];
	local button = script.Parent
	local lighting = game:GetService("Lighting")

	button.MouseButton1Up:Connect(function()
		lighting.TimeOfDay = "14:00"
	end)
end;
task.spawn(C_c4);
-- StarterGui.VEXGUI.Main.VexFrame.Tabs.Client.RemoveFogButton.RemoveFog
local function C_c7()
	local script = G2L["c7"];
	local player = game.Players.LocalPlayer
	local mouse = player:GetMouse()
	local button = script.Parent
	local toggle = false

	local lighting = game:GetService("Lighting")

	local module = require(script.Parent.Parent.Parent.Parent.ButtonModule)

	-- Toggle Teleport Mode
	button.MouseButton1Click:Connect(function()
		toggle = not toggle
		local origfog1 = game:GetService("Lighting").FogStart
		local origfog2 = game:GetService("Lighting").FogEnd
		if toggle then
			module.ColorOn(button)
			lighting.FogStart = math.huge
			lighting.FogEnd = math.huge


		else
			module.ColorOff(button)
			lighting.FogStart = origfog1
			lighting.FogEnd = origfog2

		end
	end)
end;
task.spawn(C_c7);
-- StarterGui.VEXGUI.Main.VexFrame.Tabs.Client.ClickToDeleteButton.clicktodeletescript
local function C_cb()
	local script = G2L["cb"];
	local player = game.Players.LocalPlayer
	local mouse = player:GetMouse()
	local toggle = false

	local pointicon = "rbxasset://textures/ArrowCursor.png"

	local previousTarget = nil
	local moveConnection = nil
	local changeConnection = nil
	local deleteConnection = nil

	local buttonmodule = require(script.Parent.Parent.Parent.Parent.ButtonModule)

	local function highlightTarget(target)
		-- Remove highlight from the previous target if it exists
		local mouse = player:GetMouse()
		if previousTarget and previousTarget:FindFirstChild("DestroyOutline") then
			previousTarget.DestroyOutline:Destroy()
			mouse.Icon = ""

		end

		-- Highlight the new target
		if target and target:IsA("BasePart") then
			local highlight = Instance.new("Highlight", target)
			highlight.Name = "DestroyOutline"
			highlight.FillColor = Color3.new(1, 0, 0) -- Red fill color
			highlight.OutlineColor = Color3.new(1, 1, 1) -- White outline color
			highlight.DepthMode = Enum.HighlightDepthMode.Occluded -- Respect depth (not always on top)
			previousTarget = target


			mouse.Icon = pointicon
		else
			previousTarget = nil
		end
	end

	script.Parent.MouseButton1Up:Connect(function()
		if toggle == false then
			toggle = true
			buttonmodule.ColorOn(script.Parent)
			-- Connect to the Mouse's Move event
			moveConnection = mouse.Move:Connect(function()
				local target = mouse.Target
				highlightTarget(target)
			end)

			-- Connect to the Mouse's Button1Up event for deleting parts
			deleteConnection = mouse.Button1Up:Connect(function()
				if toggle and mouse.Target then
					mouse.Target:Destroy()
				end
			end)

			-- Connect to the Mouse's Changed event to remove the highlight if necessary
			changeConnection = mouse.Changed:Connect(function()
				local target = mouse.Target

				-- If the mouse moves away from the target, remove the highlight
				if not target then
					highlightTarget(nil)
				end
			end)
		else
			toggle = false
			buttonmodule.ColorOff(script.Parent)
			-- Disconnect the events when toggled off
			if moveConnection then
				moveConnection:Disconnect()
				moveConnection = nil
			end
			if changeConnection then
				changeConnection:Disconnect()
				changeConnection = nil
			end
			if deleteConnection then
				deleteConnection:Disconnect()
				deleteConnection = nil
			end

			-- Remove the highlight if it exists
			if previousTarget and previousTarget:FindFirstChild("DestroyOutline") then
				previousTarget.DestroyOutline:Destroy()
				previousTarget = nil
			end
		end
	end)

end;
task.spawn(C_cb);
-- StarterGui.VEXGUI.Main.VexFrame.Tabs.Client.ClickToCollisionButton.clicktodeletescript
local function C_ce()
	local script = G2L["ce"];
	local player = game.Players.LocalPlayer
	local mouse = player:GetMouse()
	local toggle = false

	local previousTarget = nil
	local moveConnection = nil
	local changeConnection = nil
	local deleteConnection = nil

	local pointicon = "rbxasset://textures/ArrowCursor.png"

	local buttonmodule = require(script.Parent.Parent.Parent.Parent.ButtonModule)
	local notificationmodule = require(script.Parent.Parent.Parent.Parent.NotificationModule)

	local function highlightTarget(target)
		local mouse = player:GetMouse()
		-- Remove highlight from the previous target if it exists
		if previousTarget and previousTarget:FindFirstChild("DestroyOutline") then
			previousTarget.DestroyOutline:Destroy()
			mouse.Icon = ""
		end

		-- Highlight the new target
		if target and target:IsA("BasePart") then
			local highlight = Instance.new("Highlight", target)
			highlight.Name = "DestroyOutline"

			if target.CanCollide then
				-- Orange for CanCollide ON
				highlight.FillColor = Color3.fromRGB(255, 170, 0) -- Orange
				highlight.OutlineColor = Color3.fromRGB(255, 255, 255) -- White outline
			else
				-- Blue for CanCollide OFF
				highlight.FillColor = Color3.fromRGB(0, 170, 255) -- Bright blue
				highlight.OutlineColor = Color3.fromRGB(200, 200, 255) -- Soft blue-white outline
			end

			highlight.DepthMode = Enum.HighlightDepthMode.Occluded
			previousTarget = target
		else
			previousTarget = nil
		end
	end

	script.Parent.MouseButton1Up:Connect(function()
		if toggle == false then

			notificationmodule.GuiNotification("Color Meaning", "🟠 = Collision On, 🔵 = Collision Off ", 3)

			toggle = true
			buttonmodule.ColorOn(script.Parent)

			moveConnection = mouse.Move:Connect(function()
				local target = mouse.Target
				highlightTarget(target)
				mouse.Icon = pointicon
			end)

			deleteConnection = mouse.Button1Up:Connect(function()
				if toggle and mouse.Target then
					mouse.Target.CanCollide = not mouse.Target.CanCollide
					highlightTarget(mouse.Target) -- Update highlight color
				end
			end)

			changeConnection = mouse.Changed:Connect(function()
				local target = mouse.Target
				if not target then
					highlightTarget(nil)
				end
			end)
		else
			toggle = false
			buttonmodule.ColorOff(script.Parent)

			if moveConnection then moveConnection:Disconnect() moveConnection = nil end
			if changeConnection then changeConnection:Disconnect() changeConnection = nil end
			if deleteConnection then deleteConnection:Disconnect() deleteConnection = nil end

			if previousTarget and previousTarget:FindFirstChild("DestroyOutline") then
				previousTarget.DestroyOutline:Destroy()
				previousTarget = nil
			end
		end
	end)

end;
task.spawn(C_ce);
-- StarterGui.VEXGUI.Main.VexFrame.Tabs.Client.LadderToHeaven.LadderToHeaven
local function C_d1()
	local script = G2L["d1"];
	local plr = game:GetService("Players").LocalPlayer
	local btn = script.Parent

	local humrootpart

	-- Function to update character and HumanoidRootPart
	local function updateCharacter(char)
		char:WaitForChild("HumanoidRootPart")
		humrootpart = char:FindFirstChild("HumanoidRootPart")
	end

	-- Set initial character
	if plr.Character then
		updateCharacter(plr.Character)
	end

	-- Listen for respawns
	plr.CharacterAdded:Connect(function(char)
		updateCharacter(char)
	end)

	btn.MouseButton1Up:Connect(function()
		if not humrootpart then return end

		local ladder = Instance.new("TrussPart")
		ladder.Size = Vector3.new(2, 512, 2)
		ladder.Anchored = true
		ladder.CFrame = humrootpart.CFrame * CFrame.new(0, 253.3, -2)
		ladder.Parent = workspace
		ladder.Material = Enum.Material.Neon

		local Button = script.Parent
		local CurrentColor = Color3.new(255, 0 , 0)

		function zigzag(X) return math.acos(math.cos(X*math.pi))/math.pi end

		local counter = 0

		while wait(0.1)do
			ladder.Color = Color3.fromHSV(zigzag(counter),1,1)

			counter = counter + 0.01
		end
	end)

end;
task.spawn(C_d1);
-- StarterGui.VEXGUI.Main.VexFrame.Tabs.Client.ExplodeButton.ExplodeScript
local function C_d4()
	local script = G2L["d4"];
	local plr = game:GetService("Players").LocalPlayer
	local btn = script.Parent

	local humrootpart

	-- Function to update character and HumanoidRootPart
	local function updateCharacter(char)
		char:WaitForChild("HumanoidRootPart")
		humrootpart = char:FindFirstChild("HumanoidRootPart")
	end

	-- Set initial character
	if plr.Character then
		updateCharacter(plr.Character)
	end

	-- Listen for respawns
	plr.CharacterAdded:Connect(function(char)
		updateCharacter(char)
	end)

	btn.MouseButton1Up:Connect(function()
		if not humrootpart then return end

		local explode = Instance.new("Explosion")
		explode.Position = humrootpart.Position
		explode.BlastRadius = 10
		explode.BlastPressure = 5000000
		explode.Parent = workspace
	end)

end;
task.spawn(C_d4);
-- StarterGui.VEXGUI.Main.VexFrame.Tabs.TargetOLD.AnnoyButton.AnnoyScript
local function C_d8()
	local script = G2L["d8"];

end;
task.spawn(C_d8);
-- StarterGui.VEXGUI.Main.VexFrame.Tabs.Target.TargetEnterButton.TargetEnterScript
local function C_e0()
	local script = G2L["e0"];
	local button = script.Parent
	local textbox = button.Parent.EnterTarget
	local label = button.Parent.CurrentTarget

	button.MouseButton1Click:Connect(function()
		label.Text = "Current Target: " .. textbox.Text
	end)
end;
task.spawn(C_e0);
-- StarterGui.VEXGUI.Main.VexFrame.Tabs.Kohaú.SlipAnimButton.SlipAnim
local function C_ec()
	local script = G2L["ec"];
	local btn = script.Parent
	local animid = "rbxassetid://11444932008"

	btn.MouseButton1Up:Connect(function()
		local player = game:GetService("Players").LocalPlayer
		local character = player.Character or player.CharacterAdded:Wait()
		local hum = character:FindFirstChild("Humanoid")

		if hum then
			local animator = hum:FindFirstChildOfClass("Animator")
			if animator then
				local anim = Instance.new("Animation")
				anim.AnimationId = animid

				local track = animator:LoadAnimation(anim)
				track:Play()
			else
				warn("Animator not found in Humanoid.")
			end
		else
			warn("Humanoid not found in character.")
		end
	end)

end;
task.spawn(C_ec);
-- StarterGui.VEXGUI.Main.VexFrame.GameDetector
local function C_fd()
	local script = G2L["fd"];
	local Players = game:GetService("Players")
	local player = Players.LocalPlayer
	local PlayerGui = player:WaitForChild("PlayerGui")

	-- Adjust to match the location of your values folder
	local GameBoolValues = script.Parent.Parent:WaitForChild("Values"):WaitForChild("Games")
	local NotificationModule = require(script.Parent:WaitForChild("NotificationModule"))

	local currentGameLabel = script.Parent.Tabs.VexButtons.ScrollingFrame:FindFirstChild("CurrentGame")

	local Games = {"Kohaú", "United States Military Academy"}
	local Ids = {"4375619868", "1212001367"}

	print("Checking for game match...")

	for i, id in ipairs(Ids) do
		if tostring(game.PlaceId) == id then
			local gameName = Games[i]
			print("Matched game:", gameName)

			-- Show notification
			NotificationModule.GuiNotification("Game Detected", "Welcome to " .. gameName .. "!", 3)

			-- Try to find the BoolValue
			local boolValue = GameBoolValues:FindFirstChild(gameName)
			if boolValue and boolValue:IsA("BoolValue") then
				print("Found BoolValue for:", gameName)

				boolValue.Value = true

				-- Update current game label
				if currentGameLabel then
					print("Updating CurrentGame label")
					currentGameLabel.Visible = true
					currentGameLabel.Name = gameName
					currentGameLabel.Text = gameName
				else
					warn("CurrentGame label not found")
				end
			else
				warn("BoolValue not found or not a BoolValue:", gameName)
			end

			break
		end
	end

	-- Print all BoolValues for debug
	print("Bool values in Games folder:")
	for _, v in pairs(GameBoolValues:GetChildren()) do
		print("-", v.Name, v.ClassName)
	end

end;
task.spawn(C_fd);
-- StarterGui.VEXGUI.Main.Drag
local function C_ff()
	local script = G2L["ff"];
	local UserInputService = game:GetService('UserInputService')

	local frame = script.Parent

	local leadFrame = Instance.new('Frame') do
		leadFrame.AnchorPoint = frame.AnchorPoint
		leadFrame.Position = frame.Position
		leadFrame.Size = frame.Size
		leadFrame.Name = `Lead {frame.Name}`
		leadFrame.Visible = false
		leadFrame.Parent = frame.Parent
	end

	local screenGui = frame:FindFirstAncestorOfClass('ScreenGui')

	local inputChanged = nil
	local inputEnded = nil

	local function getBoundsRelations(guiObject : GuiObject)
		local bounds = screenGui.AbsoluteSize
		local topLeft = screenGui.IgnoreGuiInset and guiObject.AbsolutePosition + Vector2.new(0, 36) or guiObject.AbsolutePosition
		local bottomRight = topLeft + guiObject.AbsoluteSize

		local boundRelations = {
			Top = topLeft.Y < 0 and math.abs(topLeft.Y) or nil,
			Left = topLeft.X < 0 and math.abs(topLeft.X) or nil,
			Right = bottomRight.X > bounds.X and math.abs(bottomRight.X - bounds.X) or nil,
			Bottom = bottomRight.Y > bounds.Y and math.abs(bottomRight.Y - bounds.Y) or nil,
		}

		return (not boundRelations.Top
			and not boundRelations.Bottom
			and not boundRelations.Left
			and not boundRelations.Right), boundRelations
	end

	frame.InputBegan:Connect(function(inputObject : InputObject)
		if inputObject.UserInputType == Enum.UserInputType.MouseButton1 then

			local lastMousePosition = UserInputService:GetMouseLocation()
			local goalPosition = frame.Position

			inputChanged = UserInputService.InputChanged:Connect(function(input : InputObject, event : boolean)
				if input.UserInputType == Enum.UserInputType.MouseMovement then
					local currentMousePosition = UserInputService:GetMouseLocation()
					local mouseDelta = currentMousePosition - lastMousePosition

					goalPosition += UDim2.fromOffset(mouseDelta.X, mouseDelta.Y)

					leadFrame.Position = goalPosition

					local isInBounds, relations = getBoundsRelations(leadFrame)

					if not isInBounds then
						local x = (relations.Left or 0) - (relations.Right or 0)
						local y = (relations.Top or 0) - (relations.Bottom or 0)

						goalPosition += UDim2.fromOffset(x, y)
					end

					frame.Position = goalPosition
					lastMousePosition = currentMousePosition
				end
			end)

			inputEnded = frame.InputEnded:Connect(function(input : InputObject)
				if input.UserInputType == Enum.UserInputType.MouseButton1 then
					inputChanged:Disconnect()
					inputChanged = nil

					inputEnded:Disconnect()
					inputEnded = nil
				end
			end)
		end
	end)

	frame.Destroying:Once(function()

		leadFrame = leadFrame:Destroy()

		if inputChanged  then
			inputChanged:Disconnect()
			inputChanged = nil
		end

		if inputEnded then
			inputEnded:Disconnect()
			inputEnded = nil
		end
	end)
end;
task.spawn(C_ff);
-- StarterGui.VEXGUI.Main.OpenAndClose
local function C_100()
	local script = G2L["100"];
	local ts = game:GetService("TweenService")

	local closeButton = script.Parent.Parent.Main:WaitForChild("Close")
	local main = script.Parent.Parent:FindFirstChild("Main")
	local frame = script.Parent:WaitForChild("VexFrame")
	local tabs = frame:WaitForChild("Tabs")
	local buttons = tabs.VexButtons.ScrollingFrame

	-- Sound
	local sound = Instance.new("Sound", workspace)
	sound.SoundId = "rbxassetid://1843027392"
	sound:Play()

	-- Toggle open/close state
	local closed = false
	closeButton.MouseButton1Up:Connect(function()
		if closed == false then
			for _, child in pairs(tabs:GetChildren()) do
				if child:IsA("Frame") then
					child.Visible = false
				end
			end
			for _, child in pairs(tabs:GetChildren()) do
				if child:IsA("ScrollingFrame") then
					child.Visible = false
				end
			end
			frame.Visible = false
		else
			frame.Visible = true
			tabs:FindFirstChild("Home").Visible = true
		end
		closed = not closed
	end)

	-- Button logic for TextButtons and buttons in ScrollingFrame
	local function setupButtonLogic(button)
		if button:IsA("TextButton") then
			button.MouseButton1Up:Connect(function()
				local frameName = button.Name:gsub("Button", "") -- Remove 'Button' suffix to get frame name

				-- Hide all frames first
				for _, tab in pairs(tabs:GetChildren()) do
					if tab:IsA("Frame") then
						tab.Visible = false
					end
				end

				-- Hide ScrollingFrame only if it's not the one clicked
				for _, scrollFrame in pairs(tabs:GetChildren()) do
					if scrollFrame:IsA("ScrollingFrame") and scrollFrame ~= buttons then
						scrollFrame.Visible = false
					end
				end

				-- Show the corresponding target frame based on the button clicked
				local targetFrame = tabs:FindFirstChild(frameName)
				if targetFrame then
					targetFrame.Visible = true
				end

				-- Show the specific scrolling frame if the target frame is inside it
				if targetFrame and targetFrame:IsA("ScrollingFrame") then
					targetFrame.Visible = true
				end
			end)
		end
	end

	-- Set up button logic for the buttons in ScrollingFrame
	for _, button in pairs(buttons:GetChildren()) do
		setupButtonLogic(button)
	end

	-- Set up button logic for any future buttons added to the ScrollingFrame
	buttons.ChildAdded:Connect(function(child)
		setupButtonLogic(child)
	end)

end;
task.spawn(C_100);
-- StarterGui.VEXGUI.Main.FPS.LocalScript
local function C_103()
	local script = G2L["103"];
	local RunService = game:GetService("RunService")
	local player = game.Players.LocalPlayer

	local fpsLabel = script.Parent

	-- Update every frame
	RunService.RenderStepped:Connect(function(deltaTime)
		local fps = math.floor(1 / deltaTime)
		fpsLabel.Text = "FPS: " .. fps
	end)

end;
task.spawn(C_103);
-- StarterGui.VEXGUI.Logo.LocalScript
local function C_108()
	local script = G2L["108"];
	local imageLabel = game.Players.LocalPlayer.PlayerGui.VEXGUI:WaitForChild("Logo") -- Assuming the image is the parent
	local aspectRatio = 1 -- 500 / 500 = 1
	local ts = game:GetService("TweenService")

	local ti = TweenInfo.new(3.5, Enum.EasingStyle.Cubic, Enum.EasingDirection.In)


	-- Create the UIAspectRatioConstraint
	local aspectConstraint = Instance.new("UIAspectRatioConstraint")
	aspectConstraint.AspectRatio = aspectRatio
	aspectConstraint.Parent = imageLabel

	-- Set anchor point to center
	imageLabel.AnchorPoint = Vector2.new(0.5, 0.5)

	-- Set size and center position
	imageLabel.Position = UDim2.new(0.5, 0, 0.5, 0)

	if imageLabel then
		imageLabel.Visible = true
		imageLabel.Size = UDim2.new(0, 0, 0, 0)
		ts:Create(imageLabel, ti, {Size = UDim2.new(1, 0, 1, 0)}):Play()
	end
end;
task.spawn(C_108);
-- StarterGui.VEXGUI.ChatLog.Drag
local function C_110()
	local script = G2L["110"];
	local UserInputService = game:GetService('UserInputService')

	local frame = script.Parent

	local leadFrame = Instance.new('Frame') do
		leadFrame.AnchorPoint = frame.AnchorPoint
		leadFrame.Position = frame.Position
		leadFrame.Size = frame.Size
		leadFrame.Name = `Lead {frame.Name}`
		leadFrame.Visible = false
		leadFrame.Parent = frame.Parent
	end

	local screenGui = frame:FindFirstAncestorOfClass('ScreenGui')

	local inputChanged = nil
	local inputEnded = nil

	local function getBoundsRelations(guiObject : GuiObject)
		local bounds = screenGui.AbsoluteSize
		local topLeft = screenGui.IgnoreGuiInset and guiObject.AbsolutePosition + Vector2.new(0, 36) or guiObject.AbsolutePosition
		local bottomRight = topLeft + guiObject.AbsoluteSize

		local boundRelations = {
			Top = topLeft.Y < 0 and math.abs(topLeft.Y) or nil,
			Left = topLeft.X < 0 and math.abs(topLeft.X) or nil,
			Right = bottomRight.X > bounds.X and math.abs(bottomRight.X - bounds.X) or nil,
			Bottom = bottomRight.Y > bounds.Y and math.abs(bottomRight.Y - bounds.Y) or nil,
		}

		return (not boundRelations.Top
			and not boundRelations.Bottom
			and not boundRelations.Left
			and not boundRelations.Right), boundRelations
	end

	frame.InputBegan:Connect(function(inputObject : InputObject)
		if inputObject.UserInputType == Enum.UserInputType.MouseButton1 then

			local lastMousePosition = UserInputService:GetMouseLocation()
			local goalPosition = frame.Position

			inputChanged = UserInputService.InputChanged:Connect(function(input : InputObject, event : boolean)
				if input.UserInputType == Enum.UserInputType.MouseMovement then
					local currentMousePosition = UserInputService:GetMouseLocation()
					local mouseDelta = currentMousePosition - lastMousePosition

					goalPosition += UDim2.fromOffset(mouseDelta.X, mouseDelta.Y)

					leadFrame.Position = goalPosition

					local isInBounds, relations = getBoundsRelations(leadFrame)

					if not isInBounds then
						local x = (relations.Left or 0) - (relations.Right or 0)
						local y = (relations.Top or 0) - (relations.Bottom or 0)

						goalPosition += UDim2.fromOffset(x, y)
					end

					frame.Position = goalPosition
					lastMousePosition = currentMousePosition
				end
			end)

			inputEnded = frame.InputEnded:Connect(function(input : InputObject)
				if input.UserInputType == Enum.UserInputType.MouseButton1 then
					inputChanged:Disconnect()
					inputChanged = nil

					inputEnded:Disconnect()
					inputEnded = nil
				end
			end)
		end
	end)

	frame.Destroying:Once(function()

		leadFrame = leadFrame:Destroy()

		if inputChanged  then
			inputChanged:Disconnect()
			inputChanged = nil
		end

		if inputEnded then
			inputEnded:Disconnect()
			inputEnded = nil
		end
	end)
end;
task.spawn(C_110);
-- StarterGui.VEXGUI.ChatLog.ScrollingMainFrame.ChatLogger
local function C_112()
	local script = G2L["112"];
	local Players = game:GetService("Players")
	local TextChatService = game:GetService("TextChatService")

	local localPlayer = Players.LocalPlayer
	local playerGui = localPlayer:WaitForChild("PlayerGui")

	if playerGui:FindFirstChild("ChatLogGui") then
		playerGui:FindFirstChild("ChatLogGui"):Destroy()
	end

	local screenGui = Instance.new("ScreenGui")
	screenGui.Name = "ChatLogGui"
	screenGui.ResetOnSpawn = false
	screenGui.Parent = playerGui

	local scrollingFrame = Instance.new("ScrollingFrame")
	scrollingFrame.Name = "ChatLog"
	scrollingFrame.Size = UDim2.new(1, 0, 12.785, 0)
	scrollingFrame.Position = UDim2.new(0, 0, 1, 0)
	scrollingFrame.CanvasSize = UDim2.new(0, 0, 0, 0)
	scrollingFrame.BackgroundTransparency = 0.5
	scrollingFrame.BackgroundColor3 = Color3.fromRGB(48,48,48)
	scrollingFrame.BorderSizePixel = 0
	scrollingFrame.ScrollBarThickness = 6
	scrollingFrame.Parent = script.Parent.Parent

	local layout = Instance.new("UIListLayout")
	layout.SortOrder = Enum.SortOrder.LayoutOrder
	layout.Padding = UDim.new(0, 4)
	layout.Parent = scrollingFrame

	local function isCommandMessage(message)
		local firstChar = string.sub(message, 1, 1)
		return firstChar == ":" or firstChar == ";" or firstChar == "/" or firstChar == "." or firstChar == "!" or firstChar == "?"
	end

	local runservice = game:GetService("RunService")

	local function createTooltip(text, messageLabel)
		local tooltip = Instance.new("TextLabel")
		tooltip.Size = UDim2.new(0, 300, 0, 40)
		tooltip.BackgroundTransparency = 0.5
		tooltip.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
		tooltip.TextColor3 = Color3.fromRGB(255, 255, 255)
		tooltip.TextSize = 14
		tooltip.TextWrapped = true
		tooltip.Text = text
		tooltip.Font = Enum.Font.SourceSans
		tooltip.Parent = screenGui

		runservice.RenderStepped:Connect(function()
			tooltip.Position = UDim2.new(0, localPlayer:GetMouse().X + 10, 0, localPlayer:GetMouse().Y + 10)
		end)

		messageLabel.MouseLeave:Connect(function()
			tooltip:Destroy()
		end)
	end

	local function addChatMessage(speakerName, messageText)
		local messageLabel = Instance.new("TextLabel")
		messageLabel.Size = UDim2.new(1, -10, 0, 20)
		messageLabel.BackgroundTransparency = 1
		messageLabel.TextXAlignment = Enum.TextXAlignment.Left
		messageLabel.Font = Enum.Font.SourceSans
		messageLabel.TextSize = 16
		messageLabel.TextWrapped = true
		messageLabel.TextTruncate = Enum.TextTruncate.AtEnd
		messageLabel.RichText = true
		messageLabel.Text = "<b>" .. speakerName .. "</b>: " .. messageText
		messageLabel.TextColor3 = isCommandMessage(messageText) and Color3.fromRGB(255, 85, 85) or Color3.fromRGB(255, 255, 255)
		messageLabel.Parent = scrollingFrame

		if messageText:len() > 40 then
			messageLabel.MouseEnter:Connect(function()
				createTooltip(messageText, messageLabel)
			end)
		end

		task.wait()
		scrollingFrame.CanvasSize = UDim2.new(0, 0, 0, layout.AbsoluteContentSize.Y)
		scrollingFrame.CanvasPosition = Vector2.new(0, scrollingFrame.CanvasSize.Y.Offset)
	end

	local loggedMessageIds = {}

	TextChatService.OnIncomingMessage = function(message)
		if message.TextSource then
			if not loggedMessageIds[message.MessageId] then
				loggedMessageIds[message.MessageId] = true
				local player = Players:GetPlayerByUserId(message.TextSource.UserId)
				if player then
					local isWhisper = message.TextChannel and message.TextChannel.Name:match("^RBXWhisper:%d+_%d+$")
					local prefix = isWhisper and "[PM] " or ""
					addChatMessage(prefix .. player.Name, message.Text)
				end
			end
		end
	end

end;
task.spawn(C_112);

return G2L["1"], require;
